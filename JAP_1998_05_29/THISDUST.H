#ifndef THISDUST_H
#define THISDUST_H

/* Begin enums */

enum _0fake // Hashcode: 0x319EEDBD (dec: 832499133)
{
	MQ_BLOOD = 4096,
	MQ_PWATER = 2048,
	MQ_ANVIL = 1024,
	MQ_SCHAMB = 512,
	MQ_BETRAYER = 256,
	MQ_DIABLO = 128,
	MQ_SKELKING = 64,
	MQ_WARLORD = 32,
	MQ_VEIL = 16,
	MQ_LTBANNER = 8,
	MQ_ZHAR = 4,
	MQ_GARBUD = 2,
	MQ_BUTCHER = 1,
};

enum _48fake // Hashcode: 0xE2187E4F (dec: -501711281)
{
	VK_SHIFT = 25,
	VK_TAB = 24,
	VK_NEXT = 23,
	VK_PRIOR = 22,
	VK_PAUSE = 21,
	VK_F12 = 20,
	VK_F11 = 19,
	VK_F10 = 18,
	VK_F9 = 17,
	VK_F8 = 16,
	VK_F7 = 15,
	VK_F6 = 14,
	VK_F5 = 13,
	VK_F4 = 12,
	VK_F3 = 11,
	VK_F2 = 10,
	VK_F1 = 9,
	VK_SNAPSHOT = 8,
	VK_RIGHT = 7,
	VK_LEFT = 6,
	VK_UP = 5,
	VK_DOWN = 4,
	VK_BACK = 3,
	VK_RETURN = 2,
	VK_ESCAPE = 1,
	VK_SPACE = 0,
};

enum _65fake // Hashcode: 0xD4C97067 (dec: -724995993)
{
	NUM_MUSIC = 6,
	TMUSIC_INTRO = 5,
	TMUSIC_L4 = 4,
	TMUSIC_L3 = 3,
	TMUSIC_L2 = 2,
	TMUSIC_L1 = 1,
	TMUSIC_TOWN = 0,
};

enum _66fake // Hashcode: 0x928AA990 (dec: -1836406384)
{
	TRN_MAGE_CNSELBK = 66,
	TRN_MAGE_CNSELGD = 65,
	TRN_MAGE_CNSELG = 64,
	TRN_SUCC_SUCCBW = 63,
	TRN_SUCC_SUCCRW = 62,
	TRN_SUCC_SUCCB = 61,
	TRN_BLACK_BLKKNTBE = 60,
	TRN_BLACK_BLKKNTBT = 59,
	TRN_BLACK_BLKKNTRT = 58,
	TRN_SNAKE_SNAKB = 57,
	TRN_SNAKE_SNAKG = 56,
	TRN_SNAKE_SNAKR = 55,
	TRN_MEGA_BALR = 54,
	TRN_MEGA_VTEXL = 53,
	TRN_MEGA_GUARD = 52,
	TRN_GARGOYLE_GARGB = 51,
	TRN_GARGOYLE_GARGBR = 50,
	TRN_GARGOYLE_GARE = 49,
	TRN_THIN_THINV1 = 48,
	TRN_THIN_THINV2 = 47,
	TRN_THIN_THINV3 = 46,
	TRN_RHINO_RHINOB = 45,
	TRN_RHINO_BLUE = 44,
	TRN_RHINO_ORANGE = 43,
	TRN_MAGMA_WIERD = 42,
	TRN_MAGMA_BLUE = 41,
	TRN_MAGMA_YELLOW = 40,
	TRN_FAT_FATF = 39,
	TRN_FAT_FATB = 38,
	TRN_FAT_BLUE = 37,
	TRN_ACID_ACIDR = 36,
	TRN_ACID_ACIDB = 35,
	TRN_ACID_ACIDBLK = 34,
	TRN_GOATBOW_GRAY = 33,
	TRN_GOATBOW_RED = 32,
	TRN_GOATBOW_BEIGE = 31,
	TRN_BAT_ORANGE = 30,
	TRN_BAT_GREY = 29,
	TRN_BAT_RED = 28,
	TRN_GOATMACE_GRAY = 27,
	TRN_GOATMACE_RED = 26,
	TRN_GOATMACE_BEIGE = 25,
	TRN_SNEAK_SNEAKV1 = 24,
	TRN_SNEAK_SNEAKV3 = 23,
	TRN_SNEAK_SNEAKV2 = 22,
	TRN_SKELSD_BLACK = 21,
	TRN_SKELSD_SKELT = 20,
	TRN_SKELSD_WHITE = 19,
	TRN_SKELBOW_BLACK = 18,
	TRN_SKELBOW_SKELT = 17,
	TRN_SKELBOW_WHITE = 16,
	TRN_SCAV_SCAVW = 15,
	TRN_SCAV_SCAVBE = 14,
	TRN_SCAV_SCAVBR = 13,
	TRN_FALSWORD_BLUE = 12,
	TRN_FALSWORD_DARK = 11,
	TRN_FALSWORD_FALLENT = 10,
	TRN_SKELAXE_BLACK = 9,
	TRN_SKELAXE_SKELT = 8,
	TRN_SKELAXE_WHITE = 7,
	TRN_FALSPEAR_BLUE = 6,
	TRN_FALSPEAR_DARK = 5,
	TRN_FALSPEAR_FALLENT = 4,
	TRN_ZOMBIE_YELLOW = 3,
	TRN_ZOMBIE_GREY = 2,
	TRN_ZOMBIE_BLUERED = 1,
	TRN_PAL_NULL = 0,
};

enum _72fake // Hashcode: 0x761F47BE (dec: 1981761470)
{
	MG_FIREMAN = 33,
	MG_UNRAV = 32,
	MG_MEGA = 31,
	MG_THIN = 30,
	MG_DIABLO = 29,
	MG_SKELBOW = 28,
	MG_RHINO = 27,
	MG_GOATLORD = 26,
	MG_WORM = 25,
	MG_ZOMBIE = 24,
	MG_TSNEAK = 23,
	MG_SUCC = 22,
	MG_SNEAK = 21,
	MG_SNAKE = 20,
	MG_SKING = 19,
	MG_SKELSD = 18,
	MG_SKELAXE = 17,
	MG_SCAV = 16,
	MG_MAGMA = 15,
	MG_MAGE = 14,
	MG_GOLEM = 13,
	MG_GOATMACE = 12,
	MG_GOATBOW = 11,
	MG_GARGOYLE = 10,
	MG_FATC = 9,
	MG_FAT = 8,
	MG_FALSWORD = 7,
	MG_FALSPEAR = 6,
	MG_DEMSKEL = 5,
	MG_DARKMAGE = 4,
	MG_BLACK = 3,
	MG_BIGFALL = 2,
	MG_BAT = 1,
	MG_ACID = 0,
};

enum _73fake // Hashcode: 0xBB8FA3B0 (dec: -1148214352)
{
	SYS_PLAYER_LOAD = 32770,
	SYS_GAMEOVER = 32769,
	SYS_TASK = 32768,
	TSK_CUTSCREEN = 16387,
	TSK_MONSTER_CHOOSE = 16386,
	TSK_BACKGROUND = 16385,
	TSK_GAMETASK = 16384,
	TSK_NOENUM = 0,
};

enum MEM_TYPES // Hashcode: 0x23A4F209 (dec: 598012425)
{
	MT_POST_QUIT = 5,
	MT_IN_GAME = 4,
	MT_POST_EXIT = 3,
	MT_DEMO = 2,
	MT_FRONTEND = 1,
	MT_NONE = 0,
};

enum _74fake // Hashcode: 0xFC391903 (dec: -63366909)
{
	GAL_FLAGS = 32768,
	GAL_HIGH = 32768,
	GAL_FIRST_FREE_MEM_TYPE = 1,
	GAL_PHANTOM_MEM = 0,
};

enum GAL_ERROR_CODE // Hashcode: 0x8E126BBA (dec: -1911395398)
{
	NUM_OF_ERROR_MESSAGES = 10,
	ERR_GAL_NO_MEM_MOVE = 9,
	ERR_GAL_MEM_AREA_NOT_COVERED = 8,
	ERR_GAL_MEM_BLOCK_COLLISION = 7,
	ERR_GAL_MEM_ALREADY_UNLOCKED = 6,
	ERR_GAL_INVALID_MEM_HANDLE = 5,
	ERR_GAL_INVALID_MEM_TYPE = 4,
	ERR_GAL_MEM_TYPE_OVERLAP = 3,
	ERR_GAL_MEM_TYPE_EXISTS = 2,
	ERR_RUN_OUT_OF_MEM_HDRS = 1,
	ERR_GAL_NO_ERROR = 0,
};

enum GAL_VERB_LEV // Hashcode: 0x5FB625BB (dec: 1605772731)
{
	GAL_NOISY = 2,
	GAL_AVERAGE = 1,
	GAL_SILENT = 0,
};

enum LANG_TYPE // Hashcode: 0xED596ED1 (dec: -312906031)
{
	LANG_NONE = 5,
	LANG_JAP = 4,
	LANG_SWEDISH = 3,
	LANG_GERMAN = 2,
	LANG_FRENCH = 1,
	LANG_ENGLISH = 0,
};

enum LANG_DB_NO // Hashcode: 0x670E87B2 (dec: 1729005490)
{
	LANG_DB_CREDITS = 3,
	LANG_DB_BACK = 2,
	LANG_DB_QUEST = 1,
	LANG_DB_MAIN = 0,
};

enum GM_SPEEDS // Hashcode: 0x6D02B78F (dec: 1828894607)
{
	GM_FAST = 1,
	GM_SLOW = 0,
};

enum _item_indexes // Hashcode: 0x58A72E42 (dec: 1487351362)
{
	IDI_RESURRECT = 34,
	IDI_LAZSTAFF = 33,
	IDI_LGTFORGE = 32,
	IDI_GRISWOLD = 31,
	IDI_FULLMANA = 30,
	IDI_FULLHEAL = 29,
	IDI_ARMOFVAL = 28,
	IDI_PORTAL = 27,
	IDI_IDENTIFY = 26,
	IDI_MANA = 25,
	IDI_HEAL = 24,
	IDI_EAR = 23,
	IDI_LASTQUEST = 22,
	IDI_MAPOFDOOM = 22,
	IDI_BLDSTONE = 21,
	IDI_SPECELIX = 20,
	IDI_FUNGALTM = 19,
	IDI_BRAIN = 18,
	IDI_MUSHROOM = 17,
	IDI_ANVIL = 16,
	IDI_GLDNELIX = 15,
	IDI_STEELVEIL = 14,
	IDI_HARCREST = 13,
	IDI_BANNER = 12,
	IDI_TRING = 11,
	IDI_OPTAMULET = 10,
	IDI_ROCK = 9,
	IDI_INFRARING = 8,
	IDI_SKCROWN = 7,
	IDI_CLEAVER = 6,
	IDI_FIRSTQUEST = 6,
	IDI_SORCEROR = 5,
	IDI_ROGUE = 4,
	IDI_WARRCLUB = 3,
	IDI_WARRSHLD = 2,
	IDI_WARRIOR = 1,
	IDI_GOLD = 0,
};

enum B_PER_PIX // Hashcode: 0x7AFAEC5B (dec: 2063264859)
{
	BITS_8 = 2,
	BITS_5 = 1,
	BITS_4 = 0,
};

enum _80fake // Hashcode: 0x42CD1736 (dec: 1120737078)
{
	FAST_RAM = 2,
	WORK_RAM = 1,
};

enum _89fake // Hashcode: 0xF54149F2 (dec: -180270606)
{
	QS_BRAINGIVEN = 7,
	QS_BRAINSPAWNED = 6,
	QS_MUSHGIVEN = 5,
	QS_MUSHPICKED = 4,
	QS_MUSHSPAWNED = 3,
	QS_TOMEGIVEN = 2,
	QS_TOMESPAWNED = 1,
	QS_INIT = 0,
};

enum _setlevels // Hashcode: 0xBFD45663 (dec: -1076603293)
{
	SL_VILEBETRAYER = 5,
	SL_POISONWATER = 4,
	SL_MAZE = 3,
	SL_BONECHAMB = 2,
	SL_SKELKING = 1,
};

enum _92fake // Hashcode: 0x4215E33F (dec: 1108730687)
{
	NUM_CMDS = 93,
	FAKE_CMD_DROPID = 92,
	FAKE_CMD_SETID = 91,
	CMD_AWAKEGOLEM = 90,
	CMD_ENDSHIELD = 89,
	CMD_SYNCQUEST = 88,
	CMD_KILLGOLEM = 87,
	CMD_SYNCPUTITEM = 86,
	CMD_ITEMEXTRA = 85,
	CMD_SPELLXYD = 84,
	CMD_RETOWN = 83,
	CMD_SETVIT = 82,
	CMD_SETDEX = 81,
	CMD_SETMAG = 80,
	CMD_SETSTR = 79,
	CMD_STRING = 78,
	CMD_HEALOTHER = 77,
	CMD_DLEVEL_END = 76,
	CMD_DLEVEL_JUNK = 75,
	CMD_DLEVEL_16 = 74,
	CMD_DLEVEL_15 = 73,
	CMD_DLEVEL_14 = 72,
	CMD_DLEVEL_13 = 71,
	CMD_DLEVEL_12 = 70,
	CMD_DLEVEL_11 = 69,
	CMD_DLEVEL_10 = 68,
	CMD_DLEVEL_9 = 67,
	CMD_DLEVEL_8 = 66,
	CMD_DLEVEL_7 = 65,
	CMD_DLEVEL_6 = 64,
	CMD_DLEVEL_5 = 63,
	CMD_DLEVEL_4 = 62,
	CMD_DLEVEL_3 = 61,
	CMD_DLEVEL_2 = 60,
	CMD_DLEVEL_1 = 59,
	CMD_DLEVEL_0 = 58,
	CMD_DEACTIVATEPORTAL = 57,
	CMD_ACTIVATEPORTAL = 56,
	CMD_SATTACKXY = 55,
	CMD_SEND_PLRINFO = 54,
	CMD_PLAYER_JOINLEVEL = 53,
	CMD_DROPITEM = 52,
	CMD_PLRLEVEL = 51,
	CMD_PLRDAMAGE = 50,
	CMD_DELPLRITEMS = 49,
	CMD_CHANGEPLRITEMS = 48,
	CMD_BREAKOBJ = 47,
	CMD_PLROPOBJ = 46,
	CMD_OPERATEOBJ = 45,
	CMD_CLOSEDOOR = 44,
	CMD_OPENDOOR = 43,
	CMD_GOTOAGETITEM = 42,
	CMD_GOTOGETITEM = 41,
	CMD_REQUESTAGITEM = 40,
	CMD_REQUESTGITEM = 39,
	CMD_PLRDEAD = 38,
	CMD_MONSTDAMAGE = 37,
	CMD_MONSTDEATH = 36,
	CMD_SYNCDATA = 35,
	CMD_DEBUG = 34,
	CMD_CHEAT_SPELL_LEVEL = 33,
	CMD_CHEAT_EXPERIENCE = 32,
	CMD_WARP = 31,
	CMD_NEWLVL = 30,
	CMD_TALKXY = 29,
	CMD_KNOCKBACK = 28,
	CMD_OPOBJT = 27,
	CMD_RESURRECT = 26,
	CMD_TSPELLPID = 25,
	CMD_TSPELLID = 24,
	CMD_SPELLPID = 23,
	CMD_SPELLID = 22,
	CMD_RATTACKPID = 21,
	CMD_RATTACKID = 20,
	CMD_ATTACKPID = 19,
	CMD_ATTACKID = 18,
	CMD_DISARMXY = 17,
	CMD_OPOBJXY = 16,
	CMD_TSPELLXY = 15,
	CMD_SPELLXY = 14,
	CMD_RATTACKXY = 13,
	CMD_ATTACKXY = 12,
	CMD_RESPAWNITEM = 11,
	CMD_PUTITEM = 10,
	CMD_AGETITEM = 9,
	CMD_GETITEM = 8,
	CMD_SBSPELL = 7,
	CMD_ADDVIT = 6,
	CMD_ADDDEX = 5,
	CMD_ADDMAG = 4,
	CMD_ADDSTR = 3,
	CMD_ACK_PLRINFO = 2,
	CMD_WALKXY = 1,
	CMD_STAND = 0,
};

enum _93fake // Hashcode: 0x1A5F22B4 (dec: 442442420)
{
	PAD_ALL_DIRS = 15,
	PAD_BUTTONS = 16320,
	PAD_R2 = 8192,
	PAD_R1 = 4096,
	PAD_L2 = 2048,
	PAD_L1 = 1024,
	PAD_TRIANGLE = 512,
	PAD_CIRCLE = 256,
	PAD_SQUARE = 128,
	PAD_CROSS = 64,
	PAD_SELECT = 32,
	PAD_START = 16,
	PAD_RIGHT = 8,
	PAD_LEFT = 4,
	PAD_DOWN = 2,
	PAD_UP = 1,
};

enum TXT_JUST // Hashcode: 0x557935D7 (dec: 1434006999)
{
	JustRight = 2,
	JustCentre = 1,
	JustLeft = 0,
};

enum _94fake // Hashcode: 0x8F5E5B28 (dec: -1889641688)
{
	FLG_WATER = 16,
	FLG_PENTAGRAM = 8,
	FLG_CYCLE = 4,
	FLG_NOTRANS = 2,
	FLG_FLOOR = 1,
};

enum PLR_MODE // Hashcode: 0x41778A48 (dec: 1098353224)
{
	PM_QUIT = 11,
	PM_NEWLVL = 10,
	PM_SPELL = 9,
	PM_DEATH = 8,
	PM_GOTHIT = 7,
	PM_BLOCK = 6,
	PM_RATTACK = 5,
	PM_ATTACK = 4,
	PM_WALK3 = 3,
	PM_WALK2 = 2,
	PM_WALK = 1,
	PM_STAND = 0,
};

enum _96fake // Hashcode: 0xF62C298C (dec: -164877940)
{
	PEQ_pWAnim = 8,
	PEQ_pHAnim = 7,
	PEQ_pTAnim = 6,
	PEQ_pLAnim = 5,
	PEQ_pFAnim = 4,
	PEQ_pBAnim = 3,
	PEQ_pAAnim = 2,
	PEQ_pDAnim = 1,
	PEQ_pNAnim = 0,
};

enum CTRL_SET // Hashcode: 0xC9A75A53 (dec: -911779245)
{
	CTRL_ADVANCED = 1,
	CTRL_BEGINNER = 0,
};

enum PACTION // Hashcode: 0xBDCA4864 (dec: -1110816668)
{
	PL_FMAGIC = 11,
	PL_QMAGIC = 10,
	PL_LMAGIC = 9,
	PL_TSTAND = 8,
	PL_TWALK = 7,
	PL_DEATH = 6,
	PL_BLOCK = 5,
	PL_HIT = 4,
	PL_ATTACK = 3,
	PL_STAND = 2,
	PL_WALK = 1,
	PL_NOACTION = 0,
};

enum TARGET // Hashcode: 0x8ADDA933 (dec: -1965184717)
{
	T_MISSILE = 2,
	T_MONSTER = 1,
	T_PLAYER = 0,
};

enum _99fake // Hashcode: 0x6385D4A7 (dec: 1669715111)
{
	PAD_UP_IS_UP = 1,
	PAD_UP_IS_UPRIGHT = 0,
};

enum _100fake // Hashcode: 0xA764F60E (dec: -1486555634)
{
	GAMEPAD_GETWALK = 12,
	GAMEPAD_GETALL_FUNCTIONS = 11,
	GAMEPAD_SET_UPFUNCTION = 10,
	GAMEPAD_SETALL_FUNCTIONS = 9,
	GAMEPAD_SET_FUNCTION = 8,
	GAMEPAD_START_PLAYER2 = 7,
	GAMEPAD_START_PLAYER1 = 6,
	GAMEPAD_START_PLAYERS = 5,
	GAMEPAD_STOP_PLAYER2 = 4,
	GAMEPAD_STOP_PLAYER1 = 3,
	GAMEPAD_STOP_PLAYERS = 2,
	GAMEPAD_TOGGLEPAUSE = 1,
	GAMEPAD_RUNNING = 0,
};

enum OVER_TYPE // Hashcode: 0xF0A9D0CD (dec: -257306419)
{
	OVR_FMV = 4,
	OVR_FRONTEND = 3,
	OVR_GAME = 2,
	OVR_PREGAME = 1,
	OVR_NONE = 0,
};

enum ping_status // Hashcode: 0xB8FA2704 (dec: -1191565564)
{
	ping_silence = 4,
	ping_new = 3,
	ping_empty = 2,
	ping_error = 1,
	ping_ok = 0,
};

enum write_ret // Hashcode: 0x71EBB86D (dec: 1911273581)
{
	write_no_card = 3,
	write_no_space = 2,
	write_error = 1,
	write_ok = 0,
};

enum read_ret // Hashcode: 0x2FC10253 (dec: 801178195)
{
	read_no_card = 3,
	read_invalid = 2,
	read_error = 1,
	read_ok = 0,
};

enum card_events // Hashcode: 0xE006AD2B (dec: -536433365)
{
	cardevent_removed = 8,
	cardevent_initialise = 7,
	cardevent_error = 6,
	cardevent_deleting = 5,
	cardevent_formatting = 4,
	cardevent_loading = 3,
	cardevent_saving = 2,
	cardevent_inserted = 1,
	cardevent_directory = 0,
};

enum hw_event // Hashcode: 0xB64206EE (dec: -1237186834)
{
	hw_silence = 4,
	hw_error = 3,
	hw_new = 2,
	hw_empty = 1,
	hw_end = 0,
};

enum _130fake // Hashcode: 0xFAC6A23E (dec: -87645634)
{
	CUTLOAD_SCREEN = 11,
	CUTBEGIN_SCREEN = 10,
	PANDB_SCREEN = 9,
	CUTGATE_SCREEN = 8,
	CUTSTART_SCREEN = 7,
	CUTPORTR_SCREEN = 6,
	CUTPORTL_SCREEN = 5,
	CUT4_SCREEN = 4,
	CUT3_SCREEN = 3,
	CUT2_SCREEN = 2,
	CUTL1D_SCREEN = 1,
	CUTTT_SCREEN = 0,
};

enum KANJI_FRMS // Hashcode: 0x3B76F608 (dec: 997651976)
{
	KANJI_MAIN = 1,
	KANJI_QUEST = 0,
};

enum TPAGE_TYPES // Hashcode: 0x23A3344A (dec: 597898314)
{
	TPAGE_16BIT = 2,
	TPAGE_8BIT = 1,
	TPAGE_4BIT = 0,
};

enum FILE_SYSTEM // Hashcode: 0x870FF5C7 (dec: -2028997177)
{
	FS_CD = 1,
	FS_PC = 0,
};

enum DEV_KIT // Hashcode: 0x56814CBE (dec: 1451314366)
{
	DK_CLIMAX = 2,
	DK_SONY_PCI = 1,
	DK_SONY_ISA = 0,
};

enum _135fake // Hashcode: 0x8CE204CA (dec: -1931344694)
{
	IS_LEVELUP = 991,
	IS_PICKUP = 990,
	PS_NAR19 = 989,
	PS_NAR18 = 988,
	PS_NAR17 = 987,
	PS_NAR16 = 986,
	PS_NAR15 = 985,
	PS_NAR14 = 984,
	PS_NAR13 = 983,
	PS_NAR12 = 982,
	PS_NAR11 = 981,
	PS_NAR10 = 980,
	IS_TITERR = 979,
	MUSIC_INTRO = 978,
	MUSIC_L4 = 977,
	MUSIC_L3 = 976,
	MUSIC_L2 = 975,
	MUSIC_L1 = 974,
	MUSIC_TOWN = 973,
	MSFX_DMAGS = 972,
	MSFX_DMAGD = 971,
	MSFX_DMAGH = 970,
	MSFX_DMAGA = 969,
	MSFX_DIABLOS = 968,
	MSFX_DIABLOD = 967,
	MSFX_DIABLOH = 966,
	MSFX_DIABLOA = 965,
	MSFX_GOLMS = 964,
	MSFX_GOLMD = 963,
	MSFX_GOLMH = 962,
	MSFX_GOLMA = 961,
	MSFX_MAGES = 960,
	MSFX_MAGED = 959,
	MSFX_MAGEH = 958,
	MSFX_MAGEA = 957,
	MSFX_SCBSS = 956,
	MSFX_SCBSD = 955,
	MSFX_SCBSH = 954,
	MSFX_SCBSA = 953,
	MSFX_BLACKS = 952,
	MSFX_BLACKD = 951,
	MSFX_BLACKH = 950,
	MSFX_BLACKA = 949,
	MSFX_SNAKES = 948,
	MSFX_SNAKED = 947,
	MSFX_SNAKEH = 946,
	MSFX_SNAKEA = 945,
	MSFX_MEGAS = 944,
	MSFX_MEGAD = 943,
	MSFX_MEGAH = 942,
	MSFX_MEGAA = 941,
	MSFX_GARGOS = 940,
	MSFX_GARGOD = 939,
	MSFX_GARGOH = 938,
	MSFX_GARGOA = 937,
	MSFX_BFALS = 936,
	MSFX_BFALD = 935,
	MSFX_BFALH = 934,
	MSFX_BFALA = 933,
	MSFX_THINS = 932,
	MSFX_THIND = 931,
	MSFX_THINH = 930,
	MSFX_THINA = 929,
	MSFX_RHINOS = 928,
	MSFX_RHINOD = 927,
	MSFX_RHINOH = 926,
	MSFX_RHINOA = 925,
	MSFX_MAGMAS = 924,
	MSFX_MAGMAD = 923,
	MSFX_MAGMAH = 922,
	MSFX_MAGMAA = 921,
	MSFX_FATS = 920,
	MSFX_FATD = 919,
	MSFX_FATH = 918,
	MSFX_FATA = 917,
	MSFX_FATCS = 916,
	MSFX_FATCD = 915,
	MSFX_FATCH = 914,
	MSFX_FATCA = 913,
	MSFX_SKINGS = 912,
	MSFX_SKINGD = 911,
	MSFX_SKINGH = 910,
	MSFX_SKINGA = 909,
	MSFX_ACIDS = 908,
	MSFX_ACIDD = 907,
	MSFX_ACIDH = 906,
	MSFX_ACIDA = 905,
	MSFX_GOATBS = 904,
	MSFX_GOATBD = 903,
	MSFX_GOATBH = 902,
	MSFX_GOATBA = 901,
	MSFX_BATS = 900,
	MSFX_BATD = 899,
	MSFX_BATH = 898,
	MSFX_BATA = 897,
	MSFX_GOATS = 896,
	MSFX_GOATD = 895,
	MSFX_GOATH = 894,
	MSFX_GOATA = 893,
	MSFX_GOATLS = 892,
	MSFX_GOATLD = 891,
	MSFX_GOATLH = 890,
	MSFX_GOATLA = 889,
	MSFX_SNEAKS = 888,
	MSFX_SNEAKD = 887,
	MSFX_SNEAKH = 886,
	MSFX_SNEAKA = 885,
	MSFX_SNEAKLS = 884,
	MSFX_SNEAKLD = 883,
	MSFX_SNEAKLH = 882,
	MSFX_SNEAKLA = 881,
	MSFX_SKLBWS = 880,
	MSFX_SKLBWD = 879,
	MSFX_SKLBWH = 878,
	MSFX_SKLBWA = 877,
	MSFX_SCAVS = 876,
	MSFX_SCAVD = 875,
	MSFX_SCAVH = 874,
	MSFX_SCAVA = 873,
	MSFX_SKLAXS = 872,
	MSFX_SKLAXD = 871,
	MSFX_SKLAXH = 870,
	MSFX_SKLAXA = 869,
	MSFX_PHALLS = 868,
	MSFX_PHALLD = 867,
	MSFX_PHALLH = 866,
	MSFX_PHALLA = 865,
	MSFX_ZOMBIES = 864,
	MSFX_ZOMBIED = 863,
	MSFX_ZOMBIEH = 862,
	MSFX_ZOMBIEA = 861,
	USFX_DIABLOD = 860,
	USFX_ZHAR2 = 859,
	USFX_ZHAR1 = 858,
	USFX_WLOCK1 = 857,
	USFX_WARLRD1 = 856,
	USFX_SNOT3 = 855,
	USFX_SNOT2 = 854,
	USFX_SNOT1 = 853,
	USFX_SKING1 = 852,
	USFX_LAZ2 = 851,
	USFX_LAZ1 = 850,
	USFX_LACH3 = 849,
	USFX_LACH2 = 848,
	USFX_LACH1 = 847,
	USFX_IZUAL1 = 846,
	USFX_GARBUD4 = 845,
	USFX_GARBUD3 = 844,
	USFX_GARBUD2 = 843,
	USFX_GARBUD1 = 842,
	USFX_CLEAVER = 841,
	PS_DIABLVLINT = 840,
	PS_NAR9 = 839,
	PS_NAR8 = 838,
	PS_NAR7 = 837,
	PS_NAR6 = 836,
	PS_NAR5 = 835,
	PS_NAR4 = 834,
	PS_NAR3 = 833,
	PS_NAR2 = 832,
	PS_NAR1 = 831,
	PS_WDEATH = 830,
	PS_WARR102 = 829,
	PS_WARR101 = 828,
	PS_WARR100 = 827,
	PS_WARR99 = 826,
	PS_WARR98 = 825,
	PS_WARR97 = 824,
	PS_WARR96B = 823,
	PS_WARR95F = 822,
	PS_WARR95E = 821,
	PS_WARR95D = 820,
	PS_WARR95C = 819,
	PS_WARR95B = 818,
	PS_WARR95 = 817,
	PS_WARR94 = 816,
	PS_WARR93 = 815,
	PS_WARR92 = 814,
	PS_WARR91 = 813,
	PS_WARR90 = 812,
	PS_WARR89 = 811,
	PS_WARR88 = 810,
	PS_WARR87 = 809,
	PS_WARR86 = 808,
	PS_WARR85 = 807,
	PS_WARR84 = 806,
	PS_WARR83 = 805,
	PS_WARR82 = 804,
	PS_WARR81 = 803,
	PS_WARR80 = 802,
	PS_WARR79 = 801,
	PS_WARR78 = 800,
	PS_WARR77 = 799,
	PS_WARR76 = 798,
	PS_WARR75 = 797,
	PS_WARR74 = 796,
	PS_WARR73 = 795,
	PS_WARR72 = 794,
	PS_WARR71 = 793,
	PS_WARR70 = 792,
	PS_WARR69B = 791,
	PS_WARR69 = 790,
	PS_WARR68 = 789,
	PS_WARR67 = 788,
	PS_WARR66 = 787,
	PS_WARR65 = 786,
	PS_WARR64 = 785,
	PS_WARR63 = 784,
	PS_WARR62 = 783,
	PS_WARR61 = 782,
	PS_WARR60 = 781,
	PS_WARR59 = 780,
	PS_WARR58 = 779,
	PS_WARR57 = 778,
	PS_WARR56 = 777,
	PS_WARR55 = 776,
	PS_WARR54 = 775,
	PS_WARR53 = 774,
	PS_WARR52 = 773,
	PS_WARR51 = 772,
	PS_WARR50 = 771,
	PS_WARR49 = 770,
	PS_WARR48 = 769,
	PS_WARR47 = 768,
	PS_WARR46 = 767,
	PS_WARR45 = 766,
	PS_WARR44 = 765,
	PS_WARR43 = 764,
	PS_WARR42 = 763,
	PS_WARR41 = 762,
	PS_WARR40 = 761,
	PS_WARR39 = 760,
	PS_WARR38 = 759,
	PS_WARR37 = 758,
	PS_WARR36 = 757,
	PS_WARR35 = 756,
	PS_WARR34 = 755,
	PS_WARR33 = 754,
	PS_WARR32 = 753,
	PS_WARR31 = 752,
	PS_WARR30 = 751,
	PS_WARR29 = 750,
	PS_WARR28 = 749,
	PS_WARR27 = 748,
	PS_WARR26 = 747,
	PS_WARR25 = 746,
	PS_WARR24 = 745,
	PS_WARR23 = 744,
	PS_WARR22 = 743,
	PS_WARR21 = 742,
	PS_WARR20 = 741,
	PS_WARR19 = 740,
	PS_WARR18 = 739,
	PS_WARR17 = 738,
	PS_WARR16C = 737,
	PS_WARR16B = 736,
	PS_WARR16 = 735,
	PS_WARR15C = 734,
	PS_WARR15B = 733,
	PS_WARR15 = 732,
	PS_WARR14C = 731,
	PS_WARR14B = 730,
	PS_WARR14 = 729,
	PS_WARR13 = 728,
	PS_WARR12 = 727,
	PS_WARR11 = 726,
	PS_WARR10 = 725,
	PS_WARR9 = 724,
	PS_WARR8 = 723,
	PS_WARR7 = 722,
	PS_WARR6 = 721,
	PS_WARR5 = 720,
	PS_WARR4 = 719,
	PS_WARR3 = 718,
	PS_WARR2 = 717,
	PS_WARR1 = 716,
	PS_RDEATH = 715,
	PS_ROGUE102 = 714,
	PS_ROGUE101 = 713,
	PS_ROGUE100 = 712,
	PS_ROGUE99 = 711,
	PS_ROGUE98 = 710,
	PS_ROGUE97 = 709,
	PS_ROGUE96 = 708,
	PS_ROGUE95 = 707,
	PS_ROGUE94 = 706,
	PS_ROGUE93 = 705,
	PS_ROGUE92 = 704,
	PS_ROGUE91 = 703,
	PS_ROGUE90 = 702,
	PS_ROGUE89 = 701,
	PS_ROGUE88 = 700,
	PS_ROGUE87 = 699,
	PS_ROGUE86 = 698,
	PS_ROGUE85 = 697,
	PS_ROGUE84 = 696,
	PS_ROGUE83 = 695,
	PS_ROGUE82 = 694,
	PS_ROGUE81 = 693,
	PS_ROGUE80 = 692,
	PS_ROGUE79 = 691,
	PS_ROGUE78 = 690,
	PS_ROGUE77 = 689,
	PS_ROGUE76 = 688,
	PS_ROGUE75 = 687,
	PS_ROGUE74 = 686,
	PS_ROGUE73 = 685,
	PS_ROGUE72 = 684,
	PS_ROGUE71 = 683,
	PS_ROGUE70 = 682,
	PS_ROGUE69B = 681,
	PS_ROGUE69 = 680,
	PS_ROGUE68 = 679,
	PS_ROGUE67 = 678,
	PS_ROGUE66 = 677,
	PS_ROGUE65 = 676,
	PS_ROGUE64 = 675,
	PS_ROGUE63 = 674,
	PS_ROGUE62 = 673,
	PS_ROGUE61 = 672,
	PS_ROGUE60 = 671,
	PS_ROGUE59 = 670,
	PS_ROGUE58 = 669,
	PS_ROGUE57 = 668,
	PS_ROGUE56 = 667,
	PS_ROGUE55 = 666,
	PS_ROGUE54 = 665,
	PS_ROGUE53 = 664,
	PS_ROGUE52 = 663,
	PS_ROGUE51 = 662,
	PS_ROGUE50 = 661,
	PS_ROGUE49 = 660,
	PS_ROGUE48 = 659,
	PS_ROGUE47 = 658,
	PS_ROGUE46 = 657,
	PS_ROGUE45 = 656,
	PS_ROGUE44 = 655,
	PS_ROGUE43 = 654,
	PS_ROGUE42 = 653,
	PS_ROGUE41 = 652,
	PS_ROGUE40 = 651,
	PS_ROGUE39 = 650,
	PS_ROGUE38 = 649,
	PS_ROGUE37 = 648,
	PS_ROGUE36 = 647,
	PS_ROGUE35 = 646,
	PS_ROGUE34 = 645,
	PS_ROGUE33 = 644,
	PS_ROGUE32 = 643,
	PS_ROGUE31 = 642,
	PS_ROGUE30 = 641,
	PS_ROGUE29 = 640,
	PS_ROGUE28 = 639,
	PS_ROGUE27 = 638,
	PS_ROGUE26 = 637,
	PS_ROGUE25 = 636,
	PS_ROGUE24 = 635,
	PS_ROGUE23 = 634,
	PS_ROGUE22 = 633,
	PS_ROGUE21 = 632,
	PS_ROGUE20 = 631,
	PS_ROGUE19 = 630,
	PS_ROGUE18 = 629,
	PS_ROGUE17 = 628,
	PS_ROGUE16 = 627,
	PS_ROGUE15 = 626,
	PS_ROGUE14 = 625,
	PS_ROGUE13 = 624,
	PS_ROGUE12 = 623,
	PS_ROGUE11 = 622,
	PS_ROGUE10 = 621,
	PS_ROGUE9 = 620,
	PS_ROGUE8 = 619,
	PS_ROGUE7 = 618,
	PS_ROGUE6 = 617,
	PS_ROGUE5 = 616,
	PS_ROGUE4 = 615,
	PS_ROGUE3 = 614,
	PS_ROGUE2 = 613,
	PS_ROGUE1 = 612,
	PS_SDEATH = 611,
	PS_MAGE102 = 610,
	PS_MAGE101 = 609,
	PS_MAGE100 = 608,
	PS_MAGE99 = 607,
	PS_MAGE98 = 606,
	PS_MAGE97 = 605,
	PS_MAGE96 = 604,
	PS_MAGE95 = 603,
	PS_MAGE94 = 602,
	PS_MAGE93 = 601,
	PS_MAGE92 = 600,
	PS_MAGE91 = 599,
	PS_MAGE90 = 598,
	PS_MAGE89 = 597,
	PS_MAGE88 = 596,
	PS_MAGE87 = 595,
	PS_MAGE86 = 594,
	PS_MAGE85 = 593,
	PS_MAGE84 = 592,
	PS_MAGE83 = 591,
	PS_MAGE82 = 590,
	PS_MAGE81 = 589,
	PS_MAGE80 = 588,
	PS_MAGE79 = 587,
	PS_MAGE78 = 586,
	PS_MAGE77 = 585,
	PS_MAGE76 = 584,
	PS_MAGE75 = 583,
	PS_MAGE74 = 582,
	PS_MAGE73 = 581,
	PS_MAGE72 = 580,
	PS_MAGE71 = 579,
	PS_MAGE70 = 578,
	PS_MAGE69B = 577,
	PS_MAGE69 = 576,
	PS_MAGE68 = 575,
	PS_MAGE67 = 574,
	PS_MAGE66 = 573,
	PS_MAGE65 = 572,
	PS_MAGE64 = 571,
	PS_MAGE63 = 570,
	PS_MAGE62 = 569,
	PS_MAGE61 = 568,
	PS_MAGE60 = 567,
	PS_MAGE59 = 566,
	PS_MAGE58 = 565,
	PS_MAGE57 = 564,
	PS_MAGE56 = 563,
	PS_MAGE55 = 562,
	PS_MAGE54 = 561,
	PS_MAGE53 = 560,
	PS_MAGE52 = 559,
	PS_MAGE51 = 558,
	PS_MAGE50 = 557,
	PS_MAGE49 = 556,
	PS_MAGE48 = 555,
	PS_MAGE47 = 554,
	PS_MAGE46 = 553,
	PS_MAGE45 = 552,
	PS_MAGE44 = 551,
	PS_MAGE43 = 550,
	PS_MAGE42 = 549,
	PS_MAGE41 = 548,
	PS_MAGE40 = 547,
	PS_MAGE39 = 546,
	PS_MAGE38 = 545,
	PS_MAGE37 = 544,
	PS_MAGE36 = 543,
	PS_MAGE35 = 542,
	PS_MAGE34 = 541,
	PS_MAGE33 = 540,
	PS_MAGE32 = 539,
	PS_MAGE31 = 538,
	PS_MAGE30 = 537,
	PS_MAGE29 = 536,
	PS_MAGE28 = 535,
	PS_MAGE27 = 534,
	PS_MAGE26 = 533,
	PS_MAGE25 = 532,
	PS_MAGE24 = 531,
	PS_MAGE23 = 530,
	PS_MAGE22 = 529,
	PS_MAGE21 = 528,
	PS_MAGE20 = 527,
	PS_MAGE19 = 526,
	PS_MAGE18 = 525,
	PS_MAGE17 = 524,
	PS_MAGE16 = 523,
	PS_MAGE15 = 522,
	PS_MAGE14 = 521,
	PS_MAGE13 = 520,
	PS_MAGE12 = 519,
	PS_MAGE11 = 518,
	PS_MAGE10 = 517,
	PS_MAGE9 = 516,
	PS_MAGE8 = 515,
	PS_MAGE7 = 514,
	PS_MAGE6 = 513,
	PS_MAGE5 = 512,
	PS_MAGE4 = 511,
	PS_MAGE3 = 510,
	PS_MAGE2 = 509,
	PS_MAGE1 = 508,
	TSFX_WOUND = 507,
	TSFX_WITCH50 = 506,
	TSFX_WITCH49 = 505,
	TSFX_WITCH48 = 504,
	TSFX_WITCH47 = 503,
	TSFX_WITCH46 = 502,
	TSFX_WITCH45 = 501,
	TSFX_WITCH44 = 500,
	TSFX_WITCH43 = 499,
	TSFX_WITCH42 = 498,
	TSFX_WITCH41 = 497,
	TSFX_WITCH40 = 496,
	TSFX_WITCH39 = 495,
	TSFX_WITCH38 = 494,
	TSFX_WITCH37 = 493,
	TSFX_WITCH36 = 492,
	TSFX_WITCH35 = 491,
	TSFX_WITCH34 = 490,
	TSFX_WITCH33 = 489,
	TSFX_WITCH32 = 488,
	TSFX_WITCH31 = 487,
	TSFX_WITCH30 = 486,
	TSFX_WITCH29 = 485,
	TSFX_WITCH28 = 484,
	TSFX_WITCH27 = 483,
	TSFX_WITCH26 = 482,
	TSFX_WITCH25 = 481,
	TSFX_WITCH24 = 480,
	TSFX_WITCH23 = 479,
	TSFX_WITCH22 = 478,
	TSFX_WITCH21 = 477,
	TSFX_WITCH20 = 476,
	TSFX_WITCH19 = 475,
	TSFX_WITCH18 = 474,
	TSFX_WITCH17 = 473,
	TSFX_WITCH16 = 472,
	TSFX_WITCH15 = 471,
	TSFX_WITCH14 = 470,
	TSFX_WITCH13 = 469,
	TSFX_WITCH12 = 468,
	TSFX_WITCH11 = 467,
	TSFX_WITCH10 = 466,
	TSFX_WITCH9 = 465,
	TSFX_WITCH8 = 464,
	TSFX_WITCH7 = 463,
	TSFX_WITCH6 = 462,
	TSFX_WITCH5 = 461,
	TSFX_WITCH4 = 460,
	TSFX_WITCH3 = 459,
	TSFX_WITCH2 = 458,
	TSFX_WITCH1 = 457,
	TSFX_TAVERN45 = 456,
	TSFX_TAVERN44 = 455,
	TSFX_TAVERN43 = 454,
	TSFX_TAVERN42 = 453,
	TSFX_TAVERN41 = 452,
	TSFX_TAVERN40 = 451,
	TSFX_TAVERN39 = 450,
	TSFX_TAVERN38 = 449,
	TSFX_TAVERN37 = 448,
	TSFX_TAVERN36 = 447,
	TSFX_TAVERN35 = 446,
	TSFX_TAVERN34 = 445,
	TSFX_TAVERN33 = 444,
	TSFX_TAVERN32 = 443,
	TSFX_TAVERN31 = 442,
	TSFX_TAVERN30 = 441,
	TSFX_TAVERN29 = 440,
	TSFX_TAVERN28 = 439,
	TSFX_TAVERN27 = 438,
	TSFX_TAVERN26 = 437,
	TSFX_TAVERN25 = 436,
	TSFX_TAVERN24 = 435,
	TSFX_TAVERN23 = 434,
	TSFX_TAVERN22 = 433,
	TSFX_TAVERN21 = 432,
	TSFX_TAVERN20 = 431,
	TSFX_TAVERN19 = 430,
	TSFX_TAVERN18 = 429,
	TSFX_TAVERN17 = 428,
	TSFX_TAVERN16 = 427,
	TSFX_TAVERN15 = 426,
	TSFX_TAVERN14 = 425,
	TSFX_TAVERN13 = 424,
	TSFX_TAVERN12 = 423,
	TSFX_TAVERN11 = 422,
	TSFX_TAVERN10 = 421,
	TSFX_TAVERN9 = 420,
	TSFX_TAVERN8 = 419,
	TSFX_TAVERN7 = 418,
	TSFX_TAVERN6 = 417,
	TSFX_TAVERN5 = 416,
	TSFX_TAVERN4 = 415,
	TSFX_TAVERN3 = 414,
	TSFX_TAVERN2 = 413,
	TSFX_TAVERN1 = 412,
	TSFX_TAVERN0 = 411,
	TSFX_STORY38 = 410,
	TSFX_STORY37 = 409,
	TSFX_STORY36 = 408,
	TSFX_STORY35 = 407,
	TSFX_STORY34 = 406,
	TSFX_STORY33 = 405,
	TSFX_STORY32 = 404,
	TSFX_STORY31 = 403,
	TSFX_STORY30 = 402,
	TSFX_STORY29 = 401,
	TSFX_STORY28 = 400,
	TSFX_STORY27 = 399,
	TSFX_STORY26 = 398,
	TSFX_STORY25 = 397,
	TSFX_STORY24 = 396,
	TSFX_STORY23 = 395,
	TSFX_STORY22 = 394,
	TSFX_STORY21 = 393,
	TSFX_STORY20 = 392,
	TSFX_STORY19 = 391,
	TSFX_STORY18 = 390,
	TSFX_STORY17 = 389,
	TSFX_STORY16 = 388,
	TSFX_STORY15 = 387,
	TSFX_STORY14 = 386,
	TSFX_STORY13 = 385,
	TSFX_STORY12 = 384,
	TSFX_STORY11 = 383,
	TSFX_STORY10 = 382,
	TSFX_STORY9 = 381,
	TSFX_STORY8 = 380,
	TSFX_STORY7 = 379,
	TSFX_STORY6 = 378,
	TSFX_STORY5 = 377,
	TSFX_STORY4 = 376,
	TSFX_STORY3 = 375,
	TSFX_STORY2 = 374,
	TSFX_STORY1 = 373,
	TSFX_STORY0 = 372,
	TSFX_PRIEST7 = 371,
	TSFX_PRIEST6 = 370,
	TSFX_PRIEST5 = 369,
	TSFX_PRIEST4 = 368,
	TSFX_PRIEST3 = 367,
	TSFX_PRIEST2 = 366,
	TSFX_PRIEST1 = 365,
	TSFX_PRIEST0 = 364,
	TSFX_PEGBOY43 = 363,
	TSFX_PEGBOY42 = 362,
	TSFX_PEGBOY41 = 361,
	TSFX_PEGBOY40 = 360,
	TSFX_PEGBOY39 = 359,
	TSFX_PEGBOY38 = 358,
	TSFX_PEGBOY37 = 357,
	TSFX_PEGBOY36 = 356,
	TSFX_PEGBOY35 = 355,
	TSFX_PEGBOY34 = 354,
	TSFX_PEGBOY33 = 353,
	TSFX_PEGBOY32 = 352,
	TSFX_PEGBOY31 = 351,
	TSFX_PEGBOY30 = 350,
	TSFX_PEGBOY29 = 349,
	TSFX_PEGBOY28 = 348,
	TSFX_PEGBOY27 = 347,
	TSFX_PEGBOY26 = 346,
	TSFX_PEGBOY25 = 345,
	TSFX_PEGBOY24 = 344,
	TSFX_PEGBOY23 = 343,
	TSFX_PEGBOY22 = 342,
	TSFX_PEGBOY21 = 341,
	TSFX_PEGBOY20 = 340,
	TSFX_PEGBOY19 = 339,
	TSFX_PEGBOY18 = 338,
	TSFX_PEGBOY17 = 337,
	TSFX_PEGBOY16 = 336,
	TSFX_PEGBOY15 = 335,
	TSFX_PEGBOY14 = 334,
	TSFX_PEGBOY13 = 333,
	TSFX_PEGBOY12 = 332,
	TSFX_PEGBOY11 = 331,
	TSFX_PEGBOY10 = 330,
	TSFX_PEGBOY9 = 329,
	TSFX_PEGBOY8 = 328,
	TSFX_PEGBOY7 = 327,
	TSFX_PEGBOY6 = 326,
	TSFX_PEGBOY5 = 325,
	TSFX_PEGBOY4 = 324,
	TSFX_PEGBOY3 = 323,
	TSFX_PEGBOY2 = 322,
	TSFX_PEGBOY1 = 321,
	TSFX_HEALER47 = 320,
	TSFX_HEALER46 = 319,
	TSFX_HEALER45 = 318,
	TSFX_HEALER44 = 317,
	TSFX_HEALER43 = 316,
	TSFX_HEALER42 = 315,
	TSFX_HEALER41 = 314,
	TSFX_HEALER40 = 313,
	TSFX_HEALER39 = 312,
	TSFX_HEALER38 = 311,
	TSFX_HEALER37 = 310,
	TSFX_HEALER36 = 309,
	TSFX_HEALER35 = 308,
	TSFX_HEALER34 = 307,
	TSFX_HEALER33 = 306,
	TSFX_HEALER32 = 305,
	TSFX_HEALER31 = 304,
	TSFX_HEALER30 = 303,
	TSFX_HEALER29 = 302,
	TSFX_HEALER28 = 301,
	TSFX_HEALER27 = 300,
	TSFX_HEALER26 = 299,
	TSFX_HEALER25 = 298,
	TSFX_HEALER24 = 297,
	TSFX_HEALER23 = 296,
	TSFX_HEALER22 = 295,
	TSFX_HEALER21 = 294,
	TSFX_HEALER20 = 293,
	TSFX_HEALER19 = 292,
	TSFX_HEALER18 = 291,
	TSFX_HEALER17 = 290,
	TSFX_HEALER16 = 289,
	TSFX_HEALER15 = 288,
	TSFX_HEALER14 = 287,
	TSFX_HEALER13 = 286,
	TSFX_HEALER12 = 285,
	TSFX_HEALER11 = 284,
	TSFX_HEALER10 = 283,
	TSFX_HEALER9 = 282,
	TSFX_HEALER8 = 281,
	TSFX_HEALER7 = 280,
	TSFX_HEALER6 = 279,
	TSFX_HEALER5 = 278,
	TSFX_HEALER4 = 277,
	TSFX_HEALER3 = 276,
	TSFX_HEALER2 = 275,
	TSFX_HEALER1 = 274,
	TSFX_DRUNK35 = 273,
	TSFX_DRUNK34 = 272,
	TSFX_DRUNK33 = 271,
	TSFX_DRUNK32 = 270,
	TSFX_DRUNK31 = 269,
	TSFX_DRUNK30 = 268,
	TSFX_DRUNK29 = 267,
	TSFX_DRUNK28 = 266,
	TSFX_DRUNK27 = 265,
	TSFX_DRUNK26 = 264,
	TSFX_DRUNK25 = 263,
	TSFX_DRUNK24 = 262,
	TSFX_DRUNK23 = 261,
	TSFX_DRUNK22 = 260,
	TSFX_DRUNK21 = 259,
	TSFX_DRUNK20 = 258,
	TSFX_DRUNK19 = 257,
	TSFX_DRUNK18 = 256,
	TSFX_DRUNK17 = 255,
	TSFX_DRUNK16 = 254,
	TSFX_DRUNK15 = 253,
	TSFX_DRUNK14 = 252,
	TSFX_DRUNK13 = 251,
	TSFX_DRUNK12 = 250,
	TSFX_DRUNK11 = 249,
	TSFX_DRUNK10 = 248,
	TSFX_DRUNK9 = 247,
	TSFX_DRUNK8 = 246,
	TSFX_DRUNK7 = 245,
	TSFX_DRUNK6 = 244,
	TSFX_DRUNK5 = 243,
	TSFX_DRUNK4 = 242,
	TSFX_DRUNK3 = 241,
	TSFX_DRUNK2 = 240,
	TSFX_DRUNK1 = 239,
	TSFX_DEADGUY = 238,
	TSFX_COW8 = 237,
	TSFX_COW7 = 236,
	TSFX_COW6 = 235,
	TSFX_COW5 = 234,
	TSFX_COW4 = 233,
	TSFX_COW3 = 232,
	TSFX_WINDBLOW = 231,
	TSFX_TREEBLOW = 230,
	TSFX_TAVERN = 229,
	TSFX_STREAM = 228,
	TSFX_OWLECHO = 227,
	TSFX_MICE = 226,
	TSFX_CRICKET2 = 225,
	TSFX_CRICKET1 = 224,
	TSFX_BIRDS2 = 223,
	TSFX_BIRDS1 = 222,
	TSFX_BIRDCHR2 = 221,
	TSFX_BIRDCHR1 = 220,
	TSFX_BATS = 219,
	TSFX_COW2 = 218,
	TSFX_COW1 = 217,
	TSFX_SMITH56 = 216,
	TSFX_SMITH55 = 215,
	TSFX_SMITH54 = 214,
	TSFX_SMITH53 = 213,
	TSFX_SMITH52 = 212,
	TSFX_SMITH51 = 211,
	TSFX_SMITH50 = 210,
	TSFX_SMITH49 = 209,
	TSFX_SMITH48 = 208,
	TSFX_SMITH47 = 207,
	TSFX_SMITH46 = 206,
	TSFX_SMITH45 = 205,
	TSFX_SMITH44 = 204,
	TSFX_SMITH43 = 203,
	TSFX_SMITH42 = 202,
	TSFX_SMITH41 = 201,
	TSFX_SMITH40 = 200,
	TSFX_SMITH39 = 199,
	TSFX_SMITH38 = 198,
	TSFX_SMITH37 = 197,
	TSFX_SMITH36 = 196,
	TSFX_SMITH35 = 195,
	TSFX_SMITH34 = 194,
	TSFX_SMITH33 = 193,
	TSFX_SMITH32 = 192,
	TSFX_SMITH31 = 191,
	TSFX_SMITH30 = 190,
	TSFX_SMITH29 = 189,
	TSFX_SMITH28 = 188,
	TSFX_SMITH27 = 187,
	TSFX_SMITH26 = 186,
	TSFX_SMITH25 = 185,
	TSFX_SMITH24 = 184,
	TSFX_SMITH23 = 183,
	TSFX_SMITH22 = 182,
	TSFX_SMITH21 = 181,
	TSFX_SMITH20 = 180,
	TSFX_SMITH19 = 179,
	TSFX_SMITH18 = 178,
	TSFX_SMITH17 = 177,
	TSFX_SMITH16 = 176,
	TSFX_SMITH15 = 175,
	TSFX_SMITH14 = 174,
	TSFX_SMITH13 = 173,
	TSFX_SMITH12 = 172,
	TSFX_SMITH11 = 171,
	TSFX_SMITH10 = 170,
	TSFX_SMITH9 = 169,
	TSFX_SMITH8 = 168,
	TSFX_SMITH7 = 167,
	TSFX_SMITH6 = 166,
	TSFX_SMITH5 = 165,
	TSFX_SMITH4 = 164,
	TSFX_SMITH3 = 163,
	TSFX_SMITH2 = 162,
	TSFX_SMITH1 = 161,
	TSFX_BMAID40 = 160,
	TSFX_BMAID39 = 159,
	TSFX_BMAID38 = 158,
	TSFX_BMAID37 = 157,
	TSFX_BMAID36 = 156,
	TSFX_BMAID35 = 155,
	TSFX_BMAID34 = 154,
	TSFX_BMAID33 = 153,
	TSFX_BMAID32 = 152,
	TSFX_BMAID31 = 151,
	TSFX_BMAID30 = 150,
	TSFX_BMAID29 = 149,
	TSFX_BMAID28 = 148,
	TSFX_BMAID27 = 147,
	TSFX_BMAID26 = 146,
	TSFX_BMAID25 = 145,
	TSFX_BMAID24 = 144,
	TSFX_BMAID23 = 143,
	TSFX_BMAID22 = 142,
	TSFX_BMAID21 = 141,
	TSFX_BMAID20 = 140,
	TSFX_BMAID19 = 139,
	TSFX_BMAID18 = 138,
	TSFX_BMAID17 = 137,
	TSFX_BMAID16 = 136,
	TSFX_BMAID15 = 135,
	TSFX_BMAID14 = 134,
	TSFX_BMAID13 = 133,
	TSFX_BMAID12 = 132,
	TSFX_BMAID11 = 131,
	TSFX_BMAID10 = 130,
	TSFX_BMAID9 = 129,
	TSFX_BMAID8 = 128,
	TSFX_BMAID7 = 127,
	TSFX_BMAID6 = 126,
	TSFX_BMAID5 = 125,
	TSFX_BMAID4 = 124,
	TSFX_BMAID3 = 123,
	TSFX_BMAID2 = 122,
	TSFX_BMAID1 = 121,
	LS_WALLSTRT = 120,
	LS_WALLLOOP = 119,
	LS_VTHEFT = 118,
	LS_TELEPORT = 117,
	LS_TRAPDIS = 116,
	LS_STORM = 115,
	LS_SPOUTSTR = 114,
	LS_SPOUTLOP = 113,
	LS_SOULFIRE = 112,
	LS_SHATTER = 111,
	LS_SENTINEL = 110,
	LS_SCURIMP = 109,
	LS_SCURSE = 108,
	LS_RESUR = 107,
	LS_PUDDLE = 106,
	LS_PORTAL = 105,
	LS_NOVA = 104,
	LS_MSHIELD = 103,
	LS_LTNING = 102,
	LS_LNING1 = 101,
	LS_INVPOT = 100,
	LS_INVISIBL = 99,
	LS_INFRAVIS = 98,
	LS_HYPER = 97,
	LS_HOLYBOLT = 96,
	LS_GUARDLAN = 95,
	LS_GUARD = 94,
	LS_GSHRINE = 93,
	LS_GOLUMDED = 92,
	LS_GOLUM = 91,
	LS_FOUNTAIN = 90,
	LS_FLASH = 89,
	LS_FLAMWAVE = 88,
	LS_FIRIMP2 = 87,
	LS_FIRIMP1 = 86,
	LS_FBOLT2 = 85,
	LS_FBOLT1 = 84,
	LS_FBALL = 83,
	LS_ETHEREAL = 82,
	LS_ELEMENTL = 81,
	LS_ELECIMP1 = 80,
	LS_DSERP = 79,
	LS_CHLTNING = 78,
	LS_CBOLT = 77,
	LS_CALDRON = 76,
	LS_BSIMPCT = 75,
	LS_BONESP = 74,
	LS_BLSIMPT = 73,
	LS_BLODSTAR = 72,
	LS_BLODBOIL = 71,
	LS_ARROWALL = 70,
	LS_APOC = 69,
	LS_ACIDS = 68,
	LS_ACID = 67,
	IS_REPAIR = 66,
	LS_HEALING = 65,
	IS_CAST9 = 64,
	IS_CAST8 = 63,
	IS_CAST7 = 62,
	IS_CAST6 = 61,
	IS_CAST5 = 60,
	IS_CAST4 = 59,
	IS_CAST3 = 58,
	IS_CAST2 = 57,
	IS_CAST12 = 56,
	IS_CAST10 = 55,
	IS_CAST1 = 54,
	IS_TRAP = 53,
	SFX_SILENCE = 52,
	IS_TITLSLCT = 51,
	IS_TITLEMOV = 50,
	IS_SWRDFKD = 49,
	IS_SHLDFKD = 48,
	IS_SARC = 47,
	IS_RBOOK = 46,
	IS_MAGIC1 = 45,
	IS_MAGIC = 44,
	IS_LEVER = 43,
	IS_ISWORD = 42,
	IS_ISTAF = 41,
	IS_ISIGN = 40,
	IS_ISHIEL = 39,
	IS_ISCROL = 38,
	IS_IROCK = 37,
	IS_IRING = 36,
	IS_IPOT = 35,
	IS_IMUSH = 34,
	IS_ILARM = 33,
	IS_IHARM = 32,
	IS_IGRAB = 31,
	IS_ICAP = 30,
	IS_IBOW = 29,
	IS_IBOOK = 28,
	IS_IBODY = 27,
	IS_IBLST = 26,
	IS_IAXE = 25,
	IS_IANVL = 24,
	IS_HLMTFKD = 23,
	IS_GOLD = 22,
	IS_FLIP = 21,
	IS_DOOROPEN = 20,
	IS_DOORCLOS = 19,
	IS_CHEST = 18,
	IS_BHIT1 = 17,
	IS_BHIT = 16,
	IS_BARREL = 15,
	IS_BARLFIRE = 14,
	IS_ARMRFKD = 13,
	IS_QUESTDN = 12,
	PS_DEAD = 11,
	PS_SWING2 = 10,
	PS_SWING = 9,
	PS_LGHIT1 = 8,
	PS_LGHIT = 7,
	PS_TMAG = 6,
	PS_FMAG = 5,
	PS_BFIRE = 4,
	PS_WALK4 = 3,
	PS_WALK3 = 2,
	PS_WALK2 = 1,
	PS_WALK1 = 0,
};

enum _146fake // Hashcode: 0xBB6F7A5F (dec: -1150322081)
{
	BUFFER_PROCESS = 2,
	BUFFER_ON = 1,
	BUFFER_OFF = 0,
};

enum _224fake // Hashcode: 0xAC5720E1 (dec: -1403576095)
{
	BIRD_HOP = 4,
	BIRD_LANDING = 3,
	BIRD_SCATTER = 2,
	BIRD_FLY = 1,
	BIRD_PERCH = 0,
};

enum _ui_classes // Hashcode: 0xB08CB9B0 (dec: -1332954704)
{
	UI_NUM_CLASSES = 3,
	UI_SORCERER = 2,
	UI_ROGUE = 1,
	UI_WARRIOR = 0,
};

enum _copyprot_results // Hashcode: 0x9A430152 (dec: -1706884782)
{
	COPYPROT_CANCEL = 2,
	COPYPROT_OK = 1,
};

enum _mainmenu_selections // Hashcode: 0x14BFB2AD (dec: 348107437)
{
	MAINMENU_ATTRACT_MODE = 6,
	MAINMENU_EXIT_DIABLO = 5,
	MAINMENU_SHOW_CREDITS = 4,
	MAINMENU_REPLAY_INTRO = 3,
	MAINMENU_MULTIPLAYER = 2,
	MAINMENU_SINGLE_PLAYER = 1,
};

enum _difficulty // Hashcode: 0x8E357FE4 (dec: -1909096476)
{
	NUM_DIFFICULTIES = 3,
	DIFF_HELL = 2,
	DIFF_NIGHTMARE = 1,
	DIFF_NORMAL = 0,
};

enum _selhero_selections // Hashcode: 0xE31DD556 (dec: -484584106)
{
	SELHERO_PREVIOUS = 4,
	SELHERO_CONNECT = 3,
	SELHERO_CONTINUE = 2,
	SELHERO_NEW_DUNGEON = 1,
};

enum _dialmodes // Hashcode: 0x9920E2E0 (dec: -1725898016)
{
	MODE_DIALNEW = 5,
	MODE_DIALOLD = 4,
	MODE_ANSWER = 3,
};

enum _227fake // Hashcode: 0x7C203DF8 (dec: 2082487800)
{
	HELP_MAINHEADER = 4,
	HELP_HEADER = 3,
	HELP_TXT = 2,
	HELP_CONTROLS = 1,
	HELP_TITLE = 0,
};

enum _234fake // Hashcode: 0xBB10E6F0 (dec: -1156520208)
{
	PART_TRANS_RIGHT = 2,
	PART_TRANS_LEFT = 1,
	PART_TRANS_NONE = 0,
};

enum _235fake // Hashcode: 0xF97B48E8 (dec: -109360920)
{
	PLAYER_RIGHT_SIDE = 2,
	PLAYER_LEFT_SIDE = 1,
};

enum _236fake // Hashcode: 0x29D06380 (dec: 701522816)
{
	GAL_PHANTOM_MEM = 0,
	GAL_FIRST_FREE_MEM_TYPE = 1,
	GAL_HIGH = 32768,
	GAL_FLAGS = 32768,
};
/* End enums */

/* Begin structs */

struct _physadr // hashcode: 0xD78033E0 (dec: -679463968)
{
	int r[1]; // size=4, offset=0
};

struct label_t // hashcode: 0x82C1F642 (dec: -2101217726)
{
	int val[12]; // size=48, offset=0
};

struct _quad // hashcode: 0x10B8590E (dec: 280516878)
{
	long val[2]; // size=8, offset=0
};

struct MonstList // hashcode: 0xC335B0B7 (dec: -1019891529)
{
	unsigned short NumOfMonsters; // size=0, offset=0
	unsigned short TexNum; // size=0, offset=2
	unsigned char *TheList; // size=0, offset=4
	char *ListName; // size=0, offset=8
	unsigned long QuestBits; // size=0, offset=12
};

struct MonstLevel // hashcode: 0x71BEEF24 (dec: 1908338468)
{
	int NumOfLists; // size=0, offset=0
	struct MonstList *TheLists; // size=16, offset=4
};

struct ToT // hashcode: 0x23A4FA8D (dec: 598014605)
{
	unsigned long *head; // size=0, offset=0
	long size; // size=0, offset=4
};

struct TCBH // hashcode: 0x3B059B7E (dec: 990223230)
{
	struct TCB *entry; // size=0, offset=0
	long flag; // size=0, offset=4
};

struct TCB // hashcode: 0xFF3B7CCF (dec: -12878641)
{
	long status; // size=0, offset=0
	long mode; // size=0, offset=4
	unsigned long reg[40]; // size=160, offset=8
	long system[6]; // size=24, offset=168
};

struct EvCB // hashcode: 0x78AA5219 (dec: 2024428057)
{
	unsigned long desc; // size=0, offset=0
	long status; // size=0, offset=4
	long spec; // size=0, offset=8
	long mode; // size=0, offset=12
	long (*FHandler)(); // size=0, offset=16
	long system[2]; // size=8, offset=20
};

struct EXEC // hashcode: 0x889AFD77 (dec: -2003108489)
{
	unsigned long pc0; // size=0, offset=0
	unsigned long gp0; // size=0, offset=4
	unsigned long t_addr; // size=0, offset=8
	unsigned long t_size; // size=0, offset=12
	unsigned long d_addr; // size=0, offset=16
	unsigned long d_size; // size=0, offset=20
	unsigned long b_addr; // size=0, offset=24
	unsigned long b_size; // size=0, offset=28
	unsigned long s_addr; // size=0, offset=32
	unsigned long s_size; // size=0, offset=36
	unsigned long sp; // size=0, offset=40
	unsigned long fp; // size=0, offset=44
	unsigned long gp; // size=0, offset=48
	unsigned long ret; // size=0, offset=52
	unsigned long base; // size=0, offset=56
};

struct XF_HDR // hashcode: 0xE61C9F7D (dec: -434331779)
{
	char key[8]; // size=8, offset=0
	unsigned long text; // size=0, offset=8
	unsigned long data; // size=0, offset=12
	struct EXEC exec; // size=60, offset=16
	char title[60]; // size=60, offset=76
};

struct DIRENTRY // hashcode: 0x16036308 (dec: 369320712)
{
	char name[20]; // size=20, offset=0
	long attr; // size=0, offset=20
	long size; // size=0, offset=24
	struct DIRENTRY *next; // size=40, offset=28
	long head; // size=0, offset=32
	char system[4]; // size=4, offset=36
};

struct MATRIX // hashcode: 0x7CD50D5E (dec: 2094337374)
{
	short m[3][3]; // size=18, offset=0
	long t[3]; // size=12, offset=20
};

struct VECTOR // hashcode: 0xD868289D (dec: -664262499)
{
	long vx; // size=0, offset=0
	long vy; // size=0, offset=4
	long vz; // size=0, offset=8
	long pad; // size=0, offset=12
};

struct SVECTOR // hashcode: 0x855F37AD (dec: -2057357395)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
	short vz; // size=0, offset=4
	short pad; // size=0, offset=6
};

struct CVECTOR // hashcode: 0xFB62BF9F (dec: -77414497)
{
	unsigned char r; // size=0, offset=0
	unsigned char g; // size=0, offset=1
	unsigned char b; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
};

struct DVECTOR // hashcode: 0xC74AE6FB (dec: -951392517)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
};

struct EVECTOR // hashcode: 0x2CF4696F (dec: 754215279)
{
	struct SVECTOR v; // size=8, offset=0
	struct VECTOR sxyz; // size=16, offset=8
	struct DVECTOR sxy; // size=4, offset=24
	struct CVECTOR rgb; // size=4, offset=28
	short txuv; // size=0, offset=32
	short pad; // size=0, offset=34
	long chx; // size=0, offset=36
	long chy; // size=0, offset=40
};

struct RVECTOR // hashcode: 0xC9456BA2 (dec: -918197342)
{
	struct SVECTOR v; // size=8, offset=0
	unsigned char uv[2]; // size=2, offset=8
	unsigned short pad; // size=0, offset=10
	struct CVECTOR c; // size=4, offset=12
	struct DVECTOR sxy; // size=4, offset=16
	unsigned long sz; // size=0, offset=20
};

struct CRVECTOR3 // hashcode: 0xF28DC8A3 (dec: -225589085)
{
	struct RVECTOR r01; // size=24, offset=0
	struct RVECTOR r12; // size=24, offset=24
	struct RVECTOR r20; // size=24, offset=48
	struct RVECTOR *r0; // size=24, offset=72
	struct RVECTOR *r1; // size=24, offset=76
	struct RVECTOR *r2; // size=24, offset=80
	unsigned long *rtn; // size=0, offset=84
};

struct DIVPOLYGON3 // hashcode: 0x3D343F99 (dec: 1026834329)
{
	unsigned long ndiv; // size=0, offset=0
	unsigned long pih; // size=0, offset=4
	unsigned long piv; // size=0, offset=8
	unsigned short clut; // size=0, offset=12
	unsigned short tpage; // size=0, offset=14
	struct CVECTOR rgbc; // size=4, offset=16
	unsigned long *ot; // size=0, offset=20
	struct RVECTOR r0; // size=24, offset=24
	struct RVECTOR r1; // size=24, offset=48
	struct RVECTOR r2; // size=24, offset=72
	struct CRVECTOR3 cr[5]; // size=440, offset=96
};

struct CRVECTOR4 // hashcode: 0x659D3ED0 (dec: 1704804048)
{
	struct RVECTOR r01; // size=24, offset=0
	struct RVECTOR r02; // size=24, offset=24
	struct RVECTOR r31; // size=24, offset=48
	struct RVECTOR r32; // size=24, offset=72
	struct RVECTOR rc; // size=24, offset=96
	struct RVECTOR *r0; // size=24, offset=120
	struct RVECTOR *r1; // size=24, offset=124
	struct RVECTOR *r2; // size=24, offset=128
	struct RVECTOR *r3; // size=24, offset=132
	unsigned long *rtn; // size=0, offset=136
};

struct DIVPOLYGON4 // hashcode: 0x640EF9E0 (dec: 1678703072)
{
	unsigned long ndiv; // size=0, offset=0
	unsigned long pih; // size=0, offset=4
	unsigned long piv; // size=0, offset=8
	unsigned short clut; // size=0, offset=12
	unsigned short tpage; // size=0, offset=14
	struct CVECTOR rgbc; // size=4, offset=16
	unsigned long *ot; // size=0, offset=20
	struct RVECTOR r0; // size=24, offset=24
	struct RVECTOR r1; // size=24, offset=48
	struct RVECTOR r2; // size=24, offset=72
	struct RVECTOR r3; // size=24, offset=96
	struct CRVECTOR4 cr[5]; // size=700, offset=120
};

struct SPOL // hashcode: 0x418AE32A (dec: 1099621162)
{
	short xy[3]; // size=6, offset=0
	short uv[2]; // size=4, offset=6
	short rgb[3]; // size=6, offset=10
};

struct POL4 // hashcode: 0xEAC031FA (dec: -356503046)
{
	short sxy[4][2]; // size=16, offset=0
	short sz[4][2]; // size=16, offset=16
	short uv[4][2]; // size=16, offset=32
	short rgb[4][3]; // size=24, offset=48
	short code; // size=0, offset=72
};

struct POL3 // hashcode: 0x5A4C4DEC (dec: 1514950124)
{
	short sxy[3][2]; // size=12, offset=0
	short sz[3][2]; // size=12, offset=12
	short uv[3][2]; // size=12, offset=24
	short rgb[3][3]; // size=18, offset=36
	short code; // size=0, offset=54
};

struct TMESH // hashcode: 0x4ED4C391 (dec: 1322566545)
{
	struct SVECTOR *v; // size=8, offset=0
	struct SVECTOR *n; // size=8, offset=4
	struct SVECTOR *u; // size=8, offset=8
	struct CVECTOR *c; // size=4, offset=12
	unsigned long len; // size=0, offset=16
};

struct QMESH // hashcode: 0x86054219 (dec: -2046475751)
{
	struct SVECTOR *v; // size=8, offset=0
	struct SVECTOR *n; // size=8, offset=4
	struct SVECTOR *u; // size=8, offset=8
	struct CVECTOR *c; // size=4, offset=12
	unsigned long lenv; // size=0, offset=16
	unsigned long lenh; // size=0, offset=20
};

struct RECT // hashcode: 0x96356B79 (dec: -1774883975)
{
	short x; // size=0, offset=0
	short y; // size=0, offset=2
	short w; // size=0, offset=4
	short h; // size=0, offset=6
};

struct RECT32 // hashcode: 0x66B7AFBC (dec: 1723314108)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int w; // size=0, offset=8
	int h; // size=0, offset=12
};

struct DR_ENV // hashcode: 0x8781F091 (dec: -2021527407)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[15]; // size=60, offset=4
};

struct DRAWENV // hashcode: 0xCC2EA12C (dec: -869359316)
{
	struct RECT clip; // size=8, offset=0
	short ofs[2]; // size=4, offset=8
	struct RECT tw; // size=8, offset=12
	unsigned short tpage; // size=0, offset=20
	unsigned char dtd; // size=0, offset=22
	unsigned char dfe; // size=0, offset=23
	unsigned char isbg; // size=0, offset=24
	unsigned char r0; // size=0, offset=25
	unsigned char g0; // size=0, offset=26
	unsigned char b0; // size=0, offset=27
	struct DR_ENV dr_env; // size=64, offset=28
};

struct DISPENV // hashcode: 0x5724C591 (dec: 1462027665)
{
	struct RECT disp; // size=8, offset=0
	struct RECT screen; // size=8, offset=8
	unsigned char isinter; // size=0, offset=16
	unsigned char isrgb24; // size=0, offset=17
	unsigned char pad0; // size=0, offset=18
	unsigned char pad1; // size=0, offset=19
};

struct P_TAG // hashcode: 0x0C104441 (dec: 202392641)
{
	unsigned int addr; // size=24, offset=0
	unsigned int len; // size=8, offset=24
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
};

struct P_CODE // hashcode: 0x3B06C2E1 (dec: 990298849)
{
	unsigned char r0; // size=0, offset=0
	unsigned char g0; // size=0, offset=1
	unsigned char b0; // size=0, offset=2
	unsigned char code; // size=0, offset=3
};

struct POLY_F3 // hashcode: 0xE4D73FDB (dec: -455655461)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
};

struct POLY_F4 // hashcode: 0x5C302D27 (dec: 1546661159)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
	short x3; // size=0, offset=20
	short y3; // size=0, offset=22
};

struct POLY_FT3 // hashcode: 0x75749911 (dec: 1970575633)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char u1; // size=0, offset=20
	unsigned char v1; // size=0, offset=21
	unsigned short tpage; // size=0, offset=22
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char u2; // size=0, offset=28
	unsigned char v2; // size=0, offset=29
	unsigned short pad1; // size=0, offset=30
};

struct POLY_FT4 // hashcode: 0x7DFCFC1A (dec: 2113731610)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char u1; // size=0, offset=20
	unsigned char v1; // size=0, offset=21
	unsigned short tpage; // size=0, offset=22
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char u2; // size=0, offset=28
	unsigned char v2; // size=0, offset=29
	unsigned short pad1; // size=0, offset=30
	short x3; // size=0, offset=32
	short y3; // size=0, offset=34
	unsigned char u3; // size=0, offset=36
	unsigned char v3; // size=0, offset=37
	unsigned short pad2; // size=0, offset=38
};

struct POLY_G3 // hashcode: 0x624F50DA (dec: 1649365210)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char pad1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char pad2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
};

struct POLY_G4 // hashcode: 0xBE4FE1BD (dec: -1102061123)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char pad1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char pad2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char r3; // size=0, offset=28
	unsigned char g3; // size=0, offset=29
	unsigned char b3; // size=0, offset=30
	unsigned char pad3; // size=0, offset=31
	short x3; // size=0, offset=32
	short y3; // size=0, offset=34
};

struct POLY_GT3 // hashcode: 0x3E03F3ED (dec: 1040446445)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	unsigned char r1; // size=0, offset=16
	unsigned char g1; // size=0, offset=17
	unsigned char b1; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	short x1; // size=0, offset=20
	short y1; // size=0, offset=22
	unsigned char u1; // size=0, offset=24
	unsigned char v1; // size=0, offset=25
	unsigned short tpage; // size=0, offset=26
	unsigned char r2; // size=0, offset=28
	unsigned char g2; // size=0, offset=29
	unsigned char b2; // size=0, offset=30
	unsigned char p2; // size=0, offset=31
	short x2; // size=0, offset=32
	short y2; // size=0, offset=34
	unsigned char u2; // size=0, offset=36
	unsigned char v2; // size=0, offset=37
	unsigned short pad2; // size=0, offset=38
};

struct POLY_GT4 // hashcode: 0x26667EA8 (dec: 644251304)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	unsigned char r1; // size=0, offset=16
	unsigned char g1; // size=0, offset=17
	unsigned char b1; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	short x1; // size=0, offset=20
	short y1; // size=0, offset=22
	unsigned char u1; // size=0, offset=24
	unsigned char v1; // size=0, offset=25
	unsigned short tpage; // size=0, offset=26
	unsigned char r2; // size=0, offset=28
	unsigned char g2; // size=0, offset=29
	unsigned char b2; // size=0, offset=30
	unsigned char p2; // size=0, offset=31
	short x2; // size=0, offset=32
	short y2; // size=0, offset=34
	unsigned char u2; // size=0, offset=36
	unsigned char v2; // size=0, offset=37
	unsigned short pad2; // size=0, offset=38
	unsigned char r3; // size=0, offset=40
	unsigned char g3; // size=0, offset=41
	unsigned char b3; // size=0, offset=42
	unsigned char p3; // size=0, offset=43
	short x3; // size=0, offset=44
	short y3; // size=0, offset=46
	unsigned char u3; // size=0, offset=48
	unsigned char v3; // size=0, offset=49
	unsigned short pad3; // size=0, offset=50
};

struct LINE_F2 // hashcode: 0x42F8284D (dec: 1123559501)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
};

struct LINE_G2 // hashcode: 0x0AE659E2 (dec: 182868450)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char p1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
};

struct LINE_F3 // hashcode: 0xA15D8085 (dec: -1587707771)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
	unsigned long pad; // size=0, offset=20
};

struct LINE_G3 // hashcode: 0xF55697E5 (dec: -178874395)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char p1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned long pad; // size=0, offset=28
};

struct LINE_F4 // hashcode: 0xFCE625F0 (dec: -52025872)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
	short x3; // size=0, offset=20
	short y3; // size=0, offset=22
	unsigned long pad; // size=0, offset=24
};

struct LINE_G4 // hashcode: 0x26668F9B (dec: 644255643)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char p1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char r3; // size=0, offset=28
	unsigned char g3; // size=0, offset=29
	unsigned char b3; // size=0, offset=30
	unsigned char p3; // size=0, offset=31
	short x3; // size=0, offset=32
	short y3; // size=0, offset=34
	unsigned long pad; // size=0, offset=36
};

struct SPRT // hashcode: 0x9980C842 (dec: -1719613374)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	short w; // size=0, offset=16
	short h; // size=0, offset=18
};

struct SPRT_16 // hashcode: 0x688EF174 (dec: 1754198388)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
};

struct TILE // hashcode: 0xF4B442E8 (dec: -189512984)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short w; // size=0, offset=12
	short h; // size=0, offset=14
};

struct TILE_16 // hashcode: 0x150E93F0 (dec: 353276912)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
};

struct DR_MODE // hashcode: 0xDD3AD3C4 (dec: -583347260)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[2]; // size=8, offset=4
};

struct DR_MOVE // hashcode: 0x89F4C0DF (dec: -1980448545)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[5]; // size=20, offset=4
};

struct DR_LOAD // hashcode: 0x6462EFE1 (dec: 1684205537)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[3]; // size=12, offset=4
	unsigned long p[13]; // size=52, offset=16
};

struct DR_TPAGE // hashcode: 0xB77E52DD (dec: -1216458019)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[1]; // size=4, offset=4
};

struct TMD_PRIM // hashcode: 0x2B468274 (dec: 726041204)
{
	unsigned long id; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char p0; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char p1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char p2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char p3; // size=0, offset=19
	unsigned short tpage; // size=0, offset=20
	unsigned short clut; // size=0, offset=22
	unsigned char u0; // size=0, offset=24
	unsigned char v0; // size=0, offset=25
	unsigned char u1; // size=0, offset=26
	unsigned char v1; // size=0, offset=27
	unsigned char u2; // size=0, offset=28
	unsigned char v2; // size=0, offset=29
	unsigned char u3; // size=0, offset=30
	unsigned char v3; // size=0, offset=31
	struct SVECTOR x0; // size=8, offset=32
	struct SVECTOR x1; // size=8, offset=40
	struct SVECTOR x2; // size=8, offset=48
	struct SVECTOR x3; // size=8, offset=56
	struct SVECTOR n0; // size=8, offset=64
	struct SVECTOR n1; // size=8, offset=72
	struct SVECTOR n2; // size=8, offset=80
	struct SVECTOR n3; // size=8, offset=88
	struct SVECTOR *v_ofs; // size=8, offset=96
	struct SVECTOR *n_ofs; // size=8, offset=100
	unsigned short vert0; // size=0, offset=104
	unsigned short vert1; // size=0, offset=106
	unsigned short vert2; // size=0, offset=108
	unsigned short vert3; // size=0, offset=110
	unsigned short norm0; // size=0, offset=112
	unsigned short norm1; // size=0, offset=114
	unsigned short norm2; // size=0, offset=116
	unsigned short norm3; // size=0, offset=118
};

struct TIM_IMAGE // hashcode: 0x16210A5C (dec: 371264092)
{
	unsigned long mode; // size=0, offset=0
	struct RECT *crect; // size=8, offset=4
	unsigned long *caddr; // size=0, offset=8
	struct RECT *prect; // size=8, offset=12
	unsigned long *paddr; // size=0, offset=16
};

struct POINT // hashcode: 0x90A8DB05 (dec: -1867982075)
{
	long x; // size=0, offset=0
	long y; // size=0, offset=4
};

struct MSG // hashcode: 0x0D6A3500 (dec: 225064192)
{
	unsigned long hwnd; // size=0, offset=0
	unsigned int message; // size=0, offset=4
	long wParam; // size=0, offset=8
	unsigned long lParam; // size=0, offset=12
	unsigned long time; // size=0, offset=16
	struct POINT pt; // size=8, offset=20
};

struct FILETIME // hashcode: 0x05E66504 (dec: 98985220)
{
	unsigned long dwLowDateTime; // size=0, offset=0
	unsigned long dwHighDateTime; // size=0, offset=4
};

struct _WIN32_FIND_DATA // hashcode: 0xAFE97EF6 (dec: -1343652106)
{
	unsigned long dwFileAttributes; // size=0, offset=0
	struct FILETIME ftCreationTime; // size=8, offset=4
	struct FILETIME ftLastAccessTime; // size=8, offset=12
	struct FILETIME ftLastWriteTime; // size=8, offset=20
	unsigned long nFileSizeHigh; // size=0, offset=28
	unsigned long nFileSizeLow; // size=0, offset=32
	unsigned long dwReserved0; // size=0, offset=36
	unsigned long dwReserved1; // size=0, offset=40
	char cFileName[256]; // size=256, offset=44
	char cAlternateFileName[14]; // size=14, offset=300
};

struct PALETTEENTRY // hashcode: 0x8809E161 (dec: -2012618399)
{
	unsigned char peRed; // size=0, offset=0
	unsigned char peGreen; // size=0, offset=1
	unsigned char peBlue; // size=0, offset=2
	unsigned char peFlags; // size=0, offset=3
};

struct PAINTSTRUCT // hashcode: 0x718B7AE7 (dec: 1904966375)
{
	unsigned long hdc; // size=0, offset=0
	unsigned char fErase; // size=0, offset=4
	struct RECT rcPaint; // size=8, offset=6
	unsigned char fRestore; // size=0, offset=14
	unsigned char fIncUpdate; // size=0, offset=15
	unsigned char rgbReserved[16]; // size=16, offset=16
};

struct LARGE_INTEGER // hashcode: 0xAF525143 (dec: -1353559741)
{
	unsigned long LowPart; // size=0, offset=0
	unsigned long HighPart; // size=0, offset=4
};

struct GUID // hashcode: 0x71223D1D (dec: 1898069277)
{
	unsigned long Data1; // size=0, offset=0
	unsigned short Data2; // size=0, offset=4
	unsigned short Data3; // size=0, offset=6
	unsigned char Data4[8]; // size=8, offset=8
};

struct WAVEFORMATEX // hashcode: 0x2FF94D40 (dec: 804867392)
{
	unsigned short wFormatTag; // size=0, offset=0
	unsigned short nChannels; // size=0, offset=2
	unsigned long nSamplesPerSec; // size=0, offset=4
	unsigned long nAvgBytesPerSec; // size=0, offset=8
	unsigned short nBlockAlign; // size=0, offset=12
	unsigned short wBitsPerSample; // size=0, offset=14
	unsigned short cbSize; // size=0, offset=16
};

struct MMCKINFO // hashcode: 0x7412C9F6 (dec: 1947388406)
{
	unsigned long ckid; // size=0, offset=0
	unsigned long cksize; // size=0, offset=4
	unsigned long fccType; // size=0, offset=8
	unsigned long dwDataOffset; // size=0, offset=12
	unsigned long dwFlags; // size=0, offset=16
};

struct WAVEFORMAT // hashcode: 0x97326750 (dec: -1758304432)
{
	unsigned short wFormatTag; // size=0, offset=0
	unsigned short nChannels; // size=0, offset=2
	unsigned long nSamplesPerSec; // size=0, offset=4
	unsigned long nAvgBytesPerSec; // size=0, offset=8
	unsigned short nBlockAlign; // size=0, offset=12
};

struct PCMWAVEFORMAT // hashcode: 0xA9DF6896 (dec: -1444976490)
{
	struct WAVEFORMAT wf; // size=16, offset=0
	unsigned short wBitsPerSample; // size=0, offset=16
};

struct VS_FIXEDFILEINFO // hashcode: 0x933887F8 (dec: -1825011720)
{
	unsigned long dwSignature; // size=0, offset=0
	unsigned long dwStrucVersion; // size=0, offset=4
	unsigned long dwFileVersionMS; // size=0, offset=8
	unsigned long dwFileVersionLS; // size=0, offset=12
	unsigned long dwProductVersionMS; // size=0, offset=16
	unsigned long dwProductVersionLS; // size=0, offset=20
	unsigned long dwFileFlagsMask; // size=0, offset=24
	unsigned long dwFileFlags; // size=0, offset=28
	unsigned long dwFileOS; // size=0, offset=32
	unsigned long dwFileType; // size=0, offset=36
	unsigned long dwFileSubtype; // size=0, offset=40
	unsigned long dwFileDateMS; // size=0, offset=44
	unsigned long dwFileDateLS; // size=0, offset=48
};

struct WNDCLASSEX // hashcode: 0x20AC52BF (dec: 548164287)
{
	unsigned int cbSize; // size=0, offset=0
	unsigned int style; // size=0, offset=4
	unsigned long (*lpfnWndProc)(); // size=0, offset=8
	int cbClsExtra; // size=0, offset=12
	int cbWndExtra; // size=0, offset=16
	unsigned long hInstance; // size=0, offset=20
	unsigned long hIcon; // size=0, offset=24
	unsigned long hCursor; // size=0, offset=28
	unsigned long hbrBackground; // size=0, offset=32
	char *lpszMenuName; // size=0, offset=36
	char *lpszClassName; // size=0, offset=40
	unsigned long hIconSm; // size=0, offset=44
};

struct SHITEMID // hashcode: 0x631FD054 (dec: 1663029332)
{
	unsigned short cb; // size=0, offset=0
	unsigned char abID[1]; // size=1, offset=2
};

struct _ITEMIDLIST // hashcode: 0x3A074366 (dec: 973554534)
{
	struct SHITEMID mkid; // size=4, offset=0
};

struct _HSTRANS // hashcode: 0xD76D8BA5 (dec: -680686683)
{
	int unused; // size=0, offset=0
};

struct SIZE // hashcode: 0x7027C6D2 (dec: 1881654994)
{
	int cx; // size=0, offset=0
	int cy; // size=0, offset=4
};

struct TBMP // hashcode: 0x2F5EE3EF (dec: 794747887)
{
	unsigned char *data; // size=0, offset=0
	struct SIZE datasize; // size=8, offset=4
	long userdata; // size=0, offset=12
	char text[256]; // size=256, offset=16
};

struct UIRECT // hashcode: 0x11CC833A (dec: 298615610)
{
	long left; // size=0, offset=0
	long top; // size=0, offset=4
	long right; // size=0, offset=8
	long bottom; // size=0, offset=12
};

struct MSFX // hashcode: 0x49D95817 (dec: 1238980631)
{
	unsigned short pszName; // size=0, offset=0
};

struct CKINFO // hashcode: 0x6FE0A107 (dec: 1876992263)
{
	unsigned long dwSize; // size=0, offset=0
	unsigned long dwOffset; // size=0, offset=4
};

struct TSnd // hashcode: 0x1CBFF2FA (dec: 482341626)
{
};

struct TSFX // hashcode: 0x6A7B261C (dec: 1786455580)
{
	unsigned char Channel; // size=0, offset=0
	unsigned char bFlags; // size=0, offset=1
	unsigned short pszName; // size=0, offset=2
};

struct AnimStruct // hashcode: 0xEDC62515 (dec: -305781483)
{
	char Frames; // size=0, offset=0
	char Rate; // size=0, offset=1
};

struct MonsterData // hashcode: 0xE5217A42 (dec: -450790846)
{
	unsigned short GraphicType; // size=0, offset=0
	unsigned char has_special; // size=0, offset=2
	unsigned short sndfile; // size=0, offset=4
	unsigned char snd_special; // size=0, offset=6
	char TransFile; // size=0, offset=7
	char Frames[6]; // size=6, offset=8
	char Rate[6]; // size=6, offset=14
	int mName; // size=0, offset=20
	char mMinDLvl; // size=0, offset=24
	char mMaxDLvl; // size=0, offset=25
	char mLevel; // size=0, offset=26
	short mMinHP; // size=0, offset=28
	short mMaxHP; // size=0, offset=30
	unsigned char mAi; // size=0, offset=32
	unsigned short mFlags; // size=0, offset=34
	unsigned char mInt; // size=0, offset=36
	unsigned char mHit; // size=0, offset=37
	unsigned char mAFNum; // size=0, offset=38
	unsigned char mMinDamage; // size=0, offset=39
	unsigned char mMaxDamage; // size=0, offset=40
	unsigned char mHit2; // size=0, offset=41
	unsigned char mAFNum2; // size=0, offset=42
	unsigned char mMinDamage2; // size=0, offset=43
	unsigned char mMaxDamage2; // size=0, offset=44
	char mArmorClass; // size=0, offset=45
	char mMonstClass; // size=0, offset=46
	unsigned short mMagicRes; // size=0, offset=48
	unsigned short mMagicRes2; // size=0, offset=50
	unsigned short mTreasure; // size=0, offset=52
	char mSelFlag; // size=0, offset=54
	unsigned short mExp; // size=0, offset=56
};

struct CMonster // hashcode: 0xBF9B34C4 (dec: -1080347452)
{
	struct MonsterData *MData; // size=60, offset=0
	struct AnimStruct Anims[6]; // size=12, offset=4
	unsigned short Snds; // size=0, offset=16
	unsigned char mtype; // size=0, offset=18
	unsigned char mPlaceFlags; // size=0, offset=19
	unsigned char mMinHP; // size=0, offset=20
	unsigned char mMaxHP; // size=0, offset=21
	unsigned char has_special; // size=0, offset=22
	unsigned char mAFNum; // size=0, offset=23
	char mdeadval; // size=0, offset=24
};

struct MonsterStruct // hashcode: 0x1B974D9B (dec: 462900635)
{
	int mtalkmsg; // size=0, offset=0
	int _mgoalvar1; // size=0, offset=4
	int _mgoalvar2; // size=0, offset=8
	int _mgoalvar3; // size=0, offset=12
	int _mhitpoints; // size=0, offset=16
	int _mmaxhp; // size=0, offset=20
	short _mVar1; // size=0, offset=24
	short _mVar2; // size=0, offset=26
	short _mVar3; // size=0, offset=28
	short _mVar4; // size=0, offset=30
	short _mVar5; // size=0, offset=32
	short _mVar6; // size=0, offset=34
	short _mVar7; // size=0, offset=36
	short _mVar8; // size=0, offset=38
	short _mxvel; // size=0, offset=40
	short _myvel; // size=0, offset=42
	unsigned short _mFlags; // size=0, offset=44
	unsigned short mExp; // size=0, offset=46
	unsigned short mMagicRes; // size=0, offset=48
	char _mMTidx; // size=0, offset=50
	char _mmode; // size=0, offset=51
	char _mx; // size=0, offset=52
	char _my; // size=0, offset=53
	char _mfutx; // size=0, offset=54
	char _mfuty; // size=0, offset=55
	char _moldx; // size=0, offset=56
	char _moldy; // size=0, offset=57
	char _mxoff; // size=0, offset=58
	char _myoff; // size=0, offset=59
	char _mdir; // size=0, offset=60
	unsigned char _menemy; // size=0, offset=61
	char _mAnimDelay; // size=0, offset=62
	char _mAnimCnt; // size=0, offset=63
	char _mAnimLen; // size=0, offset=64
	char _mAnimFrame; // size=0, offset=65
	char _mAFNum; // size=0, offset=66
	char _lastx; // size=0, offset=67
	char _lasty; // size=0, offset=68
	char _udeadval; // size=0, offset=69
	char mWhoHit; // size=0, offset=70
	char mLevel; // size=0, offset=71
	char mArmorClass; // size=0, offset=72
	unsigned char _mgoal; // size=0, offset=73
	unsigned char _menemyx; // size=0, offset=74
	unsigned char _menemyy; // size=0, offset=75
	unsigned char _mAi; // size=0, offset=76
	unsigned char _mint; // size=0, offset=77
	unsigned char _msquelch; // size=0, offset=78
	unsigned char _uniqtype; // size=0, offset=79
	unsigned char mHit; // size=0, offset=80
	unsigned char mMinDamage; // size=0, offset=81
	unsigned char mMaxDamage; // size=0, offset=82
	unsigned char mHit2; // size=0, offset=83
	unsigned char mMinDamage2; // size=0, offset=84
	unsigned char mMaxDamage2; // size=0, offset=85
	unsigned char leader; // size=0, offset=86
	unsigned char leaderflag; // size=0, offset=87
	unsigned char packsize; // size=0, offset=88
	unsigned char mlid; // size=0, offset=89
	char Action; // size=0, offset=90
	char _mDelFlag; // size=0, offset=91
	int mName; // size=0, offset=92
	struct CMonster *MType; // size=28, offset=96
	struct MonsterData *MData; // size=60, offset=100
};

struct UniqMonstStruct // hashcode: 0x442076FE (dec: 1142978302)
{
	char mtype; // size=0, offset=0
	unsigned short mName; // size=0, offset=2
	unsigned char mlevel; // size=0, offset=4
	unsigned short mmaxhp; // size=0, offset=6
	unsigned char mAi; // size=0, offset=8
	unsigned char mint; // size=0, offset=9
	unsigned char mMinDamage; // size=0, offset=10
	unsigned char mMaxDamage; // size=0, offset=11
	unsigned short mMagicRes; // size=0, offset=12
	unsigned short mUnqAttr; // size=0, offset=14
	unsigned char mUnqVar1; // size=0, offset=16
	unsigned char mUnqVar2; // size=0, offset=17
	int mtalkmsg; // size=0, offset=20
};

struct STONEPAL // hashcode: 0x90B404DF (dec: -1867250465)
{
	unsigned char NoStonePals; // size=0, offset=0
	int StonePal; // size=0, offset=4
};

struct DEF_ARGS // hashcode: 0x9222E4C3 (dec: -1843206973)
{
	unsigned long a0; // size=0, offset=0
	unsigned long a1; // size=0, offset=4
	unsigned long a2; // size=0, offset=8
	unsigned long a3; // size=0, offset=12
};

struct MEM_INIT_INFO // hashcode: 0xE42487C7 (dec: -467367993)
{
	void *Mem; // size=0, offset=0
	unsigned long Size; // size=0, offset=4
	unsigned long Type; // size=0, offset=8
	char *TypeString; // size=0, offset=12
	unsigned short Alignment; // size=0, offset=16
	void (*MemMove)(); // size=0, offset=20
	struct MEM_INIT_INFO *NextInitBlock; // size=40, offset=24
	unsigned short Flags; // size=0, offset=28
	struct MEM_HDR *Empty; // size=0, offset=32
	struct MEM_HDR *Used; // size=0, offset=36
};

struct GAL_STRUCT // hashcode: 0xD1F86F3F (dec: -772247745)
{
	int OriginalSize; // size=0, offset=0
	unsigned int Offset; // size=0, offset=4
};

struct TASK // hashcode: 0xE98A0E26 (dec: -376828378)
{
	struct TASK *Next; // size=92, offset=0
	struct TASK *Prev; // size=92, offset=4
	unsigned long Id; // size=0, offset=8
	unsigned long SleepTime; // size=0, offset=12
	unsigned long fToInit; // size=1, offset=128
	unsigned long fToDie; // size=1, offset=129
	unsigned long fKillable; // size=1, offset=130
	unsigned long fActive; // size=1, offset=131
	unsigned long fXtraStack; // size=1, offset=132
	void *Stack; // size=0, offset=20
	unsigned long StackSize; // size=0, offset=24
	void *Data; // size=0, offset=28
	int TskEnv[12]; // size=48, offset=32
	void (*Main)(); // size=0, offset=80
	long hndTask; // size=0, offset=84
	unsigned short XtraLongs; // size=0, offset=88
	unsigned short MaxStackSizeBytes; // size=0, offset=90
};

struct tab_entry // hashcode: 0x06A6EAB2 (dec: 111602354)
{
	unsigned char a; // size=0, offset=0
	unsigned char b; // size=0, offset=1
};

struct PLStruct // hashcode: 0x87A88CE3 (dec: -2018997021)
{
	int PLName; // size=0, offset=0
	int PLPower; // size=0, offset=4
	int PLParam1; // size=0, offset=8
	int PLParam2; // size=0, offset=12
	char PLMinLvl; // size=0, offset=16
	long PLIType; // size=0, offset=20
	unsigned char PLGOE; // size=0, offset=24
	unsigned char PLDouble; // size=0, offset=25
	unsigned char PLOk; // size=0, offset=26
	int PLMinVal; // size=0, offset=28
	int PLMaxVal; // size=0, offset=32
	int PLMultVal; // size=0, offset=36
};

struct UItemStruct // hashcode: 0x21DFB367 (dec: 568308583)
{
	int UIName; // size=0, offset=0
	char UIItemId; // size=0, offset=4
	char UIMinLvl; // size=0, offset=5
	char UINumPL; // size=0, offset=6
	int UIValue; // size=0, offset=8
	char UIPower1; // size=0, offset=12
	int UIParam1; // size=0, offset=16
	int UIParam2; // size=0, offset=20
	char UIPower2; // size=0, offset=24
	int UIParam3; // size=0, offset=28
	int UIParam4; // size=0, offset=32
	char UIPower3; // size=0, offset=36
	int UIParam5; // size=0, offset=40
	int UIParam6; // size=0, offset=44
	char UIPower4; // size=0, offset=48
	int UIParam7; // size=0, offset=52
	int UIParam8; // size=0, offset=56
	char UIPower5; // size=0, offset=60
	int UIParam9; // size=0, offset=64
	int UIParam10; // size=0, offset=68
	char UIPower6; // size=0, offset=72
	int UIParam11; // size=0, offset=76
	int UIParam12; // size=0, offset=80
};

struct ItemDataStruct // hashcode: 0x9A6093E5 (dec: -1704946715)
{
	unsigned char iRnd; // size=0, offset=0
	char iClass; // size=0, offset=1
	char iLoc; // size=0, offset=2
	unsigned char iCurs; // size=0, offset=3
	char itype; // size=0, offset=4
	char iItemId; // size=0, offset=5
	unsigned short iName; // size=0, offset=6
	unsigned short iSName; // size=0, offset=8
	char iMinMLvl; // size=0, offset=10
	unsigned char iDurability; // size=0, offset=11
	unsigned char iMinDam; // size=0, offset=12
	unsigned char iMaxDam; // size=0, offset=13
	unsigned char iMinAC; // size=0, offset=14
	unsigned char iMaxAC; // size=0, offset=15
	char iMinStr; // size=0, offset=16
	char iMinMag; // size=0, offset=17
	char iMinDex; // size=0, offset=18
	long iFlags; // size=0, offset=20
	unsigned char iMiscId; // size=0, offset=24
	unsigned char iSpell; // size=0, offset=25
	unsigned char iUsable; // size=0, offset=26
	unsigned short iValue; // size=0, offset=28
	unsigned short iMaxValue; // size=0, offset=30
};

struct ItemGetRecordStruct // hashcode: 0x4F211754 (dec: 1327568724)
{
	int nSeed; // size=0, offset=0
	unsigned short wCI; // size=0, offset=4
	int nIndex; // size=0, offset=8
	unsigned long dwTimestamp; // size=0, offset=12
};

struct ItemStruct // hashcode: 0xA26A5CF5 (dec: -1570087691)
{
	int _iVAdd1; // size=0, offset=0
	int _iVMult1; // size=0, offset=4
	int _iVAdd2; // size=0, offset=8
	int _iVMult2; // size=0, offset=12
	int _iSeed; // size=0, offset=16
	int _ivalue; // size=0, offset=20
	int _iIvalue; // size=0, offset=24
	long _iFlags; // size=0, offset=28
	int _iPLAC; // size=0, offset=32
	unsigned short _iCreateInfo; // size=0, offset=36
	unsigned short _iName; // size=0, offset=38
	unsigned short _iIName; // size=0, offset=40
	unsigned short ItemFrame; // size=0, offset=42
	short _itype; // size=0, offset=44
	short IDidx; // size=0, offset=46
	short _iPLMana; // size=0, offset=48
	short _iPLHP; // size=0, offset=50
	char _iUid; // size=0, offset=52
	short _iPLToHit; // size=0, offset=54
	short _iPLDam; // size=0, offset=56
	char _iPLDamMod; // size=0, offset=58
	char _iMinDam; // size=0, offset=59
	char _iMaxDam; // size=0, offset=60
	char _iSpell; // size=0, offset=61
	short _iDurability; // size=0, offset=62
	short _iMaxDur; // size=0, offset=64
	char _iPLGetHit; // size=0, offset=66
	char _iPLLight; // size=0, offset=67
	char _iFMinDam; // size=0, offset=68
	char _iFMaxDam; // size=0, offset=69
	char _iLMinDam; // size=0, offset=70
	char _iLMaxDam; // size=0, offset=71
	char _iPLEnAc; // size=0, offset=72
	unsigned char _iCharges; // size=0, offset=73
	char _iAC; // size=0, offset=74
	unsigned char _iMaxCharges; // size=0, offset=75
	unsigned char _iCurs; // size=0, offset=76
	unsigned char _iMiscId; // size=0, offset=77
	char _iAnimLen; // size=0, offset=78
	char _iAnimFrame; // size=0, offset=79
	char _iSelFlag; // size=0, offset=80
	char _iMagical; // size=0, offset=81
	char _ix; // size=0, offset=82
	char _iy; // size=0, offset=83
	char _iLoc; // size=0, offset=84
	char _iClass; // size=0, offset=85
	char _iPLStr; // size=0, offset=86
	char _iPLMag; // size=0, offset=87
	char _iPLDex; // size=0, offset=88
	char _iPLVit; // size=0, offset=89
	char _iPLFR; // size=0, offset=90
	char _iPLLR; // size=0, offset=91
	char _iPLMR; // size=0, offset=92
	char _iSplLvlAdd; // size=0, offset=93
	char _iRequest; // size=0, offset=94
	char _iPrePower; // size=0, offset=95
	char _iSufPower; // size=0, offset=96
	unsigned char _iMinStr; // size=0, offset=97
	unsigned char _iMinDex; // size=0, offset=98
	char _oldlight; // size=0, offset=99
	unsigned char _iMinMag; // size=0, offset=100
	char _PlrCreate; // size=0, offset=101
	char _iStatFlag; // size=0, offset=102
	char _iPostDraw; // size=0, offset=103
	char _iAnimFlag; // size=0, offset=104
	char _iIdentified; // size=0, offset=105
};

struct FRAME_HDR // hashcode: 0x985BBFA6 (dec: -1738817626)
{
	unsigned int FrOffset; // size=32, offset=0
	int X; // size=8, offset=32
	int Y; // size=8, offset=40
	unsigned int PalNum; // size=8, offset=48
	unsigned int NotTrans; // size=1, offset=56
	unsigned int Rotated; // size=1, offset=57
	unsigned int InVRAM; // size=1, offset=58
	unsigned int CompType; // size=2, offset=59
	unsigned int Floor; // size=1, offset=61
	unsigned int Cycle; // size=1, offset=62
	unsigned int pad; // size=1, offset=63
	unsigned int W; // size=9, offset=64
	unsigned int H; // size=9, offset=73
	unsigned int PentaGram; // size=1, offset=82
	unsigned int pad2; // size=13, offset=83
};

struct SysObj // hashcode: 0xC1396EF1 (dec: -1053200655)
{
	long MemHnd; // size=0, offset=0
};

struct FileIO // hashcode: 0x95C85D46 (dec: -1782031034)
{
	struct SysObj SysObj; // size=4, offset=0
	unsigned long MemId; // size=0, offset=4
	long hndPath; // size=0, offset=8
	char *SearchPath; // size=0, offset=12
	struct __vtbl_ptr_type (*_vf)[7]; // size=4, offset=16
};

struct CPart // hashcode: 0xA47A9C9E (dec: -1535468386)
{
	unsigned long Piece; // size=0, offset=0
	short X; // size=0, offset=4
	short Y; // size=0, offset=6
};

struct CBlock // hashcode: 0x80F093BF (dec: -2131717185)
{
	unsigned long NumOfParts; // size=0, offset=0
	struct CPart Parts[1]; // size=8, offset=4
};

struct CBlockHdr // hashcode: 0x9C9207E5 (dec: -1668151323)
{
	unsigned long NumOfBlocks; // size=0, offset=0
	struct CBlock Blocks[1]; // size=12, offset=4
};

struct PAL // hashcode: 0x40426631 (dec: 1078093361)
{
	unsigned int InVram; // size=1, offset=0
	unsigned int NumOfCols; // size=31, offset=1
	unsigned short Cols[1]; // size=2, offset=4
};

struct PAL_INVRAM // hashcode: 0x1C84E342 (dec: 478470978)
{
	unsigned int InVram; // size=1, offset=0
	unsigned int Pad; // size=15, offset=1
	unsigned int clut; // size=16, offset=16
};

struct DECOMP_BUFFER // hashcode: 0x457FD8CE (dec: 1166006478)
{
	unsigned long TpX; // size=0, offset=0
	unsigned long TpY; // size=0, offset=4
};

struct ALL_DECOMP_BUFFERS // hashcode: 0xB3AE6C1F (dec: -1280414689)
{
	unsigned long NumOfBuffers; // size=0, offset=0
	struct DECOMP_BUFFER TheBuffers[1]; // size=8, offset=4
};

struct SPR_HDR // hashcode: 0x986C8597 (dec: -1737718377)
{
	unsigned int DecompOffset; // size=32, offset=0
	unsigned int CreatureOffset; // size=32, offset=32
	unsigned int PalOffset; // size=32, offset=64
	unsigned int FrameOffset; // size=32, offset=96
	unsigned int BaseFrame; // size=32, offset=128
	unsigned int DestTPage; // size=32, offset=160
	unsigned int ComponentOffset; // size=32, offset=192
	unsigned int NumOfCreatures; // size=32, offset=224
	unsigned int NumOfFrames; // size=16, offset=256
	unsigned int NumOfPals; // size=16, offset=272
	unsigned int TWidth; // size=8, offset=288
	unsigned int THeight; // size=8, offset=296
	unsigned int IsTiles; // size=8, offset=304
	unsigned int Spare; // size=8, offset=312
};

struct TP_LOAD_HDR // hashcode: 0x3F18087E (dec: 1058539646)
{
	unsigned int U; // size=8, offset=0
	unsigned int V; // size=8, offset=8
	unsigned int tpage; // size=16, offset=16
};

struct CTextFileInfo // hashcode: 0x4EC249D2 (dec: 1321355730)
{
	char *FileName; // size=0, offset=0
};

struct CCreatureAction // hashcode: 0x3415BDBF (dec: 873840063)
{
	unsigned short BaseFrame; // size=0, offset=0
	unsigned char NumOfFrames; // size=0, offset=2
	unsigned char NumOfPhysFrames; // size=0, offset=3
	unsigned char DirRemap[8]; // size=8, offset=4
	unsigned char AnimRemap[1]; // size=1, offset=12
};

struct CCreatureHdr // hashcode: 0xD6186FBF (dec: -703041601)
{
	long NumOfActions; // size=0, offset=0
	struct CCreatureAction Cr; // size=14, offset=4
};

struct TextDat // hashcode: 0x2DEE5091 (dec: 770592913)
{
	void * OwnDat; // size=0, offset=0
	int TexNum; // size=0, offset=4
	int LastFrame; // size=0, offset=8
	void * DatLoaded; // size=0, offset=12
	long hndDat; // size=0, offset=16
	long hndHdr; // size=0, offset=20
	long hndPalOffset; // size=0, offset=24
	long hndCreatureOffset; // size=0, offset=28
	long hndBlockOffsets; // size=0, offset=32
	struct FRAME_HDR *Frames; // size=12, offset=36
	struct SPR_HDR *Hdr; // size=40, offset=40
	void *Pals; // size=0, offset=44
	int *PalOffset; // size=0, offset=48
	int *CreatureOffset; // size=0, offset=52
	unsigned char *CreatureAnims; // size=0, offset=56
	unsigned char *Blocks; // size=0, offset=60
	void * Loaded; // size=0, offset=64
	int LoadCount; // size=0, offset=68
	struct CTextFileInfo *FileInfo; // size=4, offset=72
	long hndDecompBuffer; // size=0, offset=76
	int DecX; // size=0, offset=80
	int DecY; // size=0, offset=84
	int PalX; // size=0, offset=88
	int PalY; // size=0, offset=92
	int Scr; // size=0, offset=96
	int NumOfBuffers[2]; // size=8, offset=100
	long hndDecompArrays; // size=0, offset=108
};

struct CScreen // hashcode: 0x851560D8 (dec: -2062196520)
{
	struct TextDat TextDat; // size=112, offset=0
	int LoadedId; // size=0, offset=112
	int TpX; // size=0, offset=116
	int TpY; // size=0, offset=120
};

struct OBJ_LOAD_INFO // hashcode: 0x4C900FD7 (dec: 1284509655)
{
	short Creature; // size=0, offset=0
	unsigned short TexDat; // size=0, offset=2
};

struct ObjDataStruct // hashcode: 0xC2278030 (dec: -1037598672)
{
	char oload; // size=0, offset=0
	char ofindex; // size=0, offset=1
	char ominlvl; // size=0, offset=2
	char omaxlvl; // size=0, offset=3
	char olvltype; // size=0, offset=4
	char otheme; // size=0, offset=5
	char oquest; // size=0, offset=6
	unsigned char oAnimFlag; // size=0, offset=7
	short oAnimDelay; // size=0, offset=8
	short oAnimLen; // size=0, offset=10
	unsigned char oSolidFlag; // size=0, offset=12
	unsigned char oMissFlag; // size=0, offset=13
	unsigned char oLightFlag; // size=0, offset=14
	char oBreak; // size=0, offset=15
	char oSelFlag; // size=0, offset=16
	unsigned char oTrapFlag; // size=0, offset=17
};

struct ObjectStruct // hashcode: 0xBD7F33ED (dec: -1115737107)
{
	short _olid; // size=0, offset=0
	int _oRndSeed; // size=0, offset=4
	short _oAnimDelay; // size=0, offset=8
	short _oAnimCnt; // size=0, offset=10
	short _oAnimLen; // size=0, offset=12
	short _oVar1; // size=0, offset=14
	short _oVar2; // size=0, offset=16
	short _oVar3; // size=0, offset=18
	short _oVar4; // size=0, offset=20
	short _oVar5; // size=0, offset=22
	short _oVar6; // size=0, offset=24
	short _oVar7; // size=0, offset=26
	short _oVar8; // size=0, offset=28
	char _otype; // size=0, offset=30
	char _ox; // size=0, offset=31
	char _oy; // size=0, offset=32
	char _oAnimFrame; // size=0, offset=33
	char _oBreak; // size=0, offset=34
	char _oSelFlag; // size=0, offset=35
	unsigned char _oLight; // size=0, offset=36
	unsigned char _oAnimFlag; // size=0, offset=37
	unsigned char _oDelFlag; // size=0, offset=38
	unsigned char _oSolidFlag; // size=0, offset=39
	unsigned char _oMissFlag; // size=0, offset=40
	unsigned char _oPreFlag; // size=0, offset=41
	unsigned char _oTrapFlag; // size=0, offset=42
	unsigned char _oDoorFlag; // size=0, offset=43
};

struct ShadowStruct // hashcode: 0x5043DB59 (dec: 1346624345)
{
	unsigned char strig; // size=0, offset=0
	unsigned char s1; // size=0, offset=1
	unsigned char s2; // size=0, offset=2
	unsigned char s3; // size=0, offset=3
	unsigned char nv1; // size=0, offset=4
	unsigned char nv2; // size=0, offset=5
	unsigned char nv3; // size=0, offset=6
};

struct ScrollStruct // hashcode: 0xB40FF333 (dec: -1274023117)
{
	int _sxoff; // size=0, offset=0
	int _syoff; // size=0, offset=4
	int _sdx; // size=0, offset=8
	int _sdy; // size=0, offset=12
	int _sdir; // size=0, offset=16
};

struct THEME_LOC // hashcode: 0xF93660DB (dec: -113876773)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int ttval; // size=0, offset=8
	int width; // size=0, offset=12
	int height; // size=0, offset=16
};

struct MINIXY // hashcode: 0x0BD88A98 (dec: 198740632)
{
	char stairsupx; // size=0, offset=0
	char stairsupy; // size=0, offset=1
	char stairsdownx; // size=0, offset=2
	char stairsdowny; // size=0, offset=3
	char townwarpx; // size=0, offset=4
	char townwarpy; // size=0, offset=5
	char pentax; // size=0, offset=6
	char pentay; // size=0, offset=7
	char pwaterx; // size=0, offset=8
	char pwatery; // size=0, offset=9
};

struct MICROS // hashcode: 0x8AD2C950 (dec: -1965897392)
{
	unsigned short mt[16]; // size=32, offset=0
};

struct map_info // hashcode: 0x47390C4B (dec: 1194921035)
{
	short dMonster; // size=0, offset=0
	unsigned char dBits; // size=0, offset=2
	char dObject; // size=0, offset=3
	char dItem; // size=0, offset=4
	char dMissile; // size=0, offset=5
	char dFlags; // size=0, offset=6
	char dTransVal; // size=0, offset=7
};

struct PortalStruct // hashcode: 0x2E7F7000 (dec: 780103680)
{
	int ltype; // size=0, offset=0
	char x; // size=0, offset=4
	char y; // size=0, offset=5
	char level; // size=0, offset=6
	char setlvlnum; // size=0, offset=7
	unsigned char open; // size=0, offset=8
	unsigned char setlvl; // size=0, offset=9
};

struct QuestStruct // hashcode: 0x7660C468 (dec: 1986053224)
{
	unsigned char _qlevel; // size=0, offset=0
	unsigned char _qtype; // size=0, offset=1
	unsigned char _qactive; // size=0, offset=2
	unsigned char _qlvltype; // size=0, offset=3
	int _qtx; // size=0, offset=4
	int _qty; // size=0, offset=8
	unsigned char _qslvl; // size=0, offset=12
	unsigned char _qidx; // size=0, offset=13
	unsigned char _qmsg; // size=0, offset=14
	unsigned char _qvar1; // size=0, offset=15
	unsigned char _qvar2; // size=0, offset=16
	unsigned char _qlog; // size=0, offset=17
	unsigned char pad_for_laz; // size=0, offset=18
};

struct QuestData // hashcode: 0x8E4E0B65 (dec: -1907487899)
{
	unsigned char _qdlvl; // size=0, offset=0
	char _qdmultlvl; // size=0, offset=1
	unsigned char _qlvlt; // size=0, offset=2
	unsigned char _qdtype; // size=0, offset=3
	unsigned char _qdrnd; // size=0, offset=4
	unsigned char _qslvl; // size=0, offset=5
	unsigned char _qflags; // size=0, offset=6
	int _qdmsg; // size=0, offset=8
	int _qlstr; // size=0, offset=12
};

struct TCmd // hashcode: 0xBE251FC1 (dec: -1104863295)
{
	unsigned char bCmd; // size=0, offset=0
};

struct TCmdLoc // hashcode: 0x62280DF8 (dec: 1646792184)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
};

struct TCmdLocParam1 // hashcode: 0x004B5542 (dec: 4937026)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned short wParam1; // size=0, offset=4
};

struct TCmdLocParam2 // hashcode: 0xAC1740C9 (dec: -1407762231)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned short wParam1; // size=0, offset=4
	unsigned short wParam2; // size=0, offset=6
};

struct TCmdLocParam3 // hashcode: 0x5D428854 (dec: 1564641364)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned short wParam1; // size=0, offset=4
	unsigned short wParam2; // size=0, offset=6
	unsigned short wParam3; // size=0, offset=8
};

struct TCmdParam1 // hashcode: 0x7FE58FD5 (dec: 2145750997)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wParam1; // size=0, offset=2
};

struct TCmdParam2 // hashcode: 0xCFEDE870 (dec: -806492048)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wParam1; // size=0, offset=2
	unsigned short wParam2; // size=0, offset=4
};

struct TCmdParam3 // hashcode: 0x8E16FA91 (dec: -1911096687)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wParam1; // size=0, offset=2
	unsigned short wParam2; // size=0, offset=4
	unsigned short wParam3; // size=0, offset=6
};

struct TCmdGolem // hashcode: 0xBF193CDC (dec: -1088865060)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char _mx; // size=0, offset=1
	unsigned char _my; // size=0, offset=2
	unsigned char _mdir; // size=0, offset=3
	unsigned char _menemy; // size=0, offset=4
	unsigned char _currlevel; // size=0, offset=5
	short _mhitpoints; // size=0, offset=6
};

struct TCmdQuest // hashcode: 0xAB7F9766 (dec: -1417701530)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char q; // size=0, offset=1
	unsigned char qstate; // size=0, offset=2
	unsigned char qlog; // size=0, offset=3
	unsigned char qvar1; // size=0, offset=4
};

struct TCmdGItem // hashcode: 0xD8A2FA03 (dec: -660407805)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bMaster; // size=0, offset=1
	unsigned char bPnum; // size=0, offset=2
	unsigned char bCursitem; // size=0, offset=3
	unsigned char bLevel; // size=0, offset=4
	unsigned char x; // size=0, offset=5
	unsigned char y; // size=0, offset=6
	unsigned char bId; // size=0, offset=7
	unsigned char bDur; // size=0, offset=8
	unsigned char bMDur; // size=0, offset=9
	unsigned char bCh; // size=0, offset=10
	unsigned char bMCh; // size=0, offset=11
	unsigned short wValue; // size=0, offset=12
	unsigned short wIndx; // size=0, offset=14
	unsigned short wCI; // size=0, offset=16
	unsigned long dwSeed; // size=0, offset=20
	unsigned long dwBuff; // size=0, offset=24
	unsigned long dwTime; // size=0, offset=28
};

struct TCmdPItem // hashcode: 0x53FA4B60 (dec: 1408912224)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned char bId; // size=0, offset=3
	unsigned char bDur; // size=0, offset=4
	unsigned char bMDur; // size=0, offset=5
	unsigned char bCh; // size=0, offset=6
	unsigned char bMCh; // size=0, offset=7
	unsigned short wValue; // size=0, offset=8
	unsigned short wIndx; // size=0, offset=10
	unsigned short wCI; // size=0, offset=12
	unsigned long dwSeed; // size=0, offset=16
	unsigned long dwBuff; // size=0, offset=20
};

struct TCmdChItem // hashcode: 0x4B9D2812 (dec: 1268590610)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bLoc; // size=0, offset=1
	unsigned short wIndx; // size=0, offset=2
	unsigned short wCI; // size=0, offset=4
	unsigned long dwSeed; // size=0, offset=8
	unsigned char bId; // size=0, offset=12
};

struct TCmdDelItem // hashcode: 0x37642B80 (dec: 929311616)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bLoc; // size=0, offset=1
};

struct TCmdDamage // hashcode: 0xCA8A8DA2 (dec: -896889438)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bPlr; // size=0, offset=1
	unsigned long dwDam; // size=0, offset=4
};

struct TCmdPlrInfoHdr // hashcode: 0xB3E299FA (dec: -1276995078)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wOffset; // size=0, offset=2
	unsigned short wBytes; // size=0, offset=4
};

struct TCmdString // hashcode: 0x768BD9A6 (dec: 1988876710)
{
	unsigned char bCmd; // size=0, offset=0
	char str[80]; // size=80, offset=1
};

struct TFakeCmdPlr // hashcode: 0x61F03885 (dec: 1643133061)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bPlr; // size=0, offset=1
};

struct TFakeDropPlr // hashcode: 0x0E813868 (dec: 243349608)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bPlr; // size=0, offset=1
	unsigned long dwReason; // size=0, offset=4
};

struct TSyncHeader // hashcode: 0x822F93C9 (dec: -2110811191)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bLevel; // size=0, offset=1
	unsigned short wLen; // size=0, offset=2
	unsigned char bObjId; // size=0, offset=4
	unsigned char bObjCmd; // size=0, offset=5
	unsigned char bItemI; // size=0, offset=6
	unsigned char bItemX; // size=0, offset=7
	unsigned char bItemY; // size=0, offset=8
	unsigned short wItemIndx; // size=0, offset=10
	unsigned short wItemCI; // size=0, offset=12
	int dwItemSeed; // size=0, offset=16
	unsigned char bItemId; // size=0, offset=20
	unsigned char bItemDur; // size=0, offset=21
	unsigned char bItemMDur; // size=0, offset=22
	unsigned char bItemCh; // size=0, offset=23
	unsigned char bItemMCh; // size=0, offset=24
	unsigned short wItemVal; // size=0, offset=26
	unsigned long dwItemBuff; // size=0, offset=28
	unsigned char bPInvLoc; // size=0, offset=32
	unsigned short wPInvIndx; // size=0, offset=34
	unsigned short wPInvCI; // size=0, offset=36
	int dwPInvSeed; // size=0, offset=40
	unsigned char bPInvId; // size=0, offset=44
};

struct TSyncMonster // hashcode: 0x3A5A364D (dec: 978990669)
{
	unsigned char _mndx; // size=0, offset=0
	unsigned char _mx; // size=0, offset=1
	unsigned char _my; // size=0, offset=2
	unsigned char _menemy; // size=0, offset=3
	unsigned char _mdelta; // size=0, offset=4
};

struct TPktHdr // hashcode: 0xBE041C6C (dec: -1107026836)
{
	unsigned char px; // size=0, offset=0
	unsigned char py; // size=0, offset=1
	unsigned char targx; // size=0, offset=2
	unsigned char targy; // size=0, offset=3
	unsigned long php; // size=0, offset=4
	unsigned long pmhp; // size=0, offset=8
	unsigned char bstr; // size=0, offset=12
	unsigned char bmag; // size=0, offset=13
	unsigned char bdex; // size=0, offset=14
	unsigned short wCheck; // size=0, offset=16
	unsigned short wLen; // size=0, offset=18
};

struct TPkt // hashcode: 0x248B59EA (dec: 613112298)
{
	struct TPktHdr hdr; // size=20, offset=0
	unsigned char body[492]; // size=492, offset=20
};

struct DMonsterStr // hashcode: 0xAF684B25 (dec: -1352119515)
{
	unsigned char _mx; // size=0, offset=0
	unsigned char _my; // size=0, offset=1
	unsigned char _mdir; // size=0, offset=2
	unsigned char _menemy; // size=0, offset=3
	int _mhitpoints; // size=0, offset=4
};

struct DObjectStr // hashcode: 0x84E3A43F (dec: -2065456065)
{
	unsigned char bCmd; // size=0, offset=0
};

struct DLevel // hashcode: 0x0D115CF2 (dec: 219241714)
{
	struct TCmdPItem item[127]; // size=3048, offset=0
	struct DObjectStr object[127]; // size=127, offset=3048
	struct DMonsterStr monster[190]; // size=1520, offset=3176
};

struct LocalLevel // hashcode: 0xD2EECF26 (dec: -756101338)
{
	unsigned char automapsv[5][40]; // size=200, offset=0
};

struct DPortal // hashcode: 0x8C37D9AE (dec: -1942496850)
{
	unsigned char x; // size=0, offset=0
	unsigned char y; // size=0, offset=1
	unsigned char level; // size=0, offset=2
	unsigned char ltype; // size=0, offset=3
	unsigned char setlvl; // size=0, offset=4
};

struct MultiQuests // hashcode: 0x998CD9AB (dec: -1718822485)
{
	unsigned char qstate; // size=0, offset=0
	unsigned char qlog; // size=0, offset=1
	unsigned char qvar1; // size=0, offset=2
};

struct DJunk // hashcode: 0xCDCFED0E (dec: -842011378)
{
	struct DPortal portal[4]; // size=20, offset=0
	struct MultiQuests quests[4]; // size=12, offset=20
};

struct OBJ_TYPE_INFO // hashcode: 0x8EADEE9A (dec: -1901203814)
{
	void (*Constructor)(); // size=0, offset=0
	void (*Destructor)(); // size=0, offset=4
	void (*Printer)(); // size=0, offset=8
	int (*GetWidth)(); // size=0, offset=12
	int (*GetHeight)(); // size=0, offset=16
	int (*GetXOff)(); // size=0, offset=20
	int (*GetYOff)(); // size=0, offset=24
	int (*GetPal)(); // size=0, offset=28
};

struct OBJ_LIST // hashcode: 0x4B0E1E16 (dec: 1259216406)
{
	unsigned long PrintDepth; // size=0, offset=0
	unsigned char Visible; // size=0, offset=4
	unsigned char Killable; // size=0, offset=5
	char *ListName; // size=0, offset=8
	struct OBJ_LIST *Prev; // size=40, offset=12
	struct OBJ_LIST *Next; // size=40, offset=16
	long X; // size=0, offset=20
	long Y; // size=0, offset=24
	long Z; // size=0, offset=28
	struct OBJ_STRUCT *Head; // size=0, offset=32
	unsigned char (*SortCompare)(); // size=0, offset=36
};

struct OBJ_STRUCT // hashcode: 0x77BE8F16 (dec: 2008977174)
{
	struct OBJ_STRUCT *Next; // size=52, offset=0
	struct OBJ_STRUCT *Prev; // size=52, offset=4
	unsigned long ID; // size=0, offset=8
	long XPos; // size=0, offset=12
	long YPos; // size=0, offset=16
	long ZPos; // size=0, offset=20
	long XVel; // size=0, offset=24
	long YVel; // size=0, offset=28
	long ZVel; // size=0, offset=32
	struct OBJ_TYPE_INFO *OTI; // size=32, offset=36
	struct OBJ_LIST *OL; // size=40, offset=40
	void *Data; // size=0, offset=44
	long MemHandle; // size=0, offset=48
};

struct CPad // hashcode: 0x49166B78 (dec: 1226206072)
{
	unsigned char get_both; // size=0, offset=0
	unsigned char active; // size=0, offset=1
	unsigned char PadType; // size=0, offset=2
	unsigned char PADTICK; // size=0, offset=3
	unsigned short PADTICKMASK; // size=0, offset=4
	unsigned short PadNum; // size=0, offset=6
	unsigned short Cur; // size=0, offset=8
	unsigned short Up; // size=0, offset=10
	unsigned short Down; // size=0, offset=12
	unsigned short Tick; // size=0, offset=14
	unsigned short Old; // size=0, offset=16
	unsigned short both_Cur; // size=0, offset=18
	unsigned short both_Up; // size=0, offset=20
	unsigned short both_Down; // size=0, offset=22
	unsigned short both_Tick; // size=0, offset=24
	unsigned short both_Old; // size=0, offset=26
	void * TickDown[16]; // size=64, offset=28
	void * TickBoth[16]; // size=64, offset=92
	unsigned char TickCount[16]; // size=16, offset=156
	unsigned short BothTickCount[16]; // size=32, offset=172
	unsigned short GazTickCount[16]; // size=32, offset=204
};

struct CFont // hashcode: 0x713A6C68 (dec: 1899654248)
{
	int TextureId; // size=0, offset=0
	unsigned short FontTab[256]; // size=512, offset=4
	int PrintyOTpos; // size=0, offset=516
	int MinX; // size=0, offset=520
	int MaxX; // size=0, offset=524
	int Width; // size=0, offset=528
	struct TextDat *ThisDat; // size=112, offset=532
	unsigned char FontHeight; // size=0, offset=536
};

struct SCREEN_ENV // hashcode: 0x80EF00BE (dec: -2131820354)
{
	struct DRAWENV drawenv; // size=92, offset=0
	struct DISPENV dispenv; // size=20, offset=92
};

struct LittleGt4 // hashcode: 0x2B3D774A (dec: 725448522)
{
	unsigned char u0; // size=0, offset=0
	unsigned char v0; // size=0, offset=1
	unsigned short clut; // size=0, offset=2
	unsigned char u1; // size=0, offset=4
	unsigned char v1; // size=0, offset=5
	unsigned short tpage; // size=0, offset=6
	unsigned char u2; // size=0, offset=8
	unsigned char v2; // size=0, offset=9
	unsigned char u3; // size=0, offset=10
	unsigned char v3; // size=0, offset=11
	unsigned char w; // size=0, offset=12
	unsigned char h; // size=0, offset=13
	unsigned char code; // size=0, offset=14
	unsigned char Flags; // size=0, offset=15
};

struct RGBPOLY // hashcode: 0x76889972 (dec: 1988663666)
{
	int r1; // size=0, offset=0
	int g1; // size=0, offset=4
	int b1; // size=0, offset=8
	int r2; // size=0, offset=12
	int g2; // size=0, offset=16
	int b2; // size=0, offset=20
	int r3; // size=0, offset=24
	int g3; // size=0, offset=28
	int b3; // size=0, offset=32
	int r4; // size=0, offset=36
	int g4; // size=0, offset=40
	int b4; // size=0, offset=44
};

struct glRGBPOLY // hashcode: 0xA7EA60CF (dec: -1477812017)
{
	unsigned char r1; // size=0, offset=0
	unsigned char g1; // size=0, offset=1
	unsigned char b1; // size=0, offset=2
	unsigned char code1; // size=0, offset=3
	unsigned char r2; // size=0, offset=4
	unsigned char g2; // size=0, offset=5
	unsigned char b2; // size=0, offset=6
	unsigned char code2; // size=0, offset=7
	unsigned char r3; // size=0, offset=8
	unsigned char g3; // size=0, offset=9
	unsigned char b3; // size=0, offset=10
	unsigned char code3; // size=0, offset=11
	unsigned char r4; // size=0, offset=12
	unsigned char g4; // size=0, offset=13
	unsigned char b4; // size=0, offset=14
	unsigned char code4; // size=0, offset=15
};

struct RgbBlockInf // hashcode: 0xAD6F44B5 (dec: -1385216843)
{
	int FromValR; // size=0, offset=0
	int ToValR; // size=0, offset=4
	int FromValG; // size=0, offset=8
	int ToValG; // size=0, offset=12
	int FromValB; // size=0, offset=16
	int ToValB; // size=0, offset=20
};

struct RGBPOINT // hashcode: 0x85097565 (dec: -2062977691)
{
	int r; // size=0, offset=0
	int g; // size=0, offset=4
	int b; // size=0, offset=8
};

struct RGBData // hashcode: 0x099DA924 (dec: 161327396)
{
	struct glRGBPOLY rgbb; // size=16, offset=0
	struct RGBPOINT rgb_ity1; // size=12, offset=16
	struct RGBPOINT rgb_ity2; // size=12, offset=28
};

struct CBlocks // hashcode: 0x7F5ACC46 (dec: 2136656966)
{
	struct TextDat TextDat; // size=112, offset=0
	struct TextDat *MonstTexDat; // size=112, offset=112
	struct TextDat *ObjTexDat; // size=112, offset=116
	struct MonstList *MonsterList; // size=16, offset=120
	int RndX; // size=0, offset=124
	int RndY; // size=0, offset=128
	int MonstTexId; // size=0, offset=132
	long hndBlocks; // size=0, offset=136
	int ObjTexId; // size=0, offset=140
	int ItemTexId; // size=0, offset=144
	struct TextDat *ItemTexDat; // size=112, offset=148
	int BgTexId; // size=0, offset=152
	struct TextDat *BgTexDat; // size=112, offset=156
	int pOtPos[2]; // size=8, offset=160
	void * IsTown; // size=0, offset=168
	int NumOfBlocks; // size=0, offset=172
	struct LittleGt4 *Gt4s; // size=16, offset=176
	long hndGt4s; // size=0, offset=180
	struct RECT *Rects; // size=8, offset=184
	long hndRects; // size=0, offset=188
	struct RECT ClipRect; // size=8, offset=192
	int StX; // size=0, offset=200
	int StY; // size=0, offset=204
	int Mx; // size=0, offset=208
	int My; // size=0, offset=212
	int pBlockX[2]; // size=8, offset=216
	int pBlockY[2]; // size=8, offset=224
	int CursX; // size=0, offset=232
	int CursY; // size=0, offset=236
	struct RgbBlockInf GlBlockInf; // size=24, offset=240
};

struct Dialog // hashcode: 0x2DED1850 (dec: 770512976)
{
	int BevelGfx; // size=0, offset=0
	int BorderGfx; // size=0, offset=4
	int BackGfx; // size=0, offset=8
	int DialogOTpos; // size=0, offset=12
};

struct DB // hashcode: 0x298CE0C3 (dec: 697098435)
{
	struct DRAWENV draw; // size=92, offset=0
	struct DISPENV disp; // size=20, offset=92
};

struct PlayerStruct // hashcode: 0x05F13A4C (dec: 99695180)
{
	enum PLR_MODE _pmode; // size=4, offset=0
	char walkpath[25]; // size=25, offset=4
	unsigned char plractive; // size=0, offset=29
	char destAction; // size=0, offset=30
	char destParam1; // size=0, offset=31
	char destParam2; // size=0, offset=32
	char destParam3; // size=0, offset=33
	char destParam4; // size=0, offset=34
	int plrlevel; // size=0, offset=36
	int WorldX; // size=0, offset=40
	int WorldY; // size=0, offset=44
	short _px; // size=0, offset=48
	short _py; // size=0, offset=50
	short _pownerx; // size=0, offset=52
	short _pownery; // size=0, offset=54
	short _poldx; // size=0, offset=56
	short _poldy; // size=0, offset=58
	char _pxoff; // size=0, offset=60
	char _pyoff; // size=0, offset=61
	short _pxvel; // size=0, offset=62
	short _pyvel; // size=0, offset=64
	char _pdir; // size=0, offset=66
	char _pgfxnum; // size=0, offset=67
	unsigned char *_pAnimData; // size=0, offset=68
	int _pAnimDelay; // size=0, offset=72
	int _pAnimCnt; // size=0, offset=76
	int _pAnimLen; // size=0, offset=80
	int _pAnimFrame; // size=0, offset=84
	char _pAnimWidth; // size=0, offset=88
	char _pAnimWidth2; // size=0, offset=89
	char DeadLevel; // size=0, offset=90
	char _plid; // size=0, offset=91
	char _pvid; // size=0, offset=92
	char _pSpell; // size=0, offset=93
	char _pSplType; // size=0, offset=94
	char _pSplFrom; // size=0, offset=95
	char _pTSpell; // size=0, offset=96
	char _pTSplType; // size=0, offset=97
	int _pRSpell; // size=0, offset=100
	char _pRSplType; // size=0, offset=104
	int _pSBkSpell; // size=0, offset=108
	char _pSBkSplType; // size=0, offset=112
	char _pSplLvl[64]; // size=64, offset=113
	int garbage180;
	qword _pMemSpells; // size=0, offset=184
	qword _pAblSpells; // size=0, offset=192
	qword _pScrlSpells; // size=0, offset=200
	char _pSpellFlags; // size=0, offset=208
	char _pwtype; // size=0, offset=209
	unsigned char _pBlockFlag; // size=0, offset=210
	unsigned char _pInvincible; // size=0, offset=211
	char _pLightRad; // size=0, offset=212
	unsigned char _pLvlChanging; // size=0, offset=213
	char _pName[32]; // size=32, offset=214
	char _pClass; // size=0, offset=246
	short _pStrength; // size=0, offset=248
	short _pBaseStr; // size=0, offset=250
	short _pMagic; // size=0, offset=252
	short _pBaseMag; // size=0, offset=254
	short _pDexterity; // size=0, offset=256
	short _pBaseDex; // size=0, offset=258
	short _pVitality; // size=0, offset=260
	short _pBaseVit; // size=0, offset=262
	int _pStatPts; // size=0, offset=264
	int _pDamageMod; // size=0, offset=268
	int _pBaseToBlk; // size=0, offset=272
	long _pHPBase; // size=0, offset=276
	long _pMaxHPBase; // size=0, offset=280
	long _pHitPoints; // size=0, offset=284
	long _pMaxHP; // size=0, offset=288
	int _pHPPer; // size=0, offset=292
	long _pManaBase; // size=0, offset=296
	long _pMaxManaBase; // size=0, offset=300
	long _pMana; // size=0, offset=304
	long _pMaxMana; // size=0, offset=308
	int _pManaPer; // size=0, offset=312
	char _pLevel; // size=0, offset=316
	char _pMaxLvl; // size=0, offset=317
	long _pExperience; // size=0, offset=320
	long _pMaxExp; // size=0, offset=324
	long _pNextExper; // size=0, offset=328
	char _pArmorClass; // size=0, offset=332
	char _pMagResist; // size=0, offset=333
	char _pFireResist; // size=0, offset=334
	char _pLghtResist; // size=0, offset=335
	long _pGold; // size=0, offset=336
	unsigned char _pInfraFlag; // size=0, offset=340
	short _pVar1; // size=0, offset=342
	short _pVar2; // size=0, offset=344
	short _pVar3; // size=0, offset=346
	short _pVar4; // size=0, offset=348
	short _pVar5; // size=0, offset=350
	short _pVar6; // size=0, offset=352
	short _pVar7; // size=0, offset=354
	short _pVar8; // size=0, offset=356
	unsigned char _pLvlVisited[17]; // size=17, offset=358
	unsigned char _pSLvlVisited[10]; // size=10, offset=375
	int _pGFXLoad; // size=0, offset=388
	unsigned char peq; // size=0, offset=392
	int _pAFNum; // size=0, offset=396
	int _pNFrames; // size=0, offset=400
	int _pWFrames; // size=0, offset=404
	int _pAFrames; // size=0, offset=408
	int _pSFrames; // size=0, offset=412
	int _pSFNum; // size=0, offset=416
	int _pHFrames; // size=0, offset=420
	int _pDFrames; // size=0, offset=424
	int _pBFrames; // size=0, offset=428
	struct ItemStruct InvBody[7]; // size=756, offset=432
	struct ItemStruct InvList[40]; // size=4320, offset=1188
	int _pNumInv; // size=0, offset=5508
	char InvGrid[40]; // size=40, offset=5512
	struct ItemStruct SpdList[8]; // size=864, offset=5552
	struct ItemStruct HoldItem; // size=108, offset=6416
	int inv_highlight; // size=0, offset=6524
	int body_highlight; // size=0, offset=6528
	int holdinv_x; // size=0, offset=6532
	int holdinv_y; // size=0, offset=6536
	int holdbody_loc; // size=0, offset=6540
	int _pIMinDam; // size=0, offset=6544
	int _pIMaxDam; // size=0, offset=6548
	int _pIAC; // size=0, offset=6552
	int _pIBonusDam; // size=0, offset=6556
	int _pIBonusToHit; // size=0, offset=6560
	int _pIBonusAC; // size=0, offset=6564
	int _pIBonusDamMod; // size=0, offset=6568
	int garbage6572;
	qword _pISpells; // size=0, offset=6576
	long _pIFlags; // size=0, offset=6584
	int _pIGetHit; // size=0, offset=6588
	char _pISplLvlAdd; // size=0, offset=6592
	char _pISplCost; // size=0, offset=6593
	int _pISplDur; // size=0, offset=6596
	int _pIEnAc; // size=0, offset=6600
	int _pIFMinDam; // size=0, offset=6604
	int _pIFMaxDam; // size=0, offset=6608
	int _pILMinDam; // size=0, offset=6612
	int _pILMaxDam; // size=0, offset=6616
	int _pOilType; // size=0, offset=6620
	unsigned char pTownWarps; // size=0, offset=6624
	unsigned char pDungMsgs; // size=0, offset=6625
	unsigned char pLvlLoad; // size=0, offset=6626
	unsigned long pDiabloKillLevel; // size=0, offset=6628
};

struct controller_pos // hashcode: 0xED854B2C (dec: -310031572)
{
	int rx; // size=0, offset=0
	int ry; // size=0, offset=4
	int rz; // size=0, offset=8
	int tx; // size=0, offset=12
	int ty; // size=0, offset=16
	int tz; // size=0, offset=20
	int px; // size=0, offset=24
	int py; // size=0, offset=28
	int srx; // size=0, offset=32
	int sry; // size=0, offset=36
	int srz; // size=0, offset=40
	int stx; // size=0, offset=44
	int sty; // size=0, offset=48
	int stz; // size=0, offset=52
	int spx; // size=0, offset=56
	int spy; // size=0, offset=60
};

struct pad_assigns // hashcode: 0x7770D122 (dec: 2003882274)
{
	char *txt; // size=0, offset=0
	int pnum; // size=0, offset=4
	char font_num; // size=0, offset=8
};

struct KEY_ASSIGNS // hashcode: 0x961B6644 (dec: -1776589244)
{
	int txt; // size=0, offset=0
	int pad_val; // size=0, offset=4
	void (*func)(); // size=0, offset=8
	int combo_val; // size=0, offset=12
};

struct CPlayer // hashcode: 0x0EBB00D3 (dec: 247136467)
{
	struct TextDat TextDat; // size=112, offset=0
	long hndDatMem; // size=0, offset=112
	unsigned short NumOfPlayers; // size=0, offset=116
	void * InTown; // size=0, offset=120
	unsigned short PlayerNum; // size=0, offset=124
	unsigned short Tpage; // size=0, offset=126
	int TexId; // size=0, offset=128
	int LastScrX; // size=0, offset=132
	int LastScrY; // size=0, offset=136
	int LastOtPos; // size=0, offset=140
};

struct SpellTarget // hashcode: 0xD9E56A79 (dec: -639276423)
{
	unsigned char forcespell; // size=0, offset=0
	void * active; // size=0, offset=4
	short _sx; // size=0, offset=8
	short _sy; // size=0, offset=10
	short _nsx; // size=0, offset=12
	short _nsy; // size=0, offset=14
	unsigned char _stx; // size=0, offset=16
	unsigned char _sty; // size=0, offset=17
	void * changed; // size=0, offset=20
	struct PlayerStruct *player; // size=6632, offset=24
	int pnum; // size=0, offset=28
	int angle; // size=0, offset=32
	int spotid; // size=0, offset=36
	short lastx[8]; // size=16, offset=40
	short lasty[8]; // size=16, offset=56
};

struct GamePad // hashcode: 0x79EC90CE (dec: 2045546702)
{
	struct PlayerStruct *player; // size=6632, offset=0
	struct SpellTarget spell; // size=72, offset=4
	char pnum; // size=0, offset=76
	char allow_walking; // size=0, offset=77
	char style; // size=0, offset=78
	int pad_up_button; // size=0, offset=80
	void (*pad_up_action)(); // size=0, offset=84
	struct CPad *Pad; // size=236, offset=88
	int combo_key; // size=0, offset=92
	void ((*button_down[14]))(); // size=56, offset=96
	void ((*button_combo[14]))(); // size=56, offset=152
	unsigned char await_combo; // size=0, offset=208
	unsigned char combo_menu_active; // size=0, offset=209
};

struct found_objects // hashcode: 0x47D7CCEE (dec: 1205325038)
{
	char index; // size=0, offset=0
	char x; // size=0, offset=1
	char y; // size=0, offset=2
};

struct CdlLOC // hashcode: 0x74155197 (dec: 1947554199)
{
	unsigned char minute; // size=0, offset=0
	unsigned char second; // size=0, offset=1
	unsigned char sector; // size=0, offset=2
	unsigned char track; // size=0, offset=3
};

struct CdlFILTER // hashcode: 0x9B3FDFAF (dec: -1690312785)
{
	unsigned char file; // size=0, offset=0
	unsigned char chan; // size=0, offset=1
	unsigned short pad; // size=0, offset=2
};

struct CdlATV // hashcode: 0xC51E2EBE (dec: -987877698)
{
	unsigned char val0; // size=0, offset=0
	unsigned char val1; // size=0, offset=1
	unsigned char val2; // size=0, offset=2
	unsigned char val3; // size=0, offset=3
};

struct CdlFILE // hashcode: 0x7E8E120A (dec: 2123239946)
{
	struct CdlLOC pos; // size=4, offset=0
	unsigned long size; // size=0, offset=4
	char name[16]; // size=16, offset=8
};

struct StHEADER // hashcode: 0x5E713FA4 (dec: 1584480164)
{
	unsigned short id; // size=0, offset=0
	unsigned short type; // size=0, offset=2
	unsigned short secCount; // size=0, offset=4
	unsigned short nSectors; // size=0, offset=6
	unsigned long frameCount; // size=0, offset=8
	unsigned long frameSize; // size=0, offset=12
	unsigned short width; // size=0, offset=16
	unsigned short height; // size=0, offset=18
	unsigned long dummy1; // size=0, offset=20
	unsigned long dummy2; // size=0, offset=24
	struct CdlLOC loc; // size=4, offset=28
};

struct PCIO // hashcode: 0xDC5239F3 (dec: -598590989)
{
	struct FileIO FileIO; // size=20, offset=0
};

struct CdIO // hashcode: 0xCB38A726 (dec: -885479642)
{
	struct FileIO FileIO; // size=20, offset=0
};

struct DList // hashcode: 0x3D7EA7DF (dec: 1031710687)
{
	struct SysObj SysObj; // size=4, offset=0
	int XRot; // size=0, offset=4
	int YRot; // size=0, offset=8
	int ZRot; // size=0, offset=12
	struct MATRIX MyRotMatrix; // size=32, offset=16
	struct MATRIX MyTransMatrix; // size=32, offset=48
	struct VECTOR Out[4]; // size=64, offset=80
	struct SVECTOR In[4]; // size=32, offset=144
};

struct ARGB // hashcode: 0x7C5FA42B (dec: 2086642731)
{
	unsigned char b; // size=0, offset=0
	unsigned char g; // size=0, offset=1
	unsigned char r; // size=0, offset=2
	unsigned char a; // size=0, offset=3
};

struct shapetbl // hashcode: 0x9DAC7C67 (dec: -1649640345)
{
	unsigned int type; // size=8, offset=0
	int next; // size=24, offset=8
	short width; // size=0, offset=4
	short height; // size=0, offset=6
	short centerx; // size=0, offset=8
	short centery; // size=0, offset=10
	int shapex; // size=12, offset=96
	int reserved; // size=2, offset=108
	int transposed; // size=1, offset=110
	int rotated; // size=1, offset=111
	int shapey; // size=12, offset=112
	int mipmaps; // size=4, offset=124
	char data; // size=0, offset=16
};

struct windowtbl // hashcode: 0x322238EB (dec: 841103595)
{
	long id; // size=0, offset=0
	int x; // size=0, offset=4
	int y; // size=0, offset=8
	int width; // size=0, offset=12
	int height; // size=0, offset=16
	unsigned char bpp; // size=0, offset=20
	unsigned char type; // size=0, offset=21
	unsigned char ram; // size=0, offset=22
	unsigned char unused; // size=0, offset=23
	int minx; // size=0, offset=24
	int miny; // size=0, offset=28
	int maxx; // size=0, offset=32
	int maxy; // size=0, offset=36
	struct shapetbl *shape; // size=20, offset=40
	struct DISPENV dispenv; // size=20, offset=44
	struct DRAWENV drawenv; // size=92, offset=64
};

struct coorddef // hashcode: 0xE375FA40 (dec: -478807488)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int z; // size=0, offset=8
};

struct scoorddef // hashcode: 0x1FDCD330 (dec: 534565680)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
};

struct matrixtdef // hashcode: 0x7EE56219 (dec: 2128962073)
{
	int m[9]; // size=36, offset=0
};

struct TSPRT // hashcode: 0x917AB02F (dec: -1854230481)
{
	unsigned char a0; // size=0, offset=0
	unsigned char a1; // size=0, offset=1
	unsigned char a2; // size=0, offset=2
	unsigned char len; // size=0, offset=3
	unsigned long tpage; // size=0, offset=4
	unsigned char r; // size=0, offset=8
	unsigned char g; // size=0, offset=9
	unsigned char b; // size=0, offset=10
	unsigned char code; // size=0, offset=11
	unsigned long xy; // size=0, offset=12
	unsigned char u; // size=0, offset=16
	unsigned char v; // size=0, offset=17
	unsigned short clut; // size=0, offset=18
	unsigned long wh; // size=0, offset=20
};

struct memclassstruct // hashcode: 0x02774D49 (dec: 41373001)
{
	char **bottomblock; // size=0, offset=0
	char **topblock; // size=0, offset=4
	int pad; // size=0, offset=8
	int align; // size=0, offset=12
	int cache; // size=0, offset=16
	int sentinel; // size=0, offset=20
};

struct FONTFILE // hashcode: 0x10380FEA (dec: 272109546)
{
	unsigned long type; // size=0, offset=0
	unsigned char first; // size=0, offset=4
	unsigned char last; // size=0, offset=5
	unsigned char maxwidth; // size=0, offset=6
	unsigned char maxheight; // size=0, offset=7
	unsigned char space; // size=0, offset=8
	unsigned char yinc; // size=0, offset=9
	unsigned char baseline; // size=0, offset=10
	char pad1; // size=0, offset=11
	char filesize[4]; // size=4, offset=12
	int palette; // size=16, offset=128
	int width; // size=16, offset=144
	int height; // size=16, offset=160
	int xinc; // size=16, offset=176
	int xoffset; // size=16, offset=192
	int yoffset; // size=16, offset=208
	long shape; // size=0, offset=28
};

struct coordsdef // hashcode: 0x6D46092A (dec: 1833306410)
{
	int frames; // size=0, offset=0
	int coords; // size=0, offset=4
	struct coorddef point[40]; // size=480, offset=8
};

struct linedef // hashcode: 0x219FC10C (dec: 564117772)
{
	int start; // size=0, offset=0
	int end; // size=0, offset=4
	int colour; // size=0, offset=8
	int thickness; // size=0, offset=12
};

struct linesdef // hashcode: 0x42F5C446 (dec: 1123402822)
{
	int lines; // size=0, offset=0
	int basex; // size=0, offset=4
	int basey; // size=0, offset=8
	int basez; // size=0, offset=12
	struct linedef line[40]; // size=640, offset=16
};

struct dirangledef // hashcode: 0x04B74A2C (dec: 79120940)
{
	int heading; // size=0, offset=0
	int pitch; // size=0, offset=4
	int roll; // size=0, offset=8
};

struct arcangledef // hashcode: 0x3C47DB1A (dec: 1011342106)
{
	int orientation; // size=0, offset=0
	int heading; // size=0, offset=4
	int pitch; // size=0, offset=8
	int roll; // size=0, offset=12
	int vheading; // size=0, offset=16
	int vpitch; // size=0, offset=20
	int vroll; // size=0, offset=24
};

struct SHAPETABLEENTRY // hashcode: 0xEDA2036F (dec: -308149393)
{
	char id[4]; // size=4, offset=0
	long offset; // size=0, offset=4
};

struct SHAPEFILE // hashcode: 0x08B94C78 (dec: 146361464)
{
	char type[4]; // size=4, offset=0
	long len; // size=0, offset=4
	long num; // size=0, offset=8
	char creator[4]; // size=4, offset=12
	struct SHAPETABLEENTRY tbl[1]; // size=8, offset=16
};

struct radialsymdef // hashcode: 0x1999D7A8 (dec: 429512616)
{
	int maxindex; // size=0, offset=0
	int shiftcount; // size=0, offset=4
	int delta; // size=0, offset=8
	int scalefactor; // size=0, offset=12
	struct shapetbl **shapes; // size=20, offset=16
};

struct graphicsmodeinfostruct // hashcode: 0x6BFE4526 (dec: 1811825958)
{
	int width; // size=0, offset=0
	int height; // size=0, offset=4
	int bpp; // size=0, offset=8
	int shapetype; // size=0, offset=12
	int banked; // size=1, offset=128
	int pagedbanks; // size=1, offset=129
	int modex; // size=1, offset=130
	int pageflip; // size=1, offset=131
	int zbuffer; // size=1, offset=132
	int hwdram; // size=1, offset=133
	int hwblit; // size=1, offset=134
	int hwfill; // size=1, offset=135
	int hwscale; // size=1, offset=136
	int hwtmask; // size=1, offset=137
	int hwtexture; // size=1, offset=138
	int hwvbl; // size=1, offset=139
};

struct chunkhdrstruct // hashcode: 0xF49A26DB (dec: -191224101)
{
	int type; // size=0, offset=0
	int size; // size=0, offset=4
};

struct chunkhdrchkstruct // hashcode: 0xA820B936 (dec: -1474250442)
{
	int type; // size=0, offset=0
	int size; // size=0, offset=4
	int crc; // size=0, offset=8
};

struct UNIQUEID // hashcode: 0x8D32D2F2 (dec: -1926049038)
{
	unsigned long a; // size=0, offset=0
	unsigned short b; // size=0, offset=4
	unsigned short c; // size=0, offset=6
	unsigned char d[8]; // size=8, offset=8
};

struct threadstruct // hashcode: 0x6C378D43 (dec: 1815579971)
{
	int item; // size=0, offset=0
	int stacksize; // size=0, offset=4
	int priority; // size=0, offset=8
	int processor; // size=0, offset=12
};

struct cdstreamstruct // hashcode: 0x565E78AF (dec: 1449031855)
{
	long id; // size=0, offset=0
	char *start; // size=0, offset=4
	char *end; // size=0, offset=8
	char *write; // size=0, offset=12
	char *header; // size=0, offset=16
	char *get; // size=0, offset=20
	char *release; // size=0, offset=24
	int handle; // size=0, offset=28
	int state; // size=0, offset=32
	int control; // size=0, offset=36
	int status; // size=0, offset=40
	int abort; // size=0, offset=44
	int datahascrc; // size=0, offset=48
	int crcerrors; // size=0, offset=52
	int crcretries; // size=0, offset=56
	int buffersize; // size=0, offset=60
	long blocksize; // size=0, offset=64
	int readsize; // size=0, offset=68
	int chunksize; // size=0, offset=72
	int relocationsize; // size=0, offset=76
	long fileoffset; // size=0, offset=80
	int fileend; // size=0, offset=84
	long filesize; // size=0, offset=88
	int dataoffset; // size=0, offset=92
	int seekposition; // size=0, offset=96
	int seekoffset; // size=0, offset=100
	int idtype; // size=0, offset=104
	int idmask; // size=0, offset=108
	struct cdstreamstruct *nextstream; // size=152, offset=112
	void *emptyblock; // size=0, offset=116
	void *head; // size=0, offset=120
	void *tail; // size=0, offset=124
	void *block; // size=0, offset=128
	int timer; // size=0, offset=132
	int blocktime; // size=0, offset=136
	int streamfull; // size=0, offset=140
	int getable; // size=0, offset=144
	int releaseable; // size=0, offset=148
};

struct STREAM // hashcode: 0x6FB42276 (dec: 1874076278)
{
	unsigned long Offset; // size=0, offset=0
	unsigned long Size; // size=0, offset=4
	unsigned char Name[12]; // size=12, offset=8
};

struct STRHDR // hashcode: 0x14BBE531 (dec: 347858225)
{
	unsigned char Name[12]; // size=12, offset=0
	unsigned long Offset; // size=0, offset=12
	int Size; // size=0, offset=16
};

struct SFXHDR // hashcode: 0xAC4F07DF (dec: -1404106785)
{
	char used; // size=0, offset=0
	char loop; // size=0, offset=1
	char playing; // size=0, offset=2
	char state; // size=0, offset=3
	void * TaskAlive; // size=0, offset=4
	struct STRHDR *StreamHND; // size=20, offset=8
	unsigned char type; // size=0, offset=12
	unsigned char ChunkGot; // size=0, offset=13
	int voice; // size=0, offset=16
	int volume; // size=0, offset=20
	int s_volume; // size=0, offset=24
	int pitch; // size=0, offset=28
	int stream_sec; // size=0, offset=32
	int stream_offs; // size=0, offset=36
	int stream_read; // size=0, offset=40
	int stream_stall; // size=0, offset=44
	int stream_pos; // size=0, offset=48
	int SPU_frame; // size=0, offset=52
	int SPU_sec; // size=0, offset=56
	int SPU_pos; // size=0, offset=60
	int SPUstreamaddr; // size=0, offset=64
	int framecount; // size=0, offset=68
	int lastcount; // size=0, offset=72
	int sec_num; // size=0, offset=76
	int SPU_sec_num; // size=0, offset=80
	int ah; // size=0, offset=84
	int stream_ending; // size=0, offset=88
	int DMA_size; // size=0, offset=92
	int spu_rate; // size=0, offset=96
	int SizeIn; // size=0, offset=100
	unsigned char *mem; // size=0, offset=104
	unsigned long stream_playing; // size=0, offset=108
	int SfxNo; // size=0, offset=112
	char name[14]; // size=14, offset=116
};

struct DECDCTENV // hashcode: 0x9D2CD878 (dec: -1658005384)
{
	unsigned char iq_y[64]; // size=64, offset=0
	unsigned char iq_c[64]; // size=64, offset=64
	short dct[64]; // size=128, offset=128
};

struct ENCSPUENV // hashcode: 0x1289E4CC (dec: 311026892)
{
	short *src; // size=0, offset=0
	short *dest; // size=0, offset=4
	short *work; // size=0, offset=8
	long size; // size=0, offset=12
	long loop_start; // size=0, offset=16
	char loop; // size=0, offset=20
	char byte_swap; // size=0, offset=21
	char proceed; // size=0, offset=22
	char pad4; // size=0, offset=23
};

struct SpuVolume // hashcode: 0x994F26DA (dec: -1722865958)
{
	short left; // size=0, offset=0
	short right; // size=0, offset=2
};

struct SpuVoiceAttr // hashcode: 0xB640B97E (dec: -1237272194)
{
	unsigned long voice; // size=0, offset=0
	unsigned long mask; // size=0, offset=4
	struct SpuVolume volume; // size=4, offset=8
	struct SpuVolume volmode; // size=4, offset=12
	struct SpuVolume volumex; // size=4, offset=16
	unsigned short pitch; // size=0, offset=20
	unsigned short note; // size=0, offset=22
	unsigned short sample_note; // size=0, offset=24
	short envx; // size=0, offset=26
	unsigned long addr; // size=0, offset=28
	unsigned long loop_addr; // size=0, offset=32
	long a_mode; // size=0, offset=36
	long s_mode; // size=0, offset=40
	long r_mode; // size=0, offset=44
	unsigned short ar; // size=0, offset=48
	unsigned short dr; // size=0, offset=50
	unsigned short sr; // size=0, offset=52
	unsigned short rr; // size=0, offset=54
	unsigned short sl; // size=0, offset=56
	unsigned short adsr1; // size=0, offset=58
	unsigned short adsr2; // size=0, offset=60
};

struct SpuReverbAttr // hashcode: 0xA8FD0BAA (dec: -1459811414)
{
	unsigned long mask; // size=0, offset=0
	long mode; // size=0, offset=4
	struct SpuVolume depth; // size=4, offset=8
	long delay; // size=0, offset=12
	long feedback; // size=0, offset=16
};

struct SpuDecodedData // hashcode: 0x3433D5A2 (dec: 875812258)
{
	short cd_left[512]; // size=1024, offset=0
	short cd_right[512]; // size=1024, offset=1024
	short voice1[512]; // size=1024, offset=2048
	short voice3[512]; // size=1024, offset=3072
};

struct SpuExtAttr // hashcode: 0x4B66BB4A (dec: 1265023818)
{
	struct SpuVolume volume; // size=4, offset=0
	long reverb; // size=0, offset=4
	long mix; // size=0, offset=8
};

struct SpuCommonAttr // hashcode: 0x9F71AB93 (dec: -1619940461)
{
	unsigned long mask; // size=0, offset=0
	struct SpuVolume mvol; // size=4, offset=4
	struct SpuVolume mvolmode; // size=4, offset=8
	struct SpuVolume mvolx; // size=4, offset=12
	struct SpuExtAttr cd; // size=12, offset=16
	struct SpuExtAttr ext; // size=12, offset=28
};

struct SpuEnv // hashcode: 0xD1CC7BD3 (dec: -775128109)
{
	unsigned long mask; // size=0, offset=0
	unsigned long queueing; // size=0, offset=4
};

struct SpuStVoiceAttr // hashcode: 0x3DD9DD13 (dec: 1037688083)
{
	char status; // size=0, offset=0
	char pad1; // size=0, offset=1
	char pad2; // size=0, offset=2
	char pad3; // size=0, offset=3
	long last_size; // size=0, offset=4
	unsigned long buf_addr; // size=0, offset=8
	unsigned long data_addr; // size=0, offset=12
};

struct SpuStEnv // hashcode: 0xAC07CEFF (dec: -1408774401)
{
	long size; // size=0, offset=0
	long low_priority; // size=0, offset=4
	struct SpuStVoiceAttr voice[24]; // size=384, offset=8
};

struct VabHdr // hashcode: 0x900AC9F3 (dec: -1878341133)
{
	long form; // size=0, offset=0
	long ver; // size=0, offset=4
	long id; // size=0, offset=8
	unsigned long fsize; // size=0, offset=12
	unsigned short reserved0; // size=0, offset=16
	unsigned short ps; // size=0, offset=18
	unsigned short ts; // size=0, offset=20
	unsigned short vs; // size=0, offset=22
	unsigned char mvol; // size=0, offset=24
	unsigned char pan; // size=0, offset=25
	unsigned char attr1; // size=0, offset=26
	unsigned char attr2; // size=0, offset=27
	unsigned long reserved1; // size=0, offset=28
};

struct ProgAtr // hashcode: 0x9821B94A (dec: -1742620342)
{
	unsigned char tones; // size=0, offset=0
	unsigned char mvol; // size=0, offset=1
	unsigned char prior; // size=0, offset=2
	unsigned char mode; // size=0, offset=3
	unsigned char mpan; // size=0, offset=4
	char reserved0; // size=0, offset=5
	short attr; // size=0, offset=6
	unsigned long reserved1; // size=0, offset=8
	unsigned long reserved2; // size=0, offset=12
};

struct VagAtr // hashcode: 0xFEB560EC (dec: -21667604)
{
	unsigned char prior; // size=0, offset=0
	unsigned char mode; // size=0, offset=1
	unsigned char vol; // size=0, offset=2
	unsigned char pan; // size=0, offset=3
	unsigned char center; // size=0, offset=4
	unsigned char shift; // size=0, offset=5
	unsigned char min; // size=0, offset=6
	unsigned char max; // size=0, offset=7
	unsigned char vibW; // size=0, offset=8
	unsigned char vibT; // size=0, offset=9
	unsigned char porW; // size=0, offset=10
	unsigned char porT; // size=0, offset=11
	unsigned char pbmin; // size=0, offset=12
	unsigned char pbmax; // size=0, offset=13
	unsigned char reserved1; // size=0, offset=14
	unsigned char reserved2; // size=0, offset=15
	unsigned short adsr1; // size=0, offset=16
	unsigned short adsr2; // size=0, offset=18
	short prog; // size=0, offset=20
	short vag; // size=0, offset=22
	short reserved[4]; // size=8, offset=24
};

struct SndVolume // hashcode: 0x7BED4B56 (dec: 2079148886)
{
	unsigned short left; // size=0, offset=0
	unsigned short right; // size=0, offset=2
};

struct SndVolume2 // hashcode: 0x20265E87 (dec: 539385479)
{
	short left; // size=0, offset=0
	short right; // size=0, offset=2
};

struct SndRegisterAttr // hashcode: 0x7D455672 (dec: 2101696114)
{
	struct SndVolume2 volume; // size=4, offset=0
	short pitch; // size=0, offset=4
	short mask; // size=0, offset=6
	short addr; // size=0, offset=8
	short adsr1; // size=0, offset=10
	short adsr2; // size=0, offset=12
};

struct SndVoiceStats // hashcode: 0xB7B2AA05 (dec: -1213027835)
{
	short vagId; // size=0, offset=0
	short vabId; // size=0, offset=2
	unsigned short pitch; // size=0, offset=4
	short note; // size=0, offset=6
	short tone; // size=0, offset=8
	short prog_num; // size=0, offset=10
	short prog_actual; // size=0, offset=12
	short vol; // size=0, offset=14
	short pan; // size=0, offset=16
};

struct _SsFCALL // hashcode: 0x7AE7FA7A (dec: 2062023290)
{
	void (*noteon)(); // size=0, offset=0
	void (*programchange)(); // size=0, offset=4
	void (*pitchbend)(); // size=0, offset=8
	void (*metaevent)(); // size=0, offset=12
	void ((*control[13]))(); // size=52, offset=16
	void ((*ccentry[20]))(); // size=80, offset=68
};

struct MissileStruct // hashcode: 0x44F93BC5 (dec: 1157184453)
{
	long _mixvel; // size=0, offset=0
	long _miyvel; // size=0, offset=4
	long _mitxoff; // size=0, offset=8
	long _mityoff; // size=0, offset=12
	int _midam; // size=0, offset=16
	int _mirnd; // size=0, offset=20
	unsigned short _mirange; // size=0, offset=24
	unsigned short _micaster; // size=0, offset=26
	short _midist; // size=0, offset=28
	short _miVar1; // size=0, offset=30
	short _miVar2; // size=0, offset=32
	short _miVar3; // size=0, offset=34
	short _miVar4; // size=0, offset=36
	short _miVar5; // size=0, offset=38
	short _miVar6; // size=0, offset=40
	short _miVar7; // size=0, offset=42
	short _miVar8; // size=0, offset=44
	short _misource; // size=0, offset=46
	char _mitype; // size=0, offset=48
	char _mix; // size=0, offset=49
	char _miy; // size=0, offset=50
	char _mixoff; // size=0, offset=51
	char _miyoff; // size=0, offset=52
	char _misx; // size=0, offset=53
	char _misy; // size=0, offset=54
	unsigned char _miAnimType; // size=0, offset=55
	unsigned char _miDelFlag; // size=0, offset=56
	unsigned char _miAnimFlags; // size=0, offset=57
	unsigned char _miDrawFlag; // size=0, offset=58
	unsigned char _miLightFlag; // size=0, offset=59
	unsigned char _miPreFlag; // size=0, offset=60
	unsigned char _miHitFlag; // size=0, offset=61
	char _mlid; // size=0, offset=62
	char _mimfnum; // size=0, offset=63
	char _mispllvl; // size=0, offset=64
	char _miAnimDelay; // size=0, offset=65
	char _miAnimLen; // size=0, offset=66
	char _miAnimWidth; // size=0, offset=67
	char _miAnimWidth2; // size=0, offset=68
	char _miAnimCnt; // size=0, offset=69
	char _miAnimAdd; // size=0, offset=70
	char _miAnimFrame; // size=0, offset=71
	void (*PrintPtr)(); // size=0, offset=72
};

struct SPELLFX_DAT // hashcode: 0xB3B4BBAF (dec: -1280001105)
{
	void * apocactive; // size=0, offset=0
	void * healactive; // size=0, offset=4
	int teleflag; // size=0, offset=8
	int phaseflag; // size=0, offset=12
	int inviscount; // size=0, offset=16
	int X; // size=0, offset=20
	int Y; // size=0, offset=24
	int sxoff; // size=0, offset=28
	int syoff; // size=0, offset=32
	int scrnx; // size=0, offset=36
	int scrny; // size=0, offset=40
	int px; // size=0, offset=44
	int py; // size=0, offset=48
	int yoffset; // size=0, offset=52
	int spiny1; // size=0, offset=56
	int spiny2; // size=0, offset=60
	int scale; // size=0, offset=64
	int healtime; // size=0, offset=68
};

struct Particle // hashcode: 0xF4B37B47 (dec: -189564089)
{
	int partx; // size=0, offset=0
	int party; // size=0, offset=4
	int partanim; // size=0, offset=8
	int jumpflag; // size=0, offset=12
	int jumpcount; // size=0, offset=16
	int jumpmax; // size=0, offset=20
	int dx; // size=0, offset=24
	int scale; // size=0, offset=28
	int colour; // size=0, offset=32
};

struct strheader // hashcode: 0x25465A60 (dec: 625367648)
{
	short id; // size=0, offset=0
	short type; // size=0, offset=2
	short seccount; // size=0, offset=4
	short nsectors; // size=0, offset=6
	int framecount; // size=0, offset=8
	int framesize; // size=0, offset=12
	short width; // size=0, offset=16
	short height; // size=0, offset=18
	int res[3]; // size=12, offset=20
};

struct strsec // hashcode: 0x2AE1254A (dec: 719398218)
{
	short id; // size=0, offset=0
	short type; // size=0, offset=2
	short seccount; // size=0, offset=4
	short nsectors; // size=0, offset=6
	int framecount; // size=0, offset=8
	int framesize; // size=0, offset=12
	short width; // size=0, offset=16
	short height; // size=0, offset=18
	int res[3]; // size=12, offset=20
	int data[504]; // size=2016, offset=32
};

struct mdc_header // hashcode: 0x2CCBC8A7 (dec: 751552679)
{
	char id[4]; // size=4, offset=0
	int frames; // size=0, offset=4
	int framesize; // size=0, offset=8
	int width; // size=0, offset=12
	int height; // size=0, offset=16
};

struct file_header // hashcode: 0x7AAEF3D1 (dec: 2058286033)
{
	char magic[2]; // size=2, offset=0
	char type; // size=0, offset=2
	char blockentry; // size=0, offset=3
	unsigned char title[64]; // size=64, offset=4
	char reserved[28]; // size=28, offset=68
	char clut[32]; // size=32, offset=96
	char icon[1][128]; // size=128, offset=128
	int chksum; // size=0, offset=256
	int size; // size=0, offset=260
	int id; // size=0, offset=264
	char icon2[1][116]; // size=116, offset=268
	char icon3[1][128]; // size=128, offset=384
};

struct FeTable // hashcode: 0x2260E62B (dec: 576775723)
{
	int Title; // size=0, offset=0
	int Sel; // size=0, offset=4
	int SelW; // size=0, offset=8
	int SelH; // size=0, offset=12
	void (*InitFuncPtr)(); // size=0, offset=16
	void (*CtrlFuncPtr)(); // size=0, offset=20
	void *PrevMenu; // size=0, offset=24
};

struct FeStruct // hashcode: 0x26C62297 (dec: 650519191)
{
	int X; // size=0, offset=0
	int Y; // size=0, offset=4
	enum TXT_JUST Just; // size=4, offset=8
	int Str; // size=0, offset=12
	struct CFont *Font; // size=540, offset=16
	struct FeTable *MenuPtr; // size=28, offset=20
};

struct FE_PLR // hashcode: 0x9C5AD63E (dec: -1671768514)
{
	char Name[10]; // size=10, offset=0
	int Class; // size=0, offset=12
};

struct FE_CREATE // hashcode: 0xC7F4789D (dec: -940279651)
{
	int NumOfPlayers; // size=0, offset=0
	struct FE_PLR Plrs[2]; // size=32, offset=4
};

struct OrigPkItemStruct // hashcode: 0x3654625A (dec: 911499866)
{
	int iSeed; // size=0, offset=0
	unsigned short iCreateInfo; // size=0, offset=4
	unsigned short idx; // size=0, offset=6
	unsigned char bId; // size=0, offset=8
	unsigned char bDur; // size=0, offset=9
	unsigned char bMDur; // size=0, offset=10
	unsigned char bCh; // size=0, offset=11
	unsigned char bMCh; // size=0, offset=12
	unsigned short wValue; // size=0, offset=14
	unsigned long dwBuff; // size=0, offset=16
};

struct PcPkItemStruct // hashcode: 0x0972A88B (dec: 158509195)
{
	unsigned char Shite[19]; // size=19, offset=0
};

struct PcPkPlayerStruct // hashcode: 0xB123498E (dec: -1323087474)
{
	struct FILETIME archiveTime; // size=8, offset=0
	unsigned char destAction; // size=0, offset=8
	unsigned char destParam1; // size=0, offset=9
	unsigned char destParam2; // size=0, offset=10
	unsigned char plrlevel; // size=0, offset=11
	unsigned char px; // size=0, offset=12
	unsigned char py; // size=0, offset=13
	char pName[32]; // size=32, offset=14
	unsigned char pClass; // size=0, offset=46
	unsigned char pBaseStr; // size=0, offset=47
	unsigned char pBaseMag; // size=0, offset=48
	unsigned char pBaseDex; // size=0, offset=49
	unsigned char pBaseVit; // size=0, offset=50
	unsigned char pLevel; // size=0, offset=51
	unsigned char pStatPts; // size=0, offset=52
	int pExperience; // size=32, offset=424
	int pGold; // size=32, offset=456
	int pHPBase; // size=32, offset=488
	int pMaxHPBase; // size=32, offset=520
	int pManaBase; // size=32, offset=552
	int pMaxManaBase; // size=32, offset=584
	unsigned char pSplLvl[37]; // size=37, offset=77
	int pMemSpells; // size=32, offset=912
	int pMemSpells2; // size=32, offset=944
	struct PcPkItemStruct InvBody[7]; // size=133, offset=122
	struct PcPkItemStruct InvList[40]; // size=760, offset=255
	char InvGrid[40]; // size=40, offset=1015
	unsigned char _pNumInv; // size=0, offset=1055
	struct PcPkItemStruct SpdList[8]; // size=152, offset=1056
	unsigned char Pad[24]; // size=24, offset=1208
	int pDiabloKillLevel; // size=32, offset=9856
	char DeadLevel; // size=0, offset=1236
};

struct PkItemStruct // hashcode: 0x138969CB (dec: 327772619)
{
	unsigned int dwBuff; // size=32, offset=0
	int iSeed; // size=32, offset=32
	unsigned short iCreateInfo; // size=16, offset=64
	unsigned short idx; // size=16, offset=80
	unsigned short wValue; // size=16, offset=96
	unsigned char bId; // size=8, offset=112
	unsigned char bDur; // size=8, offset=120
	unsigned char bMDur; // size=8, offset=128
	unsigned char bCh; // size=8, offset=136
	unsigned char bMCh; // size=8, offset=144
};

struct PkPlayerStruct // hashcode: 0xB6F8F1A2 (dec: -1225199198)
{
	struct PkItemStruct SpdList[8]; // size=160, offset=0
	struct PkItemStruct InvBody[7]; // size=140, offset=160
	struct PkItemStruct InvList[40]; // size=800, offset=300
	int garbage304;
	qword pMemSpells; // size=0, offset=1104
	struct FILETIME archiveTime; // size=8, offset=1112
	long pExperience; // size=0, offset=1120
	long pHPBase; // size=0, offset=1124
	long pMaxHPBase; // size=0, offset=1128
	long pManaBase; // size=0, offset=1132
	long pMaxManaBase; // size=0, offset=1136
	int pRSpell; // size=0, offset=1140
	char pName[32]; // size=32, offset=1144
	char InvGrid[40]; // size=40, offset=1176
	unsigned char pSplLvl[37]; // size=37, offset=1216
	unsigned char destAction; // size=0, offset=1253
	unsigned char destParam1; // size=0, offset=1254
	unsigned char destParam2; // size=0, offset=1255
	unsigned char plrlevel; // size=0, offset=1256
	unsigned char pClass; // size=0, offset=1257
	unsigned char pBaseStr; // size=0, offset=1258
	unsigned char pBaseMag; // size=0, offset=1259
	unsigned char pBaseDex; // size=0, offset=1260
	unsigned char pBaseVit; // size=0, offset=1261
	unsigned char pLevel; // size=0, offset=1262
	unsigned char pStatPts; // size=0, offset=1263
	char DeadLevel; // size=0, offset=1264
	unsigned char _pNumInv; // size=0, offset=1265
	char pRSplType; // size=0, offset=1266
};

struct CharDataStructDef // hashcode: 0xA484DB49 (dec: -1534796983)
{
	struct PkPlayerStruct CharSlots[6]; // size=7632, offset=0
	char ToggleSave[6]; // size=6, offset=7632
	char spltypesave[6]; // size=6, offset=7638
};

struct LOAD_IMAGE_ARGS // hashcode: 0x097953AA (dec: 158946218)
{
	struct RECT Rect; // size=8, offset=0
	unsigned int UseAddr; // size=1, offset=64
	unsigned int DiscardAfterDump; // size=1, offset=65
	unsigned int IsMove; // size=1, offset=66
	int Offset; // size=0, offset=12
	long ImgHandle; // size=0, offset=16
	void *Addr; // size=0, offset=20
	unsigned short DestX; // size=0, offset=24
	unsigned short DestY; // size=0, offset=26
};

struct PRIM_BUFFER // hashcode: 0xB7FBF9CA (dec: -1208223286)
{
	struct POLY_FT4 *Prims; // size=40, offset=0
	struct POLY_FT4 *EndAddr; // size=40, offset=4
	unsigned long *OtList; // size=0, offset=8
	unsigned char Drawing; // size=0, offset=12
	int OtSize; // size=0, offset=16
	long hndOtList; // size=0, offset=20
	long hndPrims; // size=0, offset=24
};

struct TP_LINK // hashcode: 0xCF164DEF (dec: -820621841)
{
	struct TPAGE_DEF *Next; // size=0, offset=0
	struct TPAGE_DEF *Prev; // size=0, offset=4
};

struct TPAGE_DEF // hashcode: 0x534F5827 (dec: 1397708839)
{
	union {
		struct TP_LINK TpLink; // size=8, offset=0
		struct DR_TPAGE DrTpage; // size=8, offset=0
	} LPage; // size=8, offset=0, found in object files: ,
	unsigned char TpageMode; // size=0, offset=8
	unsigned char Offset; // size=0, offset=9
	unsigned char Height; // size=0, offset=10
	unsigned char Indent; // size=0, offset=11
	unsigned char Width; // size=0, offset=12
	unsigned char Num; // size=0, offset=13
};

struct MEM_INFO // hashcode: 0x6981D501 (dec: 1770116353)
{
	void *Addr; // size=0, offset=0
	unsigned long Size; // size=0, offset=4
};

struct LNK_OPTS // hashcode: 0xEE08DA62 (dec: -301409694)
{
	unsigned long RamSize; // size=0, offset=0
	unsigned long StackSize; // size=0, offset=4
	void *OrgAddress; // size=0, offset=8
	void *FreeMemAddress; // size=0, offset=12
	unsigned long FreeMemSize; // size=0, offset=16
	enum FILE_SYSTEM FileSystem; // size=4, offset=20
	enum DEV_KIT DevKit; // size=4, offset=24
	unsigned long NoQuests; // size=0, offset=28
};

struct DatIO // hashcode: 0x900B429B (dec: -1878310245)
{
	struct FileIO FileIO; // size=20, offset=0
};

struct bank_entry // hashcode: 0xDFE81C00 (dec: -538436608)
{
	unsigned short Name; // size=0, offset=0
	unsigned long offset; // size=0, offset=4
	unsigned short len; // size=0, offset=8
	unsigned short pitch; // size=0, offset=10
};

struct PanelXY // hashcode: 0xC56791B9 (dec: -983068231)
{
	int MainX; // size=0, offset=0
	int MainY; // size=0, offset=4
	int FlaskFlip; // size=0, offset=8
	int SpeedBarXOfs; // size=0, offset=12
	int SpeedBarYOfs; // size=0, offset=16
	int SpellXOfs; // size=0, offset=20
	int SpellYOfs; // size=0, offset=24
	int LevelUpXOfs; // size=0, offset=28
	int LevelUpYOfs; // size=0, offset=32
	int MsgX; // size=0, offset=36
	int MsgY; // size=0, offset=40
	int MsgW; // size=0, offset=44
	int MsgH; // size=0, offset=48
	int HeadDurX; // size=0, offset=52
	int HeadDurY; // size=0, offset=56
	int BodyDurX; // size=0, offset=60
	int BodyDurY; // size=0, offset=64
	int Hand0DurX; // size=0, offset=68
	int Hand0DurY; // size=0, offset=72
	int Hand1DurX; // size=0, offset=76
	int Hand1DurY; // size=0, offset=80
	unsigned char WhichPlayerDoesThisPanelReallyBelongToThen; // size=0, offset=84
};

struct GPanel // hashcode: 0x6018E252 (dec: 1612243538)
{
	int HealthAnimCount; // size=0, offset=0
	int ManaAnimCount; // size=0, offset=4
	int GlobeAnimCount; // size=0, offset=8
	struct RECT MsgRect; // size=8, offset=12
	struct TextDat *PanelTData; // size=112, offset=20
	int GPanelOt; // size=0, offset=24
};

struct RgbTest // hashcode: 0xE256E50F (dec: -497621745)
{
	unsigned long Scale; // size=0, offset=0
	unsigned long IR0; // size=0, offset=4
	unsigned long IR1; // size=0, offset=8
	unsigned long IR2; // size=0, offset=12
	unsigned char r0; // size=0, offset=16
	unsigned char g0; // size=0, offset=17
	unsigned char b0; // size=0, offset=18
	unsigned char pad0; // size=0, offset=19
	unsigned char r1; // size=0, offset=20
	unsigned char g1; // size=0, offset=21
	unsigned char b1; // size=0, offset=22
	unsigned char pad1; // size=0, offset=23
	unsigned char res_r; // size=0, offset=24
	unsigned char res_g; // size=0, offset=25
	unsigned char res_b; // size=0, offset=26
	unsigned char pad2; // size=0, offset=27
};

struct DPatsStruct // hashcode: 0x870BF970 (dec: -2029258384)
{
	int qpat; // size=0, offset=0
	int d1; // size=0, offset=4
	int d2; // size=0, offset=8
	int d3; // size=0, offset=12
	int d4; // size=0, offset=16
};

struct NODE // hashcode: 0x644F812B (dec: 1682932011)
{
	int nHallx1; // size=0, offset=0
	int nHally1; // size=0, offset=4
	int nHallx2; // size=0, offset=8
	int nHally2; // size=0, offset=12
	int nHalldir; // size=0, offset=16
	struct NODE *pNext; // size=24, offset=20
};

struct ROOMNODE // hashcode: 0x455E4898 (dec: 1163806872)
{
	int nRoomx1; // size=0, offset=0
	int nRoomy1; // size=0, offset=4
	int nRoomx2; // size=0, offset=8
	int nRoomy2; // size=0, offset=12
	int nRoomDest; // size=0, offset=16
};

struct STextStruct // hashcode: 0xAC410627 (dec: -1405024729)
{
	char _sx; // size=0, offset=0
	char _syoff; // size=0, offset=1
	char _sstr[128]; // size=128, offset=2
	unsigned char _sjust; // size=0, offset=130
	char _sclr; // size=0, offset=131
	unsigned char _sline; // size=0, offset=132
	unsigned char _ssel; // size=0, offset=133
	int _sval; // size=0, offset=136
};

struct SNDPLAYOPTS // hashcode: 0xE34088B5 (dec: -482309963)
{
	int patnum; // size=0, offset=0
	char bhandle; // size=0, offset=4
	char keynum; // size=0, offset=5
	char velocity; // size=0, offset=6
	char pan; // size=0, offset=7
	char vol; // size=0, offset=8
	char bend; // size=0, offset=9
	char fxlevel0; // size=0, offset=10
	char use3dpos; // size=0, offset=11
	unsigned short azimuth; // size=0, offset=12
	short elevation; // size=0, offset=14
};

struct SNDLIMITS // hashcode: 0x363AF6E8 (dec: 909833960)
{
	int dmabuflen; // size=0, offset=0
	unsigned char numdmabufs; // size=0, offset=4
	unsigned char numdmamsgs; // size=0, offset=5
	unsigned char nummicrotalkinstances; // size=0, offset=6
	unsigned char microtalkinstanceabort; // size=0, offset=7
	short numrspcmds; // size=0, offset=8
	short pad2; // size=0, offset=10
	int audiostreambufsize; // size=0, offset=12
};

struct SNDUSAGE // hashcode: 0x5DDEEA2A (dec: 1574890026)
{
	unsigned char numdmabufs; // size=0, offset=0
	unsigned char numvoices; // size=0, offset=1
	short numrspcmds; // size=0, offset=2
	int heapused; // size=0, offset=4
};

struct LightListStruct // hashcode: 0xBF0DC9A7 (dec: -1089615449)
{
	char _lx; // size=0, offset=0
	char _ly; // size=0, offset=1
	unsigned short _lradius; // size=0, offset=2
	char _lid; // size=0, offset=4
	unsigned char _ldel; // size=0, offset=5
	unsigned char _lunflag; // size=0, offset=6
	char _lunx; // size=0, offset=7
	char _luny; // size=0, offset=8
	char _lunr; // size=0, offset=9
	char _xoff; // size=0, offset=10
	char _yoff; // size=0, offset=11
	unsigned char _lflags; // size=0, offset=12
};

struct LightListStruct2 // hashcode: 0xD2EF8DC5 (dec: -756052539)
{
	char _lx; // size=0, offset=0
	char _ly; // size=0, offset=1
	unsigned short _lradius; // size=0, offset=2
	char _lid; // size=0, offset=4
	unsigned char _ldel; // size=0, offset=5
	char _xoff; // size=0, offset=6
	char _yoff; // size=0, offset=7
};

struct TriggerStruct // hashcode: 0x90FF0633 (dec: -1862334925)
{
	int _tx; // size=0, offset=0
	int _ty; // size=0, offset=4
	unsigned int _tmsg; // size=0, offset=8
	int _tlvl; // size=0, offset=12
};

struct BLOCK // hashcode: 0x95F81E0D (dec: -1778901491)
{
	unsigned char x; // size=0, offset=0
	unsigned char y; // size=0, offset=1
	unsigned short block; // size=0, offset=2
};

struct MEMSTRUCT // hashcode: 0xDD634F08 (dec: -580694264)
{
	long Handle; // size=0, offset=0
	void *MemPtr; // size=0, offset=4
};

struct TextDataStruct // hashcode: 0x48CE5607 (dec: 1221481991)
{
	int txtstr; // size=0, offset=0
	unsigned char scrlltxt; // size=0, offset=4
	unsigned char txtspd; // size=0, offset=5
	int sfxnr; // size=0, offset=8
};

struct MonsterStruct_alt_definition_0001 // hashcode: 0x42FC617F (dec: 1123836287)
{
	int mtalkmsg; // size=0, offset=0
	int _mgoalvar1; // size=0, offset=4
	int _mgoalvar2; // size=0, offset=8
	int _mgoalvar3; // size=0, offset=12
	int _mhitpoints; // size=0, offset=16
	int _mmaxhp; // size=0, offset=20
	short _mVar1; // size=0, offset=24
	short _mVar2; // size=0, offset=26
	short _mVar3; // size=0, offset=28
	short _mVar4; // size=0, offset=30
	short _mVar5; // size=0, offset=32
	short _mVar6; // size=0, offset=34
	short _mVar7; // size=0, offset=36
	short _mVar8; // size=0, offset=38
	short _mxvel; // size=0, offset=40
	short _myvel; // size=0, offset=42
	unsigned short _mFlags; // size=0, offset=44
	unsigned short mExp; // size=0, offset=46
	unsigned short mMagicRes; // size=0, offset=48
	char _mMTidx; // size=0, offset=50
	char _mmode; // size=0, offset=51
	char _mx; // size=0, offset=52
	char _my; // size=0, offset=53
	char _mfutx; // size=0, offset=54
	char _mfuty; // size=0, offset=55
	char _moldx; // size=0, offset=56
	char _moldy; // size=0, offset=57
	char _mxoff; // size=0, offset=58
	char _myoff; // size=0, offset=59
	char _mdir; // size=0, offset=60
	unsigned char _menemy; // size=0, offset=61
	char _mAnimDelay; // size=0, offset=62
	char _mAnimCnt; // size=0, offset=63
	char _mAnimLen; // size=0, offset=64
	char _mAnimFrame; // size=0, offset=65
	char _mAFNum; // size=0, offset=66
	char _lastx; // size=0, offset=67
	char _lasty; // size=0, offset=68
	char _udeadval; // size=0, offset=69
	char mWhoHit; // size=0, offset=70
	char mLevel; // size=0, offset=71
	char mArmorClass; // size=0, offset=72
	unsigned char _mgoal; // size=0, offset=73
	unsigned char _menemyx; // size=0, offset=74
	unsigned char _menemyy; // size=0, offset=75
	unsigned char _mAi; // size=0, offset=76
	unsigned char _mint; // size=0, offset=77
	unsigned char _msquelch; // size=0, offset=78
	unsigned char _uniqtype; // size=0, offset=79
	unsigned char mHit; // size=0, offset=80
	unsigned char mMinDamage; // size=0, offset=81
	unsigned char mMaxDamage; // size=0, offset=82
	unsigned char mHit2; // size=0, offset=83
	unsigned char mMinDamage2; // size=0, offset=84
	unsigned char mMaxDamage2; // size=0, offset=85
	unsigned char leader; // size=0, offset=86
	unsigned char leaderflag; // size=0, offset=87
	unsigned char unpackfilesize; // size=0, offset=88
	unsigned char mlid; // size=0, offset=89
	char Action; // size=0, offset=90
	char _mDelFlag; // size=0, offset=91
	int mName; // size=0, offset=92
	struct CMonster *MType; // size=28, offset=96
	struct MonsterData *MData; // size=60, offset=100
};

struct CPauseMessages // hashcode: 0xA9437218 (dec: -1455197672)
{
	int PadNum; // size=0, offset=0
	struct __vtbl_ptr_type (*_vf)[11]; // size=4, offset=4
};

struct CTempPauseMessage // hashcode: 0xFBB43967 (dec: -72074905)
{
	struct CPauseMessages CPauseMessages; // size=8, offset=0
	struct TextDat *TData; // size=112, offset=8
};

struct FontItem // hashcode: 0x68FAB69A (dec: 1761261210)
{
	unsigned char ch; // size=0, offset=0
	unsigned short Offset; // size=0, offset=2
};

struct FontTab // hashcode: 0xC765C1EC (dec: -949632532)
{
	struct CFont *Fnt; // size=540, offset=0
	struct FontItem *Items; // size=4, offset=4
	int NumOfItems; // size=0, offset=8
	int FrameBase; // size=0, offset=12
};

struct TNQ // hashcode: 0x9AA802E7 (dec: -1700265241)
{
	unsigned char _qsttype; // size=0, offset=0
	unsigned char _qstmsg; // size=0, offset=1
	unsigned char _qstmsgact; // size=0, offset=2
};

struct TownerStruct // hashcode: 0xB8223FAE (dec: -1205715026)
{
	int _tmode; // size=0, offset=0
	int _ttype; // size=0, offset=4
	int _tx; // size=0, offset=8
	int _ty; // size=0, offset=12
	long _txoff; // size=0, offset=16
	long _tyoff; // size=0, offset=20
	long _txvel; // size=0, offset=24
	long _tyvel; // size=0, offset=28
	int _tdir; // size=0, offset=32
	int _tAnimDelay; // size=0, offset=36
	int _tAnimCnt; // size=0, offset=40
	int _tAnimLen; // size=0, offset=44
	int _tAnimFrame; // size=0, offset=48
	int _tAnimFrameCnt; // size=0, offset=52
	char _tAnimOrder; // size=0, offset=56
	long _tAnimWidth; // size=0, offset=60
	long _tAnimWidth2; // size=0, offset=64
	int _tTenPer; // size=0, offset=68
	int _teflag; // size=0, offset=72
	int _tbtcnt; // size=0, offset=76
	unsigned char _tSelFlag; // size=0, offset=80
	unsigned char _tMsgSaid; // size=0, offset=81
	struct TNQ qsts[16]; // size=48, offset=82
	int _tSeed; // size=0, offset=132
	long _tVar1; // size=0, offset=136
	long _tVar2; // size=0, offset=140
	long _tVar3; // size=0, offset=144
	long _tVar4; // size=0, offset=148
	int _tName; // size=0, offset=152
	unsigned char (*_tNAnim[8]); // size=32, offset=156
	int _tNFrames; // size=0, offset=188
	unsigned char *_tNData; // size=0, offset=192
};

struct QuestTalkData // hashcode: 0x8D88CD01 (dec: -1920414463)
{
	int _qinfra; // size=0, offset=0
	int _qblkm; // size=0, offset=4
	int _qgarb; // size=0, offset=8
	int _qzhar; // size=0, offset=12
	int _qveil; // size=0, offset=16
	int _qmod; // size=0, offset=20
	int _qbutch; // size=0, offset=24
	int _qbol; // size=0, offset=28
	int _qblind; // size=0, offset=32
	int _qblood; // size=0, offset=36
	int _qanvil; // size=0, offset=40
	int _qwarlrd; // size=0, offset=44
	int _qking; // size=0, offset=48
	int _qpw; // size=0, offset=52
	int _qbone; // size=0, offset=56
	int _qvb; // size=0, offset=60
};

struct DeadStruct // hashcode: 0x7E72E4CE (dec: 2121458894)
{
	int _deadtype; // size=0, offset=0
	int _deadFrame; // size=0, offset=4
	char _deadtrans; // size=0, offset=8
};

struct MStr // hashcode: 0xECC92D1D (dec: -322360035)
{
	unsigned int Index; // size=8, offset=0
	unsigned int MyMonst; // size=24, offset=8
};

struct IStr // hashcode: 0x4A38AA0F (dec: 1245227535)
{
	unsigned int Index; // size=8, offset=0
	unsigned int MyItem; // size=24, offset=8
};

struct MissStr // hashcode: 0xF7DFD9ED (dec: -136324627)
{
	unsigned int Index; // size=8, offset=0
	unsigned int MyMiss; // size=24, offset=8
};

struct OStr // hashcode: 0xD223C31A (dec: -769408230)
{
	unsigned int Index; // size=8, offset=0
	unsigned int MyObject; // size=24, offset=8
};

struct DStr // hashcode: 0x674DC5EE (dec: 1733150190)
{
	unsigned char Index; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
};

struct CacheInfo // hashcode: 0xFF5CF45C (dec: -10685348)
{
};

struct CachedInfoList // hashcode: 0x084A231C (dec: 139076380)
{
	int NumOfItems; // size=0, offset=0
	struct CacheInfo Items[1]; // size=4, offset=4
};

struct TownToCreature // hashcode: 0x0AA6C96D (dec: 178702701)
{
	unsigned char GameEqu; // size=0, offset=0
	unsigned char CreatureEquate; // size=0, offset=1
};

struct DR_LOAD2 // hashcode: 0xCF44F88D (dec: -817563507)
{
	unsigned int addr; // size=24, offset=0
	unsigned int len; // size=8, offset=24
	unsigned long code[1]; // size=4, offset=4
	struct RECT rect; // size=8, offset=8
	unsigned long p[13]; // size=52, offset=16
};

struct Overlay // hashcode: 0x0D6C892D (dec: 225216813)
{
	unsigned char *Addr; // size=0, offset=0
	int Size; // size=0, offset=4
	char *FileName; // size=0, offset=8
	enum OVER_TYPE Over; // size=4, offset=12
};

struct PlayerParam // hashcode: 0x3250C410 (dec: 844153872)
{
	struct CPlayer *ThePlayer; // size=144, offset=0
	int Id; // size=0, offset=4
};

struct TMenuItem // hashcode: 0x8CE4C539 (dec: -1931164359)
{
	unsigned long dwFlags; // size=0, offset=0
	int pszStr; // size=0, offset=4
	void (*fnMenu)(); // size=0, offset=8
};

struct SpellData // hashcode: 0x8A86CE25 (dec: -1970876891)
{
	unsigned char sName; // size=0, offset=0
	unsigned char sManaCost; // size=0, offset=1
	unsigned char sType; // size=0, offset=2
	int sNameText; // size=0, offset=4
	int sSkillText; // size=0, offset=8
	int sBookLvl; // size=0, offset=12
	int sStaffLvl; // size=0, offset=16
	unsigned char sTargeted; // size=0, offset=20
	unsigned char sTownSpell; // size=0, offset=21
	int sMinInt; // size=0, offset=24
	unsigned char sSFX; // size=0, offset=28
	unsigned char sMissiles[3]; // size=3, offset=29
	unsigned char sManaAdj; // size=0, offset=32
	unsigned char sMinMana; // size=0, offset=33
	int sStaffMin; // size=0, offset=36
	int sStaffMax; // size=0, offset=40
	int sBookCost; // size=0, offset=44
	int sStaffCost; // size=0, offset=48
};

struct GsCOORD2PARAM // hashcode: 0xB01DFC28 (dec: -1340212184)
{
	struct VECTOR scale; // size=16, offset=0
	struct SVECTOR rotate; // size=8, offset=16
	struct VECTOR trans; // size=16, offset=24
};

struct _GsCOORDINATE2 // hashcode: 0x0AA5CF00 (dec: 178638592)
{
	unsigned long flg; // size=0, offset=0
	struct MATRIX coord; // size=32, offset=4
	struct MATRIX workm; // size=32, offset=36
	struct GsCOORD2PARAM *param; // size=40, offset=68
	struct _GsCOORDINATE2 *super; // size=80, offset=72
	struct _GsCOORDINATE2 *sub; // size=80, offset=76
};

struct GsVIEW2 // hashcode: 0x6C9C5C3F (dec: 1822186559)
{
	struct MATRIX view; // size=32, offset=0
	struct _GsCOORDINATE2 *super; // size=80, offset=32
};

struct GsRVIEW2 // hashcode: 0x6998C3A8 (dec: 1771619240)
{
	long vpx; // size=0, offset=0
	long vpy; // size=0, offset=4
	long vpz; // size=0, offset=8
	long vrx; // size=0, offset=12
	long vry; // size=0, offset=16
	long vrz; // size=0, offset=20
	long rz; // size=0, offset=24
	struct _GsCOORDINATE2 *super; // size=80, offset=28
};

struct GsF_LIGHT // hashcode: 0xB75BE405 (dec: -1218714619)
{
	int vx; // size=0, offset=0
	int vy; // size=0, offset=4
	int vz; // size=0, offset=8
	unsigned char r; // size=0, offset=12
	unsigned char g; // size=0, offset=13
	unsigned char b; // size=0, offset=14
};

struct GsOT_TAG // hashcode: 0x2699B376 (dec: 647607158)
{
	unsigned int p; // size=24, offset=0
	unsigned char num; // size=8, offset=24
};

struct GsOT // hashcode: 0xD94AC7EB (dec: -649410581)
{
	unsigned long length; // size=0, offset=0
	struct GsOT_TAG *org; // size=4, offset=4
	unsigned long offset; // size=0, offset=8
	unsigned long point; // size=0, offset=12
	struct GsOT_TAG *tag; // size=4, offset=16
};

struct GsDOBJ2 // hashcode: 0x46BD049D (dec: 1186792605)
{
	unsigned long attribute; // size=0, offset=0
	struct _GsCOORDINATE2 *coord2; // size=80, offset=4
	unsigned long *tmd; // size=0, offset=8
	unsigned long id; // size=0, offset=12
};

struct GsDOBJ3 // hashcode: 0x18670DA0 (dec: 409406880)
{
	unsigned long attribute; // size=0, offset=0
	struct _GsCOORDINATE2 *coord2; // size=80, offset=4
	unsigned long *pmd; // size=0, offset=8
	unsigned long *base; // size=0, offset=12
	unsigned long *sv; // size=0, offset=16
	unsigned long id; // size=0, offset=20
};

struct GsDOBJ5 // hashcode: 0x3DB7A1AD (dec: 1035444653)
{
	unsigned long attribute; // size=0, offset=0
	struct _GsCOORDINATE2 *coord2; // size=80, offset=4
	unsigned long *tmd; // size=0, offset=8
	unsigned long *packet; // size=0, offset=12
	unsigned long id; // size=0, offset=16
};

struct GsSPRITE // hashcode: 0xF961E5B7 (dec: -111024713)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	unsigned short w; // size=0, offset=8
	unsigned short h; // size=0, offset=10
	unsigned short tpage; // size=0, offset=12
	unsigned char u; // size=0, offset=14
	unsigned char v; // size=0, offset=15
	short cx; // size=0, offset=16
	short cy; // size=0, offset=18
	unsigned char r; // size=0, offset=20
	unsigned char g; // size=0, offset=21
	unsigned char b; // size=0, offset=22
	short mx; // size=0, offset=24
	short my; // size=0, offset=26
	short scalex; // size=0, offset=28
	short scaley; // size=0, offset=30
	long rotate; // size=0, offset=32
};

struct GsSPARRAY // hashcode: 0x5F074A82 (dec: 1594313346)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	struct DR_MODE mode[2]; // size=24, offset=8
	struct SPRT packet[2]; // size=40, offset=32
};

struct GsCELL // hashcode: 0x99571443 (dec: -1722346429)
{
	unsigned char u; // size=0, offset=0
	unsigned char v; // size=0, offset=1
	unsigned short cba; // size=0, offset=2
	unsigned short flag; // size=0, offset=4
	unsigned short tpage; // size=0, offset=6
};

struct GsMAP // hashcode: 0x8BE4FA97 (dec: -1947927913)
{
	unsigned char cellw; // size=0, offset=0
	unsigned char cellh; // size=0, offset=1
	unsigned short ncellw; // size=0, offset=2
	unsigned short ncellh; // size=0, offset=4
	struct GsCELL *base; // size=8, offset=8
	unsigned short *index; // size=0, offset=12
};

struct GsBG // hashcode: 0x539663D8 (dec: 1402364888)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	short w; // size=0, offset=8
	short h; // size=0, offset=10
	short scrollx; // size=0, offset=12
	short scrolly; // size=0, offset=14
	unsigned char r; // size=0, offset=16
	unsigned char g; // size=0, offset=17
	unsigned char b; // size=0, offset=18
	struct GsMAP *map; // size=16, offset=20
	short mx; // size=0, offset=24
	short my; // size=0, offset=26
	short scalex; // size=0, offset=28
	short scaley; // size=0, offset=30
	long rotate; // size=0, offset=32
};

struct GsLINE // hashcode: 0xB68587DF (dec: -1232762913)
{
	unsigned long attribute; // size=0, offset=0
	short x0; // size=0, offset=4
	short y0; // size=0, offset=6
	short x1; // size=0, offset=8
	short y1; // size=0, offset=10
	unsigned char r; // size=0, offset=12
	unsigned char g; // size=0, offset=13
	unsigned char b; // size=0, offset=14
};

struct GsGLINE // hashcode: 0xA3C50CC0 (dec: -1547367232)
{
	unsigned long attribute; // size=0, offset=0
	short x0; // size=0, offset=4
	short y0; // size=0, offset=6
	short x1; // size=0, offset=8
	short y1; // size=0, offset=10
	unsigned char r0; // size=0, offset=12
	unsigned char g0; // size=0, offset=13
	unsigned char b0; // size=0, offset=14
	unsigned char r1; // size=0, offset=15
	unsigned char g1; // size=0, offset=16
	unsigned char b1; // size=0, offset=17
};

struct GsBOXF // hashcode: 0x074383A9 (dec: 121865129)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	unsigned short w; // size=0, offset=8
	unsigned short h; // size=0, offset=10
	unsigned char r; // size=0, offset=12
	unsigned char g; // size=0, offset=13
	unsigned char b; // size=0, offset=14
};

struct GsFOGPARAM // hashcode: 0x1DB300B3 (dec: 498270387)
{
	short dqa; // size=0, offset=0
	long dqb; // size=0, offset=4
	unsigned char rfc; // size=0, offset=8
	unsigned char gfc; // size=0, offset=9
	unsigned char bfc; // size=0, offset=10
};

struct GsIMAGE // hashcode: 0x23EFBC58 (dec: 602913880)
{
	unsigned long pmode; // size=0, offset=0
	short px; // size=0, offset=4
	short py; // size=0, offset=6
	unsigned short pw; // size=0, offset=8
	unsigned short ph; // size=0, offset=10
	unsigned long *pixel; // size=0, offset=12
	short cx; // size=0, offset=16
	short cy; // size=0, offset=18
	unsigned short cw; // size=0, offset=20
	unsigned short ch; // size=0, offset=22
	unsigned long *clut; // size=0, offset=24
};

struct _GsPOSITION // hashcode: 0xFF77B2ED (dec: -8932627)
{
	short offx; // size=0, offset=0
	short offy; // size=0, offset=2
};

struct GsOBJTABLE2 // hashcode: 0x6E222006 (dec: 1847730182)
{
	struct GsDOBJ2 *top; // size=16, offset=0
	int nobj; // size=0, offset=4
	int maxobj; // size=0, offset=8
};

struct _GsFCALL // hashcode: 0xE8D7E76C (dec: -388503700)
{
	unsigned char ((**f3[2][3]))(); // size=24, offset=0
	unsigned char ((**nf3[2]))(); // size=8, offset=24
	unsigned char ((**g3[2][3]))(); // size=24, offset=32
	unsigned char ((**ng3[2]))(); // size=8, offset=56
	unsigned char ((**tf3[2][3]))(); // size=24, offset=64
	unsigned char ((**ntf3[2]))(); // size=8, offset=88
	unsigned char ((**tg3[2][3]))(); // size=24, offset=96
	unsigned char ((**ntg3[2]))(); // size=8, offset=120
	unsigned char ((**f4[2][3]))(); // size=24, offset=128
	unsigned char ((**nf4[2]))(); // size=8, offset=152
	unsigned char ((**g4[2][3]))(); // size=24, offset=160
	unsigned char ((**ng4[2]))(); // size=8, offset=184
	unsigned char ((**tf4[2][3]))(); // size=24, offset=192
	unsigned char ((**ntf4[2]))(); // size=8, offset=216
	unsigned char ((**tg4[2][3]))(); // size=24, offset=224
	unsigned char ((**ntg4[2]))(); // size=8, offset=248
	unsigned char ((**f3g[3]))(); // size=12, offset=256
	unsigned char ((**g3g[3]))(); // size=12, offset=268
	unsigned char ((**f4g[3]))(); // size=12, offset=280
	unsigned char ((**g4g[3]))(); // size=12, offset=292
};

struct TMD_P_F3 // hashcode: 0x7BE414AB (dec: 2078545067)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short v1; // size=0, offset=12
	unsigned short v2; // size=0, offset=14
};

struct TMD_P_G3 // hashcode: 0xABD0987E (dec: -1412392834)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short n1; // size=0, offset=12
	unsigned short v1; // size=0, offset=14
	unsigned short n2; // size=0, offset=16
	unsigned short v2; // size=0, offset=18
};

struct TMD_P_F3G // hashcode: 0xB92E309C (dec: -1188155236)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short v1; // size=0, offset=20
	unsigned short v2; // size=0, offset=22
};

struct TMD_P_G3G // hashcode: 0x2C30E2FA (dec: 741401338)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short n1; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short n2; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
};

struct TMD_P_NF3 // hashcode: 0x530656E0 (dec: 1392924384)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short v0; // size=0, offset=8
	unsigned short v1; // size=0, offset=10
	unsigned short v2; // size=0, offset=12
	unsigned short p; // size=0, offset=14
};

struct TMD_P_NG3 // hashcode: 0x3C03F2E7 (dec: 1006891751)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char p1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char p2; // size=0, offset=15
	unsigned short v0; // size=0, offset=16
	unsigned short v1; // size=0, offset=18
	unsigned short v2; // size=0, offset=20
	unsigned short p; // size=0, offset=22
};

struct TMD_P_F4 // hashcode: 0x0A484480 (dec: 172508288)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short v1; // size=0, offset=12
	unsigned short v2; // size=0, offset=14
	unsigned short v3; // size=0, offset=16
	unsigned short p; // size=0, offset=18
};

struct TMD_P_G4 // hashcode: 0xB8916C47 (dec: -1198429113)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short n1; // size=0, offset=12
	unsigned short v1; // size=0, offset=14
	unsigned short n2; // size=0, offset=16
	unsigned short v2; // size=0, offset=18
	unsigned short n3; // size=0, offset=20
	unsigned short v3; // size=0, offset=22
};

struct TMD_P_F4G // hashcode: 0x144B8192 (dec: 340492690)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char dummy3; // size=0, offset=19
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short v1; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
	unsigned short v3; // size=0, offset=28
	unsigned short dummy4; // size=0, offset=30
};

struct TMD_P_G4G // hashcode: 0x0AA7FE8F (dec: 178781839)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char dummy3; // size=0, offset=19
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short n1; // size=0, offset=24
	unsigned short v1; // size=0, offset=26
	unsigned short n2; // size=0, offset=28
	unsigned short v2; // size=0, offset=30
	unsigned short n3; // size=0, offset=32
	unsigned short v3; // size=0, offset=34
};

struct TMD_P_NF4 // hashcode: 0x1495BA7D (dec: 345356925)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short v0; // size=0, offset=8
	unsigned short v1; // size=0, offset=10
	unsigned short v2; // size=0, offset=12
	unsigned short v3; // size=0, offset=14
};

struct TMD_P_NG4 // hashcode: 0xAAF0F7A8 (dec: -1427048536)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char p1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char p2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char p3; // size=0, offset=19
	unsigned short v0; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short v2; // size=0, offset=24
	unsigned short v3; // size=0, offset=26
};

struct TMD_P_TF3 // hashcode: 0xE3E2EC07 (dec: -471667705)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p; // size=0, offset=14
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short v1; // size=0, offset=20
	unsigned short v2; // size=0, offset=22
};

struct TMD_P_TG3 // hashcode: 0x8B6CAD69 (dec: -1955811991)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p; // size=0, offset=14
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short n1; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short n2; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
};

struct TMD_P_TNF3 // hashcode: 0x437C538B (dec: 1132221323)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char r0; // size=0, offset=16
	unsigned char g0; // size=0, offset=17
	unsigned char b0; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	unsigned short v0; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short v2; // size=0, offset=24
	unsigned short p2; // size=0, offset=26
};

struct TMD_P_TNG3 // hashcode: 0xBEA4955F (dec: -1096510113)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char r0; // size=0, offset=16
	unsigned char g0; // size=0, offset=17
	unsigned char b0; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	unsigned char r1; // size=0, offset=20
	unsigned char g1; // size=0, offset=21
	unsigned char b1; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	unsigned char r2; // size=0, offset=24
	unsigned char g2; // size=0, offset=25
	unsigned char b2; // size=0, offset=26
	unsigned char p3; // size=0, offset=27
	unsigned short v0; // size=0, offset=28
	unsigned short v1; // size=0, offset=30
	unsigned short v2; // size=0, offset=32
	unsigned short p4; // size=0, offset=34
};

struct TMD_P_TF4 // hashcode: 0x97EE9F1C (dec: -1745969380)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short v1; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
	unsigned short v3; // size=0, offset=28
	unsigned short p2; // size=0, offset=30
};

struct TMD_P_TG4 // hashcode: 0x7FFE36A8 (dec: 2147366568)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short n1; // size=0, offset=24
	unsigned short v1; // size=0, offset=26
	unsigned short n2; // size=0, offset=28
	unsigned short v2; // size=0, offset=30
	unsigned short n3; // size=0, offset=32
	unsigned short v3; // size=0, offset=34
};

struct TMD_P_TNF4 // hashcode: 0xD7553226 (dec: -682282458)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned char r0; // size=0, offset=20
	unsigned char g0; // size=0, offset=21
	unsigned char b0; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	unsigned short v0; // size=0, offset=24
	unsigned short v1; // size=0, offset=26
	unsigned short v2; // size=0, offset=28
	unsigned short v3; // size=0, offset=30
};

struct TMD_P_TNG4 // hashcode: 0x37D90379 (dec: 936969081)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned char r0; // size=0, offset=20
	unsigned char g0; // size=0, offset=21
	unsigned char b0; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	unsigned char r1; // size=0, offset=24
	unsigned char g1; // size=0, offset=25
	unsigned char b1; // size=0, offset=26
	unsigned char p3; // size=0, offset=27
	unsigned char r2; // size=0, offset=28
	unsigned char g2; // size=0, offset=29
	unsigned char b2; // size=0, offset=30
	unsigned char p4; // size=0, offset=31
	unsigned char r3; // size=0, offset=32
	unsigned char g3; // size=0, offset=33
	unsigned char b3; // size=0, offset=34
	unsigned char p5; // size=0, offset=35
	unsigned short v0; // size=0, offset=36
	unsigned short v1; // size=0, offset=38
	unsigned short v2; // size=0, offset=40
	unsigned short v3; // size=0, offset=42
};

struct TMD_STRUCT // hashcode: 0xD1A8B85A (dec: -777471910)
{
	unsigned long *vertop; // size=0, offset=0
	unsigned long vern; // size=0, offset=4
	unsigned long *nortop; // size=0, offset=8
	unsigned long norn; // size=0, offset=12
	unsigned long *primtop; // size=0, offset=16
	unsigned long primn; // size=0, offset=20
	unsigned long scale; // size=0, offset=24
};

struct VERT // hashcode: 0xE7CE7E49 (dec: -405897655)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
	short vz; // size=0, offset=4
	unsigned char tu; // size=0, offset=6
	unsigned char tv; // size=0, offset=7
};

struct VERTC // hashcode: 0x91878C54 (dec: -1853387692)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
	short vz; // size=0, offset=4
	unsigned char tu; // size=0, offset=6
	unsigned char tv; // size=0, offset=7
	struct CVECTOR col; // size=4, offset=8
};

struct GsADIV_FT4 // hashcode: 0xC072DA07 (dec: -1066214905)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_FT4 si; // size=40, offset=60
};

struct GsADIV_P_FT4 // hashcode: 0x62D35904 (dec: 1658018052)
{
	struct VERT vt[4]; // size=32, offset=0
};

struct GsADIV_GT4 // hashcode: 0x9D7C347C (dec: -1652804484)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_GT4 si; // size=52, offset=60
};

struct GsADIV_P_GT4 // hashcode: 0x013974BE (dec: 20542654)
{
	struct VERTC vt[4]; // size=48, offset=0
};

struct GsADIV_G4 // hashcode: 0x3A298A15 (dec: 975800853)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_G4 si; // size=36, offset=60
};

struct GsADIV_F4 // hashcode: 0xB076435B (dec: -1334426789)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_F4 si; // size=24, offset=60
};

struct GsADIV_FT3 // hashcode: 0x5036C177 (dec: 1345765751)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_FT3 si; // size=32, offset=56
};

struct GsADIV_P_FT3 // hashcode: 0x280BCCF5 (dec: 671862005)
{
	struct VERT vt[3]; // size=24, offset=0
};

struct GsADIV_GT3 // hashcode: 0x6BDDFB3D (dec: 1809709885)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_GT3 si; // size=40, offset=56
};

struct GsADIV_P_GT3 // hashcode: 0xEFF74F7A (dec: -269004934)
{
	struct VERTC vt[3]; // size=36, offset=0
};

struct GsADIV_G3 // hashcode: 0x8DF56B99 (dec: -1913295975)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_G3 si; // size=28, offset=56
};

struct GsADIV_F3 // hashcode: 0xA8C514CC (dec: -1463479092)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_F3 si; // size=20, offset=56
};

struct _GsCOORDUNIT // hashcode: 0xAEC075D2 (dec: -1363118638)
{
	unsigned long flg; // size=0, offset=0
	struct MATRIX matrix; // size=32, offset=4
	struct MATRIX workm; // size=32, offset=36
	struct SVECTOR rot; // size=8, offset=68
	struct _GsCOORDUNIT *super; // size=80, offset=76
};

struct GsVIEWUNIT // hashcode: 0xEC322EB4 (dec: -332255564)
{
	struct MATRIX view; // size=32, offset=0
	struct _GsCOORDUNIT *super; // size=80, offset=32
};

struct GsRVIEWUNIT // hashcode: 0xF5069A6A (dec: -184116630)
{
	long vpx; // size=0, offset=0
	long vpy; // size=0, offset=4
	long vpz; // size=0, offset=8
	long vrx; // size=0, offset=12
	long vry; // size=0, offset=16
	long vrz; // size=0, offset=20
	long rz; // size=0, offset=24
	struct _GsCOORDUNIT *super; // size=80, offset=28
};

struct GsUNIT // hashcode: 0x785694F2 (dec: 2018940146)
{
	struct _GsCOORDUNIT *coord; // size=80, offset=0
	unsigned long *primtop; // size=0, offset=4
};

struct GsTYPEUNIT // hashcode: 0x0051796A (dec: 5339498)
{
	unsigned long type; // size=0, offset=0
	unsigned long *ptr; // size=0, offset=4
};

struct GsARGUNIT // hashcode: 0x1BD2492D (dec: 466766125)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
};

struct GsWORKUNIT // hashcode: 0xDED9BB35 (dec: -556156107)
{
	struct DVECTOR vec; // size=4, offset=0
	short otz; // size=0, offset=4
	short p; // size=0, offset=6
};

struct GsARGUNIT_NORMAL // hashcode: 0x17F2C2BF (dec: 401785535)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *primtop; // size=0, offset=20
	struct SVECTOR *vertop; // size=8, offset=24
	struct SVECTOR *nortop; // size=8, offset=28
};

struct GsARGUNIT_SHARED // hashcode: 0x8ABB49A7 (dec: -1967437401)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *primtop; // size=0, offset=20
	struct SVECTOR *vertop; // size=8, offset=24
	struct GsWORKUNIT *vertop2; // size=8, offset=28
	struct SVECTOR *nortop; // size=8, offset=32
	struct SVECTOR *nortop2; // size=8, offset=36
};

struct GsARGUNIT_IMAGE // hashcode: 0x81DA5E75 (dec: -2116395403)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *imagetop; // size=0, offset=20
	unsigned long *cluttop; // size=0, offset=24
};

struct GsARGUNIT_GND // hashcode: 0x56B1ADC3 (dec: 1454484931)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *polytop; // size=0, offset=20
	unsigned long *boxtop; // size=0, offset=24
	unsigned long *pointtop; // size=0, offset=28
	struct SVECTOR *nortop; // size=8, offset=32
};

struct GsARGUNIT_GNDT // hashcode: 0x12C38612 (dec: 314803730)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *polytop; // size=0, offset=20
	unsigned long *boxtop; // size=0, offset=24
	unsigned long *pointtop; // size=0, offset=28
	struct SVECTOR *nortop; // size=8, offset=32
	unsigned long *uvtop; // size=0, offset=36
};

struct GsARGUNIT_JntMIMe // hashcode: 0xFA2D3238 (dec: -97701320)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *coord_sect; // size=0, offset=20
	long *mimepr; // size=0, offset=24
	unsigned long mimenum; // size=0, offset=28
	unsigned short mimeid; // size=0, offset=32
	unsigned short reserved; // size=0, offset=34
	unsigned long *mime_diff_sect; // size=0, offset=36
};

struct GsARGUNIT_RstJntMIMe // hashcode: 0xB96DEA9E (dec: -1183978850)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *coord_sect; // size=0, offset=20
	unsigned short mimeid; // size=0, offset=24
	unsigned short reserved; // size=0, offset=26
	unsigned long *mime_diff_sect; // size=0, offset=28
};

struct GsARGUNIT_VNMIMe // hashcode: 0x4FB7D5DF (dec: 1337447903)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	long *mimepr; // size=0, offset=20
	unsigned long mimenum; // size=0, offset=24
	unsigned short mimeid; // size=0, offset=28
	unsigned short reserved; // size=0, offset=30
	unsigned long *mime_diff_sect; // size=0, offset=32
	struct SVECTOR *orgs_vn_sect; // size=8, offset=36
	struct SVECTOR *vert_sect; // size=8, offset=40
	struct SVECTOR *norm_sect; // size=8, offset=44
};

struct GsARGUNIT_RstVNMIMe // hashcode: 0x353D27AB (dec: 893200299)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned short mimeid; // size=0, offset=20
	unsigned short reserved; // size=0, offset=22
	unsigned long *mime_diff_sect; // size=0, offset=24
	struct SVECTOR *orgs_vn_sect; // size=8, offset=28
	struct SVECTOR *vert_sect; // size=8, offset=32
	struct SVECTOR *norm_sect; // size=8, offset=36
};

struct GsARGUNIT_ANIM // hashcode: 0xA5A57CCE (dec: -1515881266)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	long header_size; // size=0, offset=20
	unsigned long *htop; // size=0, offset=24
	unsigned long *ctop; // size=0, offset=28
	unsigned long *ptop; // size=0, offset=32
};

struct GsSEH // hashcode: 0xBB0D82E5 (dec: -1156742427)
{
	short idx; // size=0, offset=0
	unsigned char sid; // size=0, offset=2
	unsigned char pad; // size=0, offset=3
};

struct GsSEQ // hashcode: 0xEB266E2D (dec: -349802963)
{
	unsigned long rewrite_idx; // size=0, offset=0
	unsigned short size; // size=0, offset=4
	unsigned short num; // size=0, offset=6
	unsigned short ii; // size=0, offset=8
	unsigned short aframe; // size=0, offset=10
	unsigned char sid; // size=0, offset=12
	char speed; // size=0, offset=13
	unsigned short srcii; // size=0, offset=14
	short rframe; // size=0, offset=16
	unsigned short tframe; // size=0, offset=18
	unsigned short ci; // size=0, offset=20
	unsigned short ti; // size=0, offset=22
	unsigned short start; // size=0, offset=24
	unsigned char start_sid; // size=0, offset=26
	unsigned char traveling; // size=0, offset=27
};

struct InitPos // hashcode: 0x49A51E57 (dec: 1235557975)
{
	unsigned short x; // size=0, offset=0
	unsigned short y; // size=0, offset=2
};

struct t11TLinkedList1Z8PalEntry // hashcode: 0x063A6286 (dec: 104489606)
{
	struct PalEntry *Next; // size=0, offset=0
	struct PalEntry *Prev; // size=0, offset=4
};

struct PalEntry // hashcode: 0x73A7B3A3 (dec: 1940370339)
{
	struct t11TLinkedList1Z8PalEntry t11TLinkedList1Z8PalEntry; // size=8, offset=0
	unsigned short PixVal; // size=0, offset=8
	unsigned short MyX; // size=0, offset=10
	unsigned short MyY; // size=0, offset=12
	unsigned short Clut; // size=0, offset=14
	unsigned short SourceClut; // size=0, offset=16
	unsigned short NumOfCols; // size=0, offset=18
	unsigned short JustUsed; // size=0, offset=20
};

struct t10Collection2Z8PalEntryi20 // hashcode: 0xA5517749 (dec: -1521387703)
{
	int ObjsUsed; // size=0, offset=0
	struct PalEntry Objects[20]; // size=480, offset=4
	struct PalEntry *Used; // size=24, offset=484
	struct PalEntry *Unused; // size=24, offset=488
};

struct PalCollection // hashcode: 0x9F4BA0DA (dec: -1622433574)
{
	struct t10Collection2Z8PalEntryi20 t10Collection2Z8PalEntryi20; // size=492, offset=0
};

struct BIRDSTRUCT // hashcode: 0x19DB351A (dec: 433796378)
{
	struct BIRDSTRUCT *leader; // size=24, offset=0
	short WorldX; // size=0, offset=4
	short WorldY; // size=0, offset=6
	char _bx; // size=0, offset=8
	char _by; // size=0, offset=9
	char _bxoff; // size=0, offset=10
	char _byoff; // size=0, offset=11
	char dir; // size=0, offset=12
	char newdir; // size=0, offset=13
	char rnddir; // size=0, offset=14
	char flytime; // size=0, offset=15
	char flyvar; // size=0, offset=16
	char animcount; // size=0, offset=17
	char mode; // size=0, offset=18
	char height; // size=0, offset=19
	unsigned char leadflag; // size=0, offset=20
	unsigned char visible; // size=0, offset=21
};

struct Perch // hashcode: 0x6F25C27B (dec: 1864745595)
{
	char x; // size=0, offset=0
	char y; // size=0, offset=1
};

struct PInf // hashcode: 0x3DB56CA1 (dec: 1035300001)
{
	char *Tx; // size=0, offset=0
	unsigned short GameTex; // size=0, offset=4
	unsigned short TownTex; // size=0, offset=6
	unsigned short TwoPlayerTex; // size=0, offset=8
};

struct bird // hashcode: 0x1AD2EE26 (dec: 450031142)
{
	int townbirddir; // size=0, offset=0
	int townx; // size=0, offset=4
	int towny; // size=0, offset=8
	int motionx; // size=0, offset=12
	int motiony; // size=0, offset=16
	int offx; // size=0, offset=20
	int offy; // size=0, offset=24
	int velx; // size=0, offset=28
	int vely; // size=0, offset=32
	int newvelx; // size=0, offset=36
	int newvely; // size=0, offset=40
	char sw; // size=0, offset=44
	char fl; // size=0, offset=45
	char fl_delay; // size=0, offset=46
	char sw_delay; // size=0, offset=47
	char perch; // size=0, offset=48
	char bird_vis; // size=0, offset=49
};

struct _HSCODESTREAM // hashcode: 0x89056BE2 (dec: -1996133406)
{
	int unused; // size=0, offset=0
};

struct _SCODEEXECUTEDATA // hashcode: 0xAAA66AFE (dec: -1431934210)
{
	unsigned long size; // size=0, offset=0
	unsigned long flags; // size=0, offset=4
	int xiterations; // size=0, offset=8
	int yiterations; // size=0, offset=12
	int adjustdest; // size=0, offset=16
	int adjustsource; // size=0, offset=20
	void *dest; // size=0, offset=24
	void *source; // size=0, offset=28
	void *table; // size=0, offset=32
	unsigned long a; // size=0, offset=36
	unsigned long b; // size=0, offset=40
	unsigned long c; // size=0, offset=44
	int adjustdestalt; // size=0, offset=48
	int adjustsourcealt; // size=0, offset=52
	unsigned long reserved[2]; // size=8, offset=56
};

struct _HSARCHIVE // hashcode: 0x8E1EB02C (dec: -1910591444)
{
	int unused; // size=0, offset=0
};

struct _HSFILE // hashcode: 0xA9D2DA7A (dec: -1445799302)
{
	int unused; // size=0, offset=0
};

struct _HSFINDFILE // hashcode: 0xC3BE5CCC (dec: -1010934580)
{
	int unused; // size=0, offset=0
};

struct _HSGDIOBJ // hashcode: 0xABEEAAD3 (dec: -1410422061)
{
	int unused; // size=0, offset=0
};

struct _HSGDIFONT // hashcode: 0x7366ED0B (dec: 1936125195)
{
	struct _HSGDIOBJ _HSGDIOBJ; // size=4, offset=0
	int unused; // size=0, offset=4
};

struct _PARAMS // hashcode: 0x96E5804F (dec: -1763344305)
{
	unsigned long window; // size=0, offset=0
	unsigned int message; // size=0, offset=4
	long wparam; // size=0, offset=8
	unsigned long lparam; // size=0, offset=12
	unsigned int notifycode; // size=0, offset=16
	void *extra; // size=0, offset=20
	unsigned char useresult; // size=0, offset=24
	unsigned long result; // size=0, offset=28
};

struct _SNETCAPS // hashcode: 0xC04DA8A0 (dec: -1068652384)
{
	unsigned long size; // size=0, offset=0
	unsigned long flags; // size=0, offset=4
	unsigned long maxmessagesize; // size=0, offset=8
	unsigned long maxqueuesize; // size=0, offset=12
	unsigned long maxplayers; // size=0, offset=16
	unsigned long bytessec; // size=0, offset=20
	unsigned long latencyms; // size=0, offset=24
	unsigned long defaultturnssec; // size=0, offset=28
	unsigned long defaultturnsintransit; // size=0, offset=32
};

struct _SNETCREATEDATA // hashcode: 0x27B49F84 (dec: 666148740)
{
	unsigned long size; // size=0, offset=0
	unsigned long providerid; // size=0, offset=4
	unsigned long maxplayers; // size=0, offset=8
	unsigned long createflags; // size=0, offset=12
};

struct _SNET_DATA_SYSCOLORTABLE // hashcode: 0x4D59A8D6 (dec: 1297721558)
{
	unsigned long syscolor; // size=0, offset=0
	unsigned long rgb; // size=0, offset=4
};

struct _SNETEVENT // hashcode: 0xD0157BEF (dec: -803898385)
{
	unsigned long eventid; // size=0, offset=0
	unsigned long playerid; // size=0, offset=4
	void *data; // size=0, offset=8
	unsigned long databytes; // size=0, offset=12
};

struct _SNETPLAYERDATA // hashcode: 0xF3F1D673 (dec: -202254733)
{
	unsigned long size; // size=0, offset=0
	char *playername; // size=0, offset=4
	char *playerdescription; // size=0, offset=8
};

struct _SNETPROGRAMDATA // hashcode: 0x4A3F1110 (dec: 1245647120)
{
	unsigned long size; // size=0, offset=0
	char *programname; // size=0, offset=4
	char *programdescription; // size=0, offset=8
	unsigned long programid; // size=0, offset=12
	unsigned long versionid; // size=0, offset=16
	unsigned long reserved1; // size=0, offset=20
	unsigned long maxplayers; // size=0, offset=24
	void *initdata; // size=0, offset=28
	unsigned long initdatabytes; // size=0, offset=32
	void *reserved2; // size=0, offset=36
	unsigned long optcategorybits; // size=0, offset=40
};

struct _SNETUIDATA // hashcode: 0x328677F7 (dec: 847673335)
{
	unsigned long size; // size=0, offset=0
	unsigned long uiflags; // size=0, offset=4
	unsigned long parentwindow; // size=0, offset=8
	unsigned char (*artcallback)(); // size=0, offset=12
	unsigned char (*authcallback)(); // size=0, offset=16
	unsigned char (*createcallback)(); // size=0, offset=20
	unsigned char (*drawdesccallback)(); // size=0, offset=24
	unsigned char (*selectedcallback)(); // size=0, offset=28
	int (*messageboxcallback)(); // size=0, offset=32
	unsigned char (*soundcallback)(); // size=0, offset=36
	unsigned char (*statuscallback)(); // size=0, offset=40
	unsigned char (*getdatacallback)(); // size=0, offset=44
	unsigned char (*categorycallback)(); // size=0, offset=48
};

struct _SNETVERSIONDATA // hashcode: 0xE60B5901 (dec: -435463935)
{
	unsigned long size; // size=0, offset=0
	char *versionstring; // size=0, offset=4
	char *executablefile; // size=0, offset=8
	char *originalarchivefile; // size=0, offset=12
	char *patcharchivefile; // size=0, offset=16
};

struct _SNETADDR // hashcode: 0xCC17CF26 (dec: -870854874)
{
	unsigned char address[16]; // size=16, offset=0
};

struct _SNETSPI_DEVICELIST // hashcode: 0xEEEC9FCC (dec: -286482484)
{
	unsigned long deviceid; // size=0, offset=0
	struct _SNETCAPS devicecaps; // size=36, offset=4
	char devicename[128]; // size=128, offset=40
	char devicedescription[128]; // size=128, offset=168
	unsigned long reserved; // size=0, offset=296
	struct _SNETSPI_DEVICELIST *next; // size=304, offset=300
};

struct _SNETSPI_GAMELIST // hashcode: 0x613D5FEF (dec: 1631412207)
{
	unsigned long gameid; // size=0, offset=0
	unsigned long gamemode; // size=0, offset=4
	unsigned long creationtime; // size=0, offset=8
	struct _SNETADDR owner; // size=16, offset=12
	unsigned long ownerlatency; // size=0, offset=28
	unsigned long ownerlasttime; // size=0, offset=32
	unsigned long gamecategorybits; // size=0, offset=36
	char gamename[128]; // size=128, offset=40
	char gamedescription[128]; // size=128, offset=168
	struct _SNETSPI_GAMELIST *next; // size=300, offset=296
};

struct _SNETSPI // hashcode: 0x9F5641A0 (dec: -1621737056)
{
	unsigned long size; // size=0, offset=0
	unsigned char (*CompareNetAddresses)(); // size=0, offset=4
	unsigned char (*Destroy)(); // size=0, offset=8
	unsigned char (*Free)(); // size=0, offset=12
	unsigned char (*FreeExternalMessage)(); // size=0, offset=16
	unsigned char (*GetGameInfo)(); // size=0, offset=20
	unsigned char (*GetPerformanceData)(); // size=0, offset=24
	unsigned char (*Initialize)(); // size=0, offset=28
	unsigned char (*InitializeDevice)(); // size=0, offset=32
	unsigned char (*LockDeviceList)(); // size=0, offset=36
	unsigned char (*LockGameList)(); // size=0, offset=40
	unsigned char (*Receive)(); // size=0, offset=44
	unsigned char (*ReceiveExternalMessage)(); // size=0, offset=48
	unsigned char (*SelectGame)(); // size=0, offset=52
	unsigned char (*Send)(); // size=0, offset=56
	unsigned char (*SendExternalMessage)(); // size=0, offset=60
	unsigned char (*StartAdvertisingGame)(); // size=0, offset=64
	unsigned char (*StopAdvertisingGame)(); // size=0, offset=68
	unsigned char (*UnlockDeviceList)(); // size=0, offset=72
	unsigned char (*UnlockGameList)(); // size=0, offset=76
};

struct _HSVIDEO // hashcode: 0x302C1AF3 (dec: 808196851)
{
	int unused; // size=0, offset=0
};

struct _SVIDPALETTEUSE // hashcode: 0x111B1C0E (dec: 286989326)
{
	unsigned long size; // size=0, offset=0
	unsigned long firstentry; // size=0, offset=4
	unsigned long numentries; // size=0, offset=8
};

struct CCritSect // hashcode: 0xE6B4B6E2 (dec: -424364318)
{
	unsigned long m_critsect; // size=0, offset=0
};

struct CLock // hashcode: 0xE40C0883 (dec: -468973437)
{
	unsigned long m_mutexevent; // size=0, offset=0
	unsigned long m_readerevent; // size=0, offset=4
	long m_readercount; // size=0, offset=8
};

struct _gamedata // hashcode: 0xF3F41EB2 (dec: -202105166)
{
	unsigned long dwSeed; // size=0, offset=0
	unsigned char bDiff; // size=0, offset=4
};

struct _uidefaultstats // hashcode: 0x33AE444C (dec: 867058764)
{
	unsigned short strength; // size=0, offset=0
	unsigned short magic; // size=0, offset=2
	unsigned short dexterity; // size=0, offset=4
	unsigned short vitality; // size=0, offset=6
};

struct _uiheroinfo // hashcode: 0x4DC5AA27 (dec: 1304799783)
{
	struct _uiheroinfo *next; // size=40, offset=0
	char name[16]; // size=16, offset=4
	unsigned short level; // size=0, offset=20
	unsigned char heroclass; // size=0, offset=22
	unsigned char herorank; // size=0, offset=23
	unsigned short strength; // size=0, offset=24
	unsigned short magic; // size=0, offset=26
	unsigned short dexterity; // size=0, offset=28
	unsigned short vitality; // size=0, offset=30
	unsigned long gold; // size=0, offset=32
	unsigned char hassaved; // size=0, offset=36
	unsigned char spawned; // size=0, offset=37
};

struct _modeminfo // hashcode: 0x48198BE7 (dec: 1209633767)
{
	struct _modeminfo *next; // size=264, offset=0
	unsigned long deviceid; // size=0, offset=4
	char devicename[128]; // size=128, offset=8
	char devicedesc[128]; // size=128, offset=136
};

struct HelpStruct // hashcode: 0x827F49F9 (dec: -2105587207)
{
	char DisplayType; // size=0, offset=0
	int HelpTxt; // size=0, offset=4
	int subtxt; // size=0, offset=8
};

struct OMENUITEM // hashcode: 0xA40D1174 (dec: -1542647436)
{
	unsigned char y; // size=0, offset=0
	int Text; // size=0, offset=4
	enum TXT_JUST Just; // size=4, offset=8
	int len; // size=0, offset=12
	unsigned long *var; // size=0, offset=16
	int Link; // size=0, offset=20
};

struct OMENULIST // hashcode: 0x7D7853BA (dec: 2105037754)
{
	unsigned short w; // size=0, offset=0
	unsigned char h; // size=0, offset=2
	unsigned char NoEntries; // size=0, offset=3
	struct OMENUITEM *Item; // size=24, offset=4
};

struct FMVDAT // hashcode: 0x1F1BFCB4 (dec: 521927860)
{
	char *Name; // size=0, offset=0
	unsigned short Width; // size=0, offset=4
	unsigned short Height; // size=0, offset=6
};

struct vbuffS // hashcode: 0x88C00045 (dec: -2000682939)
{
	short kan; // size=0, offset=0
	unsigned char count; // size=0, offset=2
};

struct block // hashcode: 0xDC3F7E5A (dec: -599818662)
{
	int data[128]; // size=512, offset=0
	unsigned char blockrep; // size=0, offset=512
	int blocksize; // size=0, offset=516
	int blockoffset; // size=0, offset=520
	unsigned char *Dest; // size=0, offset=524
	int outsize; // size=0, offset=528
};

struct FeMenuTable // hashcode: 0x6DFE8F35 (dec: 1845399349)
{
	int X; // size=0, offset=0
	int Y; // size=0, offset=4
	enum TXT_JUST Just; // size=4, offset=8
	unsigned short Str; // size=0, offset=12
	struct FeTable *MenuPtr; // size=28, offset=16
	struct CFont *Font; // size=540, offset=20
};

struct Creds // hashcode: 0x93284591 (dec: -1826077295)
{
	int Title; // size=0, offset=0
	int SubTitle; // size=0, offset=4
	int Text; // size=0, offset=8
};

struct sjis // hashcode: 0xBE25489A (dec: -1104852838)
{
	char ascii; // size=0, offset=0
	unsigned char num; // size=0, offset=1
	unsigned short sjis; // size=0, offset=2
};

struct _mdecanim // hashcode: 0xAE00236D (dec: -1375722643)
{
	char *filename; // size=0, offset=0
	int speed; // size=0, offset=4
	int start; // size=0, offset=8
	int end; // size=0, offset=12
	int streaming; // size=0, offset=16
};

struct asec // hashcode: 0x082534BC (dec: 136656060)
{
	int id; // size=0, offset=0
	int size; // size=0, offset=4
};

struct CSDATA // hashcode: 0x553FD0D1 (dec: 1430245585)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int w; // size=0, offset=8
	int Text1; // size=0, offset=12
	int Text2; // size=0, offset=16
	int Text3; // size=0, offset=20
	char String[15]; // size=15, offset=24
	char col; // size=0, offset=39
};

struct MissileData // hashcode: 0x64CA20AF (dec: 1690968239)
{
	unsigned char mName; // size=0, offset=0
	void (*mAddProc)(); // size=0, offset=4
	void (*mProc)(); // size=0, offset=8
	unsigned char mDraw; // size=0, offset=12
	unsigned char mType; // size=0, offset=13
	unsigned char mResist; // size=0, offset=14
	unsigned char mFileNum; // size=0, offset=15
	int mlSFX; // size=0, offset=16
	int miSFX; // size=0, offset=20
};

struct MisFileData // hashcode: 0xC190A19A (dec: -1047486054)
{
	unsigned char mAnimName; // size=0, offset=0
	unsigned char mAnimFAmt; // size=0, offset=1
	unsigned char mFlags; // size=0, offset=2
	unsigned char mAnimDelay; // size=0, offset=3
	unsigned char mAnimLen; // size=0, offset=4
};

struct ThemeStruct // hashcode: 0x676946C5 (dec: 1734952645)
{
	char ttype; // size=0, offset=0
	int ttval; // size=0, offset=4
};

struct _FILEHEADER // hashcode: 0x3B7A4D2D (dec: 997870893)
{
	unsigned long signature; // size=0, offset=0
	unsigned long headersize; // size=0, offset=4
	unsigned long filesize; // size=0, offset=8
	unsigned short version; // size=0, offset=12
	unsigned short sectorsizeid; // size=0, offset=14
	unsigned long hashoffset; // size=0, offset=16
	unsigned long blockoffset; // size=0, offset=20
	unsigned long hashcount; // size=0, offset=24
	unsigned long blockcount; // size=0, offset=28
};

struct _HASHENTRY // hashcode: 0x9319F355 (dec: -1827015851)
{
	unsigned long hashcheck[2]; // size=8, offset=0
	unsigned long lcid; // size=0, offset=8
	unsigned long block; // size=0, offset=12
};

struct _BLOCKENTRY // hashcode: 0x8B51E443 (dec: -1957567421)
{
	unsigned long offset; // size=0, offset=0
	unsigned long sizealloc; // size=0, offset=4
	unsigned long sizefile; // size=0, offset=8
	unsigned long flags; // size=0, offset=12
};

struct _SHAREDDATA // hashcode: 0x84A1C02A (dec: -2069774294)
{
	long status; // size=0, offset=0
	unsigned long processid; // size=0, offset=4
};

struct CompClass // hashcode: 0x1A39C00E (dec: 439992334)
{
	struct __vtbl_ptr_type (*_vf)[3]; // size=4, offset=0
};

struct CompressedLevs // hashcode: 0x30A6A1BA (dec: 816226746)
{
	unsigned long Version; // size=0, offset=0
	unsigned long Offset[22]; // size=88, offset=4
	unsigned long Size[22]; // size=88, offset=92
};

struct AMap // hashcode: 0xFB40B95C (dec: -79644324)
{
	void * Compressed; // size=0, offset=0
	long hnd; // size=0, offset=4
	int Size; // size=0, offset=8
	struct DLevel *CurrLevel; // size=4696, offset=12
};

struct CompLevelMaps // hashcode: 0xC8A68885 (dec: -928610171)
{
	struct CompClass *CompObj; // size=4, offset=0
	struct AMap TheMaps[22]; // size=352, offset=4
	int LastNumOut; // size=0, offset=356
	struct DLevel *LastMapOut; // size=4696, offset=360
	void * MapOut; // size=0, offset=364
};

struct NoComp // hashcode: 0xB4D057F9 (dec: -1261414407)
{
	struct CompClass CompClass; // size=4, offset=0
};

struct PakComp // hashcode: 0x3D566F83 (dec: 1029074819)
{
	struct CompClass CompClass; // size=4, offset=0
};

struct CrunchComp // hashcode: 0xE4376A39 (dec: -466130375)
{
	struct CompClass CompClass; // size=4, offset=0
};

struct TMegaPkt // hashcode: 0xF06E06D8 (dec: -261224744)
{
	struct TMegaPkt *pNext; // size=32008, offset=0
	unsigned long dwSpaceLeft; // size=0, offset=4
	unsigned char data[32000]; // size=32000, offset=8
};

struct TBuffer // hashcode: 0x15E0D040 (dec: 367054912)
{
	unsigned long dwNextWriteOffset; // size=0, offset=0
	unsigned char bData[4096]; // size=4096, offset=4
};

struct tagPATHNODE // hashcode: 0x0ADA02F4 (dec: 182059764)
{
	char f; // size=0, offset=0
	char h; // size=0, offset=1
	char g; // size=0, offset=2
	int x; // size=0, offset=4
	int y; // size=0, offset=8
	struct tagPATHNODE *Parent; // size=52, offset=12
	struct tagPATHNODE (*Child[8]); // size=32, offset=16
	struct tagPATHNODE *NextNode; // size=52, offset=48
};

struct MESSAGE_STR // hashcode: 0xB92B01F5 (dec: -1188363787)
{
	int Msg; // size=0, offset=0
	char *Text; // size=0, offset=4
};

struct CINDER // hashcode: 0xCD426ADC (dec: -851285284)
{
	unsigned short x; // size=0, offset=0
	unsigned short y; // size=0, offset=2
	unsigned short yinc; // size=0, offset=4
};

struct DoorOff // hashcode: 0x4AC822FE (dec: 1254630142)
{
	char x; // size=0, offset=0
	char y; // size=0, offset=1
	char ot; // size=0, offset=2
	char pad; // size=0, offset=3
};

struct MONTH_DAYS // hashcode: 0xC7AEB567 (dec: -944851609)
{
	char *Month; // size=0, offset=0
	int Days; // size=0, offset=4
};

struct InvXY // hashcode: 0xAC804DD4 (dec: -1400877612)
{
	int X; // size=0, offset=0
	int Y; // size=0, offset=4
};

struct MEM_HDR // hashcode: 0x2FE7D45C (dec: 803722332)
{
	struct MEM_HDR *Prev; // size=28, offset=0
	struct MEM_HDR *Next; // size=28, offset=4
	void *Mem; // size=0, offset=8
	unsigned long Size; // size=0, offset=12
	unsigned short TimeStamp; // size=0, offset=16
	unsigned short Type; // size=0, offset=18
	unsigned short Owners; // size=0, offset=20
	unsigned short Handle; // size=0, offset=22
	unsigned char Name[4]; // size=4, offset=24
};

struct MEM_REG // hashcode: 0xF5892E1C (dec: -175559140)
{
	void *Mem; // size=0, offset=0
	int Size; // size=0, offset=4
};

struct FILE // hashcode: 0x237C1621 (dec: 595334689)
{
	int _cnt; // size=0, offset=0
	char *_ptr; // size=0, offset=4
	char *_base; // size=0, offset=8
	int _bufsiz; // size=0, offset=12
	int _flag; // size=0, offset=16
	int _file; // size=0, offset=20
	char *_name_to_remove; // size=0, offset=24
};
/* End structs */

/* Begin unions */

union _148fake // Hashcode: 0x82D6E3B2 (dec: -2099846222)
{
	struct MissStr uMissStr; // size=4, offset=0
	struct MStr uMStr; // size=4, offset=0
	struct OStr uOStr; // size=4, offset=0
	struct IStr uIStr; // size=4, offset=0
	struct DStr uDStr; // size=3, offset=0
};
/* End unions */

/* Begin typedefs */

typedef unsigned char u_char;

typedef unsigned short u_short;

typedef unsigned int u_int;

typedef unsigned long u_long;

typedef unsigned short ushort;

typedef struct _physadr _physadr;

typedef struct _physadr *physadr;

typedef struct label_t label_t;

typedef struct _quad _quad;

typedef struct _quad quad;

typedef long daddr_t;

typedef char *caddr_t;

typedef long *qaddr_t;

typedef unsigned long ino_t;

typedef long swblk_t;

typedef unsigned int size_t;

typedef long time_t;

typedef short dev_t;

typedef long off_t;

typedef unsigned short uid_t;

typedef unsigned short gid_t;

typedef char s8;

typedef short s16;

typedef long s32;

typedef long s64;

typedef unsigned char u8;

typedef unsigned short u16;

typedef unsigned long u32;

typedef unsigned long u64;

typedef unsigned int uint;

typedef unsigned char uchar;

typedef unsigned long ulong;

typedef unsigned char UBYTE;

typedef unsigned short UWORD;

typedef unsigned int UINT;

typedef unsigned char UCHAR;

typedef unsigned short USHORT;

typedef unsigned long ULONG;

typedef unsigned char BOOL;

typedef char S8;

typedef short S16;

typedef long S32;

typedef unsigned char U8;

typedef unsigned short U16;

typedef unsigned long U32;

typedef char int8;

typedef unsigned char uint8;

typedef unsigned char byte;

typedef short int16;

typedef unsigned short uint16;

typedef unsigned short word;

typedef long int32;

typedef unsigned long uint32;

typedef unsigned long dword;

typedef long S64;

typedef unsigned long U64;

typedef long int64;

typedef unsigned long uint64;

typedef unsigned long qword;

typedef struct MonstList MonstList;

typedef struct MonstLevel MonstLevel;

typedef void *va_list;

typedef struct ToT ToT;

typedef struct TCBH TCBH;

typedef struct TCB TCB;

typedef struct EvCB EvCB;

typedef struct EXEC EXEC;

typedef struct XF_HDR XF_HDR;

typedef struct DIRENTRY DIRENTRY;

typedef struct MATRIX MATRIX;

typedef struct VECTOR VECTOR;

typedef struct SVECTOR SVECTOR;

typedef struct CVECTOR CVECTOR;

typedef struct DVECTOR DVECTOR;

typedef struct EVECTOR EVECTOR;

typedef struct RVECTOR RVECTOR;

typedef struct CRVECTOR3 CRVECTOR3;

typedef struct DIVPOLYGON3 DIVPOLYGON3;

typedef struct CRVECTOR4 CRVECTOR4;

typedef struct DIVPOLYGON4 DIVPOLYGON4;

typedef struct SPOL SPOL;

typedef struct POL4 POL4;

typedef struct POL3 POL3;

typedef struct TMESH TMESH;

typedef struct QMESH QMESH;

typedef struct RECT RECT;

typedef struct RECT32 RECT32;

typedef struct DR_ENV DR_ENV;

typedef struct DRAWENV DRAWENV;

typedef struct DISPENV DISPENV;

typedef struct P_TAG P_TAG;

typedef struct P_CODE P_CODE;

typedef struct POLY_F3 POLY_F3;

typedef struct POLY_F4 POLY_F4;

typedef struct POLY_FT3 POLY_FT3;

typedef struct POLY_FT4 POLY_FT4;

typedef struct POLY_G3 POLY_G3;

typedef struct POLY_G4 POLY_G4;

typedef struct POLY_GT3 POLY_GT3;

typedef struct POLY_GT4 POLY_GT4;

typedef struct LINE_F2 LINE_F2;

typedef struct LINE_G2 LINE_G2;

typedef struct LINE_F3 LINE_F3;

typedef struct LINE_G3 LINE_G3;

typedef struct LINE_F4 LINE_F4;

typedef struct LINE_G4 LINE_G4;

typedef struct SPRT SPRT;

typedef struct SPRT_16 SPRT_16;

typedef struct SPRT_16 SPRT_8;

typedef struct TILE TILE;

typedef struct TILE_16 TILE_16;

typedef struct TILE_16 TILE_8;

typedef struct TILE_16 TILE_1;

typedef struct DR_MODE DR_MODE;

typedef struct DR_MODE DR_TWIN;

typedef struct DR_MODE DR_AREA;

typedef struct DR_MODE DR_OFFSET;

typedef struct DR_MOVE DR_MOVE;

typedef struct DR_LOAD DR_LOAD;

typedef struct DR_TPAGE DR_TPAGE;

typedef struct DR_MODE DR_STP;

typedef struct TMD_PRIM TMD_PRIM;

typedef struct TIM_IMAGE TIM_IMAGE;

typedef char CHAR;

typedef int CLSID;

typedef int SIZEL;

typedef int POINTL;

typedef unsigned long *FARPROC;

typedef unsigned long FOURCC;

typedef unsigned char *LPDRAWITEMSTRUCT;

typedef unsigned long *LPSECURITY_ATTRIBUTES;

typedef void *DLGPROC;

typedef unsigned long COLORREF;

typedef unsigned short *LPINT;

typedef unsigned long HCURSOR;

typedef unsigned long TIMERPROC;

typedef unsigned long HFONT;

typedef unsigned long CRITICAL_SECTION;

typedef unsigned long *LPCRITICAL_SECTION;

typedef long *LPTOP_LEVEL_EXCEPTION_FILTER;

typedef unsigned long REGSAM;

typedef unsigned long ATOM;

typedef unsigned long HMENU;

typedef unsigned long *PUINT;

typedef void VOID;

typedef unsigned long __int64;

typedef unsigned long DWORD;

typedef unsigned long *LPDWORD;

typedef unsigned short WORD;

typedef short SHORT;

typedef unsigned char BYTE;

typedef char *HKEY;

typedef char **PHKEY;

typedef char TCHAR;

typedef void *LPVOID;

typedef void *LPCVOID;

typedef void *LPOVERLAPPED;

typedef char *LPSTR;

typedef char *LPCSTR;

typedef char *LPTSTR;

typedef char *LPCTSTR;

typedef unsigned char *LPBYTE;

typedef long WPARAM;

typedef unsigned long LPARAM;

typedef unsigned long HWND;

typedef unsigned long HINSTANCE;

typedef unsigned long LRESULT;

typedef unsigned long HRESULT;

typedef unsigned long HANDLE;

typedef unsigned long HPALETTE;

typedef unsigned long HDC;

typedef long LONG;

typedef long *LPLONG;

typedef long *PLONG;

typedef unsigned long LCID;

typedef unsigned long HMODULE;

typedef unsigned long *LPSIZE;

typedef struct RECT HRGN;

typedef struct RECT LPCDLGTEMPLATE;

typedef struct RECT *LPCRECT;

typedef unsigned long (*WNDPROC)();

typedef unsigned long HICON;

typedef unsigned long HBRUSH;

typedef void *HTRANS;

typedef struct POINT POINT;

typedef struct MSG MSG;

typedef struct MSG *LPMSG;

typedef struct FILETIME FILETIME;

typedef struct FILETIME *PFILETIME;

typedef struct FILETIME *LPFILETIME;

typedef struct _WIN32_FIND_DATA _WIN32_FIND_DATA;

typedef struct _WIN32_FIND_DATA WIN32_FIND_DATA;

typedef struct _WIN32_FIND_DATA *LPWIN32_FIND_DATA;

typedef struct PALETTEENTRY PALETTEENTRY;

typedef struct PALETTEENTRY *LPPALETTEENTRY;

typedef struct PAINTSTRUCT PAINTSTRUCT;

typedef struct PAINTSTRUCT *LPPAINTSTRUCT;

typedef struct LARGE_INTEGER LARGE_INTEGER;

typedef struct GUID GUID;

typedef struct WAVEFORMATEX WAVEFORMATEX;

typedef struct MMCKINFO MMCKINFO;

typedef struct WAVEFORMAT WAVEFORMAT;

typedef struct PCMWAVEFORMAT PCMWAVEFORMAT;

typedef struct VS_FIXEDFILEINFO VS_FIXEDFILEINFO;

typedef struct WNDCLASSEX WNDCLASSEX;

typedef struct SHITEMID SHITEMID;

typedef struct _ITEMIDLIST _ITEMIDLIST;

typedef struct _ITEMIDLIST ITEMIDLIST;

typedef struct _ITEMIDLIST *LPITEMIDLIST;

typedef struct _ITEMIDLIST *LPCITEMIDLIST;

typedef struct _HSTRANS _HSTRANS;

typedef struct _HSTRANS *HSTRANS;

typedef struct SIZE SIZE;

typedef struct TBMP TBMP;

typedef struct TBMP *TPBMP;

typedef struct UIRECT UIRECT;

typedef struct UIRECT *LPUIRECT;

typedef struct MSFX MSFX;

typedef struct CKINFO CKINFO;

typedef struct TSnd TSnd;

typedef struct TSFX TSFX;

typedef struct AnimStruct AnimStruct;

typedef struct MonsterData MonsterData;

typedef struct CMonster CMonster;

typedef struct MonsterStruct MonsterStruct;

typedef struct UniqMonstStruct UniqMonstStruct;

typedef struct STONEPAL STONEPAL;

typedef enum MEM_TYPES MEM_TYPES;

typedef struct DEF_ARGS DEF_ARGS;

typedef int jmp_buf[12];

typedef long MHANDLE;

typedef int MTYPE;

typedef void (*GAL_FILTER)();

typedef enum GAL_ERROR_CODE GAL_ERROR_CODE;

typedef enum GAL_VERB_LEV GAL_VERB_LEV;

typedef struct MEM_INIT_INFO MEM_INIT_INFO;

typedef struct GAL_STRUCT GAL_STRUCT;

typedef struct TASK TASK;

typedef void (*TSK_CBACK)();

typedef void (*DOTSK_CBACK)();

typedef enum LANG_TYPE LANG_TYPE;

typedef enum LANG_DB_NO LANG_DB_NO;

typedef enum GM_SPEEDS GM_SPEEDS;

typedef struct tab_entry tab_entry;

typedef enum _item_indexes _item_indexes;

typedef struct PLStruct PLStruct;

typedef struct UItemStruct UItemStruct;

typedef struct ItemDataStruct ItemDataStruct;

typedef struct ItemGetRecordStruct ItemGetRecordStruct;

typedef struct ItemStruct ItemStruct;

typedef enum B_PER_PIX B_PER_PIX;

typedef struct FRAME_HDR FRAME_HDR;

typedef struct SysObj SysObj;

typedef void * (*STR_CB_PTR)();

typedef struct FileIO FileIO;

typedef struct CPart CPart;

typedef struct CBlock CBlock;

typedef struct CBlockHdr CBlockHdr;

typedef struct PAL PAL;

typedef struct PAL_INVRAM PAL_INVRAM;

typedef struct DECOMP_BUFFER DECOMP_BUFFER;

typedef struct ALL_DECOMP_BUFFERS ALL_DECOMP_BUFFERS;

typedef struct SPR_HDR SPR_HDR;

typedef struct TP_LOAD_HDR TP_LOAD_HDR;

typedef struct CTextFileInfo CTextFileInfo;

typedef struct CCreatureAction CCreatureAction;

typedef struct CCreatureHdr CCreatureHdr;

typedef struct TextDat TextDat;

typedef struct CScreen CScreen;

typedef struct OBJ_LOAD_INFO OBJ_LOAD_INFO;

typedef struct ObjDataStruct ObjDataStruct;

typedef struct ObjectStruct ObjectStruct;

typedef struct ShadowStruct ShadowStruct;

typedef struct ScrollStruct ScrollStruct;

typedef struct THEME_LOC THEME_LOC;

typedef struct MINIXY MINIXY;

typedef struct MICROS MICROS;

typedef struct map_info map_info;

typedef struct PortalStruct PortalStruct;

typedef struct QuestStruct QuestStruct;

typedef struct QuestData QuestData;

typedef enum _setlevels _setlevels;

typedef struct TCmd TCmd;

typedef struct TCmdLoc TCmdLoc;

typedef struct TCmdLocParam1 TCmdLocParam1;

typedef struct TCmdLocParam2 TCmdLocParam2;

typedef struct TCmdLocParam3 TCmdLocParam3;

typedef struct TCmdParam1 TCmdParam1;

typedef struct TCmdParam2 TCmdParam2;

typedef struct TCmdParam3 TCmdParam3;

typedef struct TCmdGolem TCmdGolem;

typedef struct TCmdQuest TCmdQuest;

typedef struct TCmdGItem TCmdGItem;

typedef struct TCmdPItem TCmdPItem;

typedef struct TCmdChItem TCmdChItem;

typedef struct TCmdDelItem TCmdDelItem;

typedef struct TCmdDamage TCmdDamage;

typedef struct TCmdPlrInfoHdr TCmdPlrInfoHdr;

typedef struct TCmdString TCmdString;

typedef struct TFakeCmdPlr TFakeCmdPlr;

typedef struct TFakeDropPlr TFakeDropPlr;

typedef struct TSyncHeader TSyncHeader;

typedef struct TSyncMonster TSyncMonster;

typedef struct TPktHdr TPktHdr;

typedef struct TPkt TPkt;

typedef struct DMonsterStr DMonsterStr;

typedef struct DObjectStr DObjectStr;

typedef struct DLevel DLevel;

typedef struct LocalLevel LocalLevel;

typedef struct DPortal DPortal;

typedef struct MultiQuests MultiQuests;

typedef struct DJunk DJunk;

typedef struct OBJ_TYPE_INFO OBJ_TYPE_INFO;

typedef struct OBJ_LIST OBJ_LIST;

typedef struct OBJ_STRUCT OBJ_STRUCT;

typedef struct CPad CPad;

typedef enum TXT_JUST TXT_JUST;

typedef struct CFont CFont;

typedef struct SCREEN_ENV SCREEN_ENV;

typedef struct LittleGt4 LittleGt4;

typedef struct RGBPOLY RGBPOLY;

typedef struct glRGBPOLY glRGBPOLY;

typedef struct RgbBlockInf RgbBlockInf;

typedef struct RGBPOINT RGBPOINT;

typedef struct RGBData RGBData;

typedef int (*MAPITFUNC)();

typedef struct CBlocks CBlocks;

typedef struct Dialog Dialog;

typedef struct DB DB;

typedef enum PLR_MODE PLR_MODE;

typedef struct PlayerStruct PlayerStruct;

typedef struct controller_pos controller_pos;

typedef struct pad_assigns pad_assigns;

typedef struct KEY_ASSIGNS KEY_ASSIGNS;

typedef struct KEY_ASSIGNS key_assigns;

typedef enum CTRL_SET CTRL_SET;

typedef enum PACTION PACTION;

typedef struct CPlayer CPlayer;

typedef struct SpellTarget SpellTarget;

typedef enum TARGET TARGET;

typedef struct GamePad GamePad;

typedef struct found_objects found_objects;

typedef void (*CdlCB)();

typedef struct CdlLOC CdlLOC;

typedef struct CdlFILTER CdlFILTER;

typedef struct CdlATV CdlATV;

typedef struct CdlFILE CdlFILE;

typedef struct StHEADER StHEADER;

typedef struct PCIO PCIO;

typedef struct CdIO CdIO;

typedef struct DList DList;

typedef char *MEMBLOCK;

typedef struct ARGB ARGB;

typedef struct shapetbl shapetbl;

typedef struct shapetbl SHAPE;

typedef struct windowtbl windowtbl;

typedef struct windowtbl WINDOW;

typedef struct coorddef coorddef;

typedef struct coorddef LIBCOORD;

typedef struct scoorddef scoorddef;

typedef struct scoorddef SCOORD;

typedef struct matrixtdef matrixtdef;

typedef struct matrixtdef MATRIX3DT;

typedef void (*VOIDFN)();

typedef struct TSPRT TSPRT;

typedef int INTFN();

typedef struct memclassstruct memclassstruct;

typedef struct memclassstruct MEMORYCLASS;

typedef struct FONTFILE FONTFILE;

typedef struct coordsdef coordsdef;

typedef struct coordsdef COORDS;

typedef struct linedef linedef;

typedef struct linedef LINE;

typedef struct linesdef linesdef;

typedef struct linesdef LINES;

typedef struct dirangledef dirangledef;

typedef struct dirangledef DIRANGLES;

typedef struct arcangledef arcangledef;

typedef struct arcangledef ARCANGLES;

typedef struct SHAPETABLEENTRY SHAPETABLEENTRY;

typedef struct SHAPEFILE SHAPEFILE;

typedef struct radialsymdef radialsymdef;

typedef struct radialsymdef RADIALSYM;

typedef struct graphicsmodeinfostruct graphicsmodeinfostruct;

typedef struct graphicsmodeinfostruct GRAPHICSMODEINFO;

typedef void MVI;

typedef int EACHOOKCALLBACKFUNC();

typedef int arg_t;

typedef struct chunkhdrstruct chunkhdrstruct;

typedef struct chunkhdrstruct CHUNKHDR;

typedef struct chunkhdrchkstruct chunkhdrchkstruct;

typedef struct chunkhdrchkstruct CHUNKHDRCHK;

typedef void THREADPROC();

typedef int SYSTEMTASK();

typedef struct UNIQUEID UNIQUEID;

typedef struct threadstruct threadstruct;

typedef struct threadstruct THREAD;

typedef struct cdstreamstruct cdstreamstruct;

typedef struct cdstreamstruct CDSTREAM;

typedef struct STREAM STREAM;

typedef struct STRHDR STRHDR;

typedef struct SFXHDR SFXHDR;

typedef enum OVER_TYPE OVER_TYPE;

typedef unsigned short DECDCTTAB[34816];

typedef struct DECDCTENV DECDCTENV;

typedef struct ENCSPUENV ENCSPUENV;

typedef struct SpuVolume SpuVolume;

typedef struct SpuVoiceAttr SpuVoiceAttr;

typedef struct SpuReverbAttr SpuReverbAttr;

typedef struct SpuDecodedData SpuDecodedData;

typedef struct SpuDecodedData SpuDecodeData;

typedef struct SpuExtAttr SpuExtAttr;

typedef struct SpuCommonAttr SpuCommonAttr;

typedef void (*SpuIRQCallbackProc)();

typedef void (*SpuTransferCallbackProc)();

typedef struct SpuEnv SpuEnv;

typedef struct SpuStVoiceAttr SpuStVoiceAttr;

typedef struct SpuStEnv SpuStEnv;

typedef void (*SpuStCallbackProc)();

typedef struct VabHdr VabHdr;

typedef struct ProgAtr ProgAtr;

typedef struct VagAtr VagAtr;

typedef struct SndVolume SndVolume;

typedef struct SndVolume2 SndVolume2;

typedef struct SndRegisterAttr SndRegisterAttr;

typedef struct SndVoiceStats SndVoiceStats;

typedef void (*SsMarkCallbackProc)();

typedef struct _SsFCALL _SsFCALL;

typedef void (*MissPrintPtr)();

typedef struct MissileStruct MissileStruct;

typedef struct SPELLFX_DAT SPELLFX_DAT;

typedef struct Particle Particle;

typedef struct strheader strheader;

typedef int strdata[504];

typedef struct strsec strsec;

typedef struct mdc_header mdc_header;

typedef enum ping_status ping_status;

typedef struct file_header file_header;

typedef enum write_ret write_ret;

typedef enum read_ret read_ret;

typedef enum card_events card_events;

typedef enum hw_event hw_event;

typedef void (*FeFuncPtr)();

typedef struct FeTable FeTable;

typedef struct FeStruct FeStruct;

typedef struct FE_PLR FE_PLR;

typedef struct FE_CREATE FE_CREATE;

typedef struct OrigPkItemStruct OrigPkItemStruct;

typedef struct PcPkItemStruct PcPkItemStruct;

typedef struct PcPkPlayerStruct PcPkPlayerStruct;

typedef struct PkItemStruct PkItemStruct;

typedef struct PkPlayerStruct PkPlayerStruct;

typedef struct CharDataStructDef CharDataStructDef;

typedef enum KANJI_FRMS KANJI_FRMS;

typedef struct LOAD_IMAGE_ARGS LOAD_IMAGE_ARGS;

typedef struct PRIM_BUFFER PRIM_BUFFER;

typedef enum TPAGE_TYPES TPAGE_TYPES;

typedef struct TP_LINK TP_LINK;

typedef struct TPAGE_DEF TPAGE_DEF;

typedef struct MEM_INFO MEM_INFO;

typedef enum FILE_SYSTEM FILE_SYSTEM;

typedef enum DEV_KIT DEV_KIT;

typedef struct LNK_OPTS LNK_OPTS;

typedef struct DatIO DatIO;

typedef struct bank_entry bank_entry;

typedef struct PanelXY PanelXY;

typedef struct GPanel GPanel;

typedef struct RgbTest RgbTest;

typedef struct DPatsStruct DPatsStruct;

typedef struct NODE NODE;

typedef struct NODE HALLNODE;

typedef struct ROOMNODE ROOMNODE;

typedef struct STextStruct STextStruct;

typedef struct SNDPLAYOPTS SNDPLAYOPTS;

typedef struct SNDLIMITS SNDLIMITS;

typedef struct SNDUSAGE SNDUSAGE;

typedef struct LightListStruct LightListStruct;

typedef struct LightListStruct2 LightListStruct2;

typedef struct TriggerStruct TriggerStruct;

typedef struct BLOCK BLOCK;

typedef struct MEMSTRUCT MEMSTRUCT;

typedef struct TextDataStruct TextDataStruct;

typedef struct CPauseMessages CPauseMessages;

typedef struct CTempPauseMessage CTempPauseMessage;

typedef struct FontItem FontItem;

typedef struct FontTab FontTab;

typedef struct TNQ TNQ;

typedef struct TownerStruct TownerStruct;

typedef struct QuestTalkData QuestTalkData;

typedef struct POLY_FT4 (**OBJ_PFUNC)();

typedef struct DeadStruct DeadStruct;

typedef struct MStr MStr;

typedef struct IStr IStr;

typedef struct MissStr MissStr;

typedef struct OStr OStr;

typedef struct DStr DStr;

typedef struct CacheInfo CacheInfo;

typedef struct CachedInfoList CachedInfoList;

typedef struct TownToCreature TownToCreature;

typedef struct DR_LOAD2 DR_LOAD2;

typedef struct Overlay Overlay;

typedef struct PlayerParam PlayerParam;

typedef void (*TMenuFcn)();

typedef struct TMenuItem TMenuItem;

typedef void (*TMenuUpdateFcn)();

typedef struct SpellData SpellData;

typedef unsigned char PACKET;

typedef struct GsCOORD2PARAM GsCOORD2PARAM;

typedef struct _GsCOORDINATE2 _GsCOORDINATE2;

typedef struct _GsCOORDINATE2 GsCOORDINATE2;

typedef struct GsVIEW2 GsVIEW2;

typedef struct GsRVIEW2 GsRVIEW2;

typedef struct GsF_LIGHT GsF_LIGHT;

typedef struct GsOT_TAG GsOT_TAG;

typedef struct GsOT GsOT;

typedef struct GsDOBJ2 GsDOBJ2;

typedef struct GsDOBJ3 GsDOBJ3;

typedef struct GsDOBJ2 GsDOBJ4;

typedef struct GsDOBJ5 GsDOBJ5;

typedef struct GsSPRITE GsSPRITE;

typedef struct GsSPARRAY GsSPARRAY;

typedef struct GsCELL GsCELL;

typedef struct GsMAP GsMAP;

typedef struct GsBG GsBG;

typedef struct GsLINE GsLINE;

typedef struct GsGLINE GsGLINE;

typedef struct GsBOXF GsBOXF;

typedef struct GsFOGPARAM GsFOGPARAM;

typedef struct GsIMAGE GsIMAGE;

typedef struct _GsPOSITION _GsPOSITION;

typedef struct GsOBJTABLE2 GsOBJTABLE2;

typedef struct _GsFCALL _GsFCALL;

typedef struct TMD_P_F3 TMD_P_F3;

typedef struct TMD_P_G3 TMD_P_G3;

typedef struct TMD_P_F3G TMD_P_F3G;

typedef struct TMD_P_G3G TMD_P_G3G;

typedef struct TMD_P_NF3 TMD_P_NF3;

typedef struct TMD_P_NG3 TMD_P_NG3;

typedef struct TMD_P_F4 TMD_P_F4;

typedef struct TMD_P_G4 TMD_P_G4;

typedef struct TMD_P_F4G TMD_P_F4G;

typedef struct TMD_P_G4G TMD_P_G4G;

typedef struct TMD_P_NF4 TMD_P_NF4;

typedef struct TMD_P_NG4 TMD_P_NG4;

typedef struct TMD_P_TF3 TMD_P_TF3;

typedef struct TMD_P_TG3 TMD_P_TG3;

typedef struct TMD_P_TNF3 TMD_P_TNF3;

typedef struct TMD_P_TNG3 TMD_P_TNG3;

typedef struct TMD_P_TF4 TMD_P_TF4;

typedef struct TMD_P_TG4 TMD_P_TG4;

typedef struct TMD_P_TNF4 TMD_P_TNF4;

typedef struct TMD_P_TNG4 TMD_P_TNG4;

typedef struct TMD_STRUCT TMD_STRUCT;

typedef struct VERT VERT;

typedef struct VERTC VERTC;

typedef struct GsADIV_FT4 GsADIV_FT4;

typedef struct GsADIV_P_FT4 GsADIV_P_FT4;

typedef struct GsADIV_GT4 GsADIV_GT4;

typedef struct GsADIV_P_GT4 GsADIV_P_GT4;

typedef struct GsADIV_G4 GsADIV_G4;

typedef struct GsADIV_P_GT4 GsADIV_P_G4;

typedef struct GsADIV_F4 GsADIV_F4;

typedef struct GsADIV_P_FT4 GsADIV_P_F4;

typedef struct GsADIV_FT3 GsADIV_FT3;

typedef struct GsADIV_P_FT3 GsADIV_P_FT3;

typedef struct GsADIV_GT3 GsADIV_GT3;

typedef struct GsADIV_P_GT3 GsADIV_P_GT3;

typedef struct GsADIV_G3 GsADIV_G3;

typedef struct GsADIV_P_GT3 GsADIV_P_G3;

typedef struct GsADIV_F3 GsADIV_F3;

typedef struct GsADIV_P_FT3 GsADIV_P_F3;

typedef struct _GsCOORDUNIT _GsCOORDUNIT;

typedef struct _GsCOORDUNIT GsCOORDUNIT;

typedef struct GsVIEWUNIT GsVIEWUNIT;

typedef struct GsRVIEWUNIT GsRVIEWUNIT;

typedef struct GsUNIT GsUNIT;

typedef struct GsTYPEUNIT GsTYPEUNIT;

typedef struct GsARGUNIT GsARGUNIT;

typedef struct GsWORKUNIT GsWORKUNIT;

typedef struct GsARGUNIT_NORMAL GsARGUNIT_NORMAL;

typedef struct GsARGUNIT_SHARED GsARGUNIT_SHARED;

typedef struct GsARGUNIT_IMAGE GsARGUNIT_IMAGE;

typedef struct GsARGUNIT_GND GsARGUNIT_GND;

typedef struct GsARGUNIT_GNDT GsARGUNIT_GNDT;

typedef struct GsARGUNIT_JntMIMe GsARGUNIT_JntMIMe;

typedef struct GsARGUNIT_RstJntMIMe GsARGUNIT_RstJntMIMe;

typedef struct GsARGUNIT_VNMIMe GsARGUNIT_VNMIMe;

typedef struct GsARGUNIT_RstVNMIMe GsARGUNIT_RstVNMIMe;

typedef struct GsARGUNIT_ANIM GsARGUNIT_ANIM;

typedef struct GsSEH GsSEH;

typedef struct GsSEQ GsSEQ;

typedef struct InitPos InitPos;

typedef struct t11TLinkedList1Z8PalEntry t11TLinkedList1Z8PalEntry;

typedef struct PalEntry PalEntry;

typedef struct t10Collection2Z8PalEntryi20 t10Collection2Z8PalEntryi20;

typedef struct PalCollection PalCollection;

typedef struct BIRDSTRUCT BIRDSTRUCT;

typedef struct BIRDSTRUCT Bird;

typedef struct Perch Perch;

typedef struct PInf PInf;

typedef struct bird bird;

typedef struct _HSCODESTREAM _HSCODESTREAM;

typedef struct _HSCODESTREAM *HSCODESTREAM;

typedef struct _SCODEEXECUTEDATA _SCODEEXECUTEDATA;

typedef struct _SCODEEXECUTEDATA SCODEEXECUTEDATA;

typedef struct _SCODEEXECUTEDATA *SCODEEXECUTEDATAPTR;

typedef void (*SEVTHANDLER)();

typedef struct _HSARCHIVE _HSARCHIVE;

typedef struct _HSARCHIVE *HSARCHIVE;

typedef struct _HSFILE _HSFILE;

typedef struct _HSFILE *HSFILE;

typedef struct _HSFINDFILE _HSFINDFILE;

typedef struct _HSFINDFILE *HSFINDFILE;

typedef struct _HSGDIOBJ _HSGDIOBJ;

typedef struct _HSGDIOBJ *HSGDIOBJ;

typedef struct _HSGDIFONT _HSGDIFONT;

typedef struct _HSGDIFONT *HSGDIFONT;

typedef struct _PARAMS _PARAMS;

typedef struct _PARAMS PARAMS;

typedef struct _PARAMS *PARAMSPTR;

typedef struct _PARAMS *LPPARAMS;

typedef unsigned char (*SMSGIDLEPROC)();

typedef void (*SMSGHANDLER)();

typedef struct _SNETCAPS _SNETCAPS;

typedef struct _SNETCAPS SNETCAPS;

typedef struct _SNETCAPS *SNETCAPSPTR;

typedef struct _SNETCREATEDATA _SNETCREATEDATA;

typedef struct _SNETCREATEDATA SNETCREATEDATA;

typedef struct _SNETCREATEDATA *SNETCREATEDATAPTR;

typedef struct _SNET_DATA_SYSCOLORTABLE _SNET_DATA_SYSCOLORTABLE;

typedef struct _SNET_DATA_SYSCOLORTABLE SNET_DATA_SYSCOLORTABLE;

typedef struct _SNET_DATA_SYSCOLORTABLE *SNET_DATA_SYSCOLORTABLEPTR;

typedef struct _SNETEVENT _SNETEVENT;

typedef struct _SNETEVENT SNETEVENT;

typedef struct _SNETEVENT *SNETEVENTPTR;

typedef unsigned char (*SNETABORTPROC)();

typedef unsigned char (*SNETCATEGORYPROC)();

typedef unsigned char (*SNETCHECKAUTHPROC)();

typedef unsigned char (*SNETCREATEPROC)();

typedef unsigned char (*SNETDRAWDESCPROC)();

typedef unsigned char (*SNETENUMDEVICESPROC)();

typedef unsigned char (*SNETENUMGAMESPROC)();

typedef unsigned char (*SNETENUMPROVIDERSPROC)();

typedef void (*SNETEVENTPROC)();

typedef unsigned char (*SNETGETARTPROC)();

typedef unsigned char (*SNETGETDATAPROC)();

typedef int (*SNETMESSAGEBOXPROC)();

typedef unsigned char (*SNETPLAYSOUNDPROC)();

typedef unsigned char (*SNETSELECTEDPROC)();

typedef unsigned char (*SNETSTATUSPROC)();

typedef struct _SNETPLAYERDATA _SNETPLAYERDATA;

typedef struct _SNETPLAYERDATA SNETPLAYERDATA;

typedef struct _SNETPLAYERDATA *SNETPLAYERDATAPTR;

typedef struct _SNETPROGRAMDATA _SNETPROGRAMDATA;

typedef struct _SNETPROGRAMDATA SNETPROGRAMDATA;

typedef struct _SNETPROGRAMDATA *SNETPROGRAMDATAPTR;

typedef struct _SNETUIDATA _SNETUIDATA;

typedef struct _SNETUIDATA SNETUIDATA;

typedef struct _SNETUIDATA *SNETUIDATAPTR;

typedef struct _SNETVERSIONDATA _SNETVERSIONDATA;

typedef struct _SNETVERSIONDATA SNETVERSIONDATA;

typedef struct _SNETVERSIONDATA *SNETVERSIONDATAPTR;

typedef struct _SNETADDR _SNETADDR;

typedef struct _SNETADDR SNETADDR;

typedef struct _SNETADDR *SNETADDRPTR;

typedef struct _SNETSPI_DEVICELIST _SNETSPI_DEVICELIST;

typedef struct _SNETSPI_DEVICELIST SNETSPI_DEVICELIST;

typedef struct _SNETSPI_DEVICELIST *SNETSPI_DEVICELISTPTR;

typedef struct _SNETSPI_GAMELIST _SNETSPI_GAMELIST;

typedef struct _SNETSPI_GAMELIST SNETSPI_GAMELIST;

typedef struct _SNETSPI_GAMELIST *SNETSPI_GAMELISTPTR;

typedef struct _SNETSPI _SNETSPI;

typedef struct _SNETSPI SNETSPI;

typedef struct _SNETSPI *SNETSPIPTR;

typedef unsigned char (*SNETSPIBIND)();

typedef unsigned char (*SNETSPIQUERY)();

typedef struct _HSVIDEO _HSVIDEO;

typedef struct _HSVIDEO *HSVIDEO;

typedef struct _SVIDPALETTEUSE _SVIDPALETTEUSE;

typedef struct _SVIDPALETTEUSE SVIDPALETTEUSE;

typedef struct _SVIDPALETTEUSE *SVIDPALETTEUSEPTR;

typedef struct CCritSect CCritSect;

typedef struct CLock CLock;

typedef enum _ui_classes _ui_classes;

typedef enum _copyprot_results _copyprot_results;

typedef void (*PLAYSND)();

typedef enum _mainmenu_selections _mainmenu_selections;

typedef enum _difficulty _difficulty;

typedef struct _gamedata TGAMEDATA;

typedef struct _gamedata _gamedata;

typedef struct _uiheroinfo TUIHEROINFO;

typedef struct _uiheroinfo *TPUIHEROINFO;

typedef struct _uidefaultstats _uidefaultstats;

typedef struct _uidefaultstats TUIDEFSTATS;

typedef struct _uidefaultstats *TPUIDEFSTATS;

typedef struct _uiheroinfo _uiheroinfo;

typedef unsigned char (*ENUMHEROPROC)();

typedef unsigned char (*ENUMHEROS)();

typedef unsigned char (*CREATEHERO)();

typedef unsigned char (*DELETEHERO)();

typedef unsigned char (*GETDEFHERO)();

typedef enum _selhero_selections _selhero_selections;

typedef int (*PROGRESSFCN)();

typedef enum _dialmodes _dialmodes;

typedef struct _modeminfo TMODEM;

typedef struct _modeminfo *TPMODEM;

typedef struct _modeminfo _modeminfo;

typedef struct HelpStruct HelpStruct;

typedef struct OMENUITEM OMENUITEM;

typedef struct OMENULIST OMENULIST;

typedef struct FMVDAT FMVDAT;

typedef struct vbuffS vbuffS;

typedef struct block block;

typedef struct FeMenuTable FeMenuTable;

typedef struct Creds Creds;

typedef struct sjis sjis;

typedef struct _mdecanim _mdecanim;

typedef struct _mdecanim mdecanim;

typedef struct asec asec;

typedef unsigned long REG_OFF;

typedef struct CSDATA CSDATA;

typedef void (*MIADDPRC)();

typedef void (*MIPROC)();

typedef struct MissileData MissileData;

typedef struct MisFileData MisFileData;

typedef struct ThemeStruct ThemeStruct;

typedef struct _FILEHEADER _FILEHEADER;

typedef struct _FILEHEADER FILEHEADER;

typedef struct _FILEHEADER *FILEHEADERPTR;

typedef struct _HASHENTRY _HASHENTRY;

typedef struct _HASHENTRY HASHENTRY;

typedef struct _HASHENTRY *HASHENTRYPTR;

typedef struct _BLOCKENTRY _BLOCKENTRY;

typedef struct _BLOCKENTRY BLOCKENTRY;

typedef struct _BLOCKENTRY *BLOCKENTRYPTR;

typedef unsigned char (*TGetNameFcn)();

typedef struct _SHAREDDATA _SHAREDDATA;

typedef struct _SHAREDDATA SHAREDDATA;

typedef struct _SHAREDDATA *SHAREDDATAPTR;

typedef void (*TCrypt)();

typedef struct CompClass CompClass;

typedef struct CompressedLevs CompressedLevs;

typedef struct AMap AMap;

typedef struct CompLevelMaps CompLevelMaps;

typedef struct NoComp NoComp;

typedef struct PakComp PakComp;

typedef struct CrunchComp CrunchComp;

typedef struct TMegaPkt TMegaPkt;

typedef struct TBuffer TBuffer;

typedef struct tagPATHNODE tagPATHNODE;

typedef struct tagPATHNODE PATHNODE;

typedef unsigned char (*CHECKFUNC1)();

typedef int DIRECTION;

typedef struct MESSAGE_STR MESSAGE_STR;

typedef struct CINDER CINDER;

typedef struct DoorOff DoorOff;

typedef struct MONTH_DAYS MONTH_DAYS;

typedef unsigned char (*CHECKFUNC)();

typedef struct InvXY InvXY;

typedef struct MEM_HDR MEM_HDR;

typedef struct MEM_REG MEM_REG;

typedef struct MEM_HDR (**FIND_ROUTINE)();

typedef struct FILE FILE;

/* Begin typedefs which were autogenerated by TDR */

typedef int (*TDRFuncPtr_IterateVisibleMap__7CBlocksiiPFP9CacheInfoP8map_infoii_ib3Func)();

typedef unsigned char (*TDRFuncPtr_SortMemHdrList1CompFunc)();

typedef unsigned long (*TDRFuncPtr_GRL_SetWindowProc__FPFUlUilUl_Ul)();

typedef unsigned long (*TDRFuncPtr_GRL_SetWindowProc__FPFUlUilUl_Ul0NewProc)();

typedef void (*TDRFuncPtr_DBG_SetErrorFunc0EFunc)();

typedef void (*TDRFuncPtr_DBG_SetMessageHandler0Func)();

typedef void (*TDRFuncPtr_DBG_SetPollRoutine0Func)();

typedef void (*TDRFuncPtr_GAL_IterateEmptyMem1Func)();

typedef void (*TDRFuncPtr_GAL_IterateUsedMem1Func)();

typedef void (*TDRFuncPtr_GAL_SetAllocFilter)();

typedef void (*TDRFuncPtr_GAL_SetAllocFilter0NewFilter)();

typedef void (*TDRFuncPtr_GetActionButton__7GamePadPFi_v1func)();

typedef void (*TDRFuncPtr_GSYS_SetStackAndJump1Func)();

typedef void (*TDRFuncPtr_init_mem_card__FPFii_vUc0handler)();

typedef void (*TDRFuncPtr_SetComboDownButton__7GamePadiPFi_v2func)();

typedef void (*TDRFuncPtr_SetDownButton__7GamePadiPFi_v2func)();

typedef void (*TDRFuncPtr_SetUpAction__7GamePadPFi_vT11func)();

typedef void (*TDRFuncPtr_SetUpAction__7GamePadPFi_vT12upfunc)();

typedef void (*TDRFuncPtr_TSK_AddTask1Main)();

typedef void (*TDRFuncPtr_TSK_IterateTasks2CallBack)();

typedef void (*TDRFuncPtr_TSK_JumpAndResetStack0RunFunc)();

typedef void (*TDRFuncPtr_TSK_RepointProc1Func)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksEpilogue)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksEpilogue0Func)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksPrologue)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksPrologue0Func)();

typedef void (*TDRFuncPtr_TSK_SetStackFloodCallback)();

typedef void (*TDRFuncPtr_TSK_SetStackFloodCallback0Func)();

typedef void (*TDRFuncPtr_TSK_SetTaskEpilogue)();

typedef void (*TDRFuncPtr_TSK_SetTaskEpilogue0Epi)();

typedef void (*TDRFuncPtr_TSK_SetTaskPrologue)();

typedef void (*TDRFuncPtr_TSK_SetTaskPrologue0Pro)();

typedef void (*TDRFuncPtr_VID_DoThisNextSync__FPFv_v0Func)();

typedef void * (*TDRFuncPtr_LoAsyncStreamFile__4CdIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_LoStreamFile__4CdIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_LoStreamFile__4PCIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_LoStreamFile__5DatIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_StreamFile__6FileIOPCciPFPUciib_bii3Func)();

/* End typedefs which were autogenerated by TDR */

/* End typedefs */

/* Begin external declarations */

extern int NumOfMonsterListLevels; // offset 0x8011AA94
extern struct MonstLevel AllLevels[16]; // offset 0x800B7558
static unsigned char NumsLEV1M1A[4]; // offset 0x8011A780
static unsigned char NumsLEV1M1B[4]; // offset 0x8011A784
static unsigned char NumsLEV1M1C[5]; // offset 0x8011A788
static unsigned char NumsLEV2M2A[4]; // offset 0x8011A790
static unsigned char NumsLEV2M2B[4]; // offset 0x8011A794
static unsigned char NumsLEV2M2C[3]; // offset 0x8011A798
static unsigned char NumsLEV2M2D[4]; // offset 0x8011A79C
static unsigned char NumsLEV2M2QA[4]; // offset 0x8011A7A0
static unsigned char NumsLEV2M2QB[4]; // offset 0x8011A7A4
static unsigned char NumsLEV3M3A[4]; // offset 0x8011A7A8
static unsigned char NumsLEV3M3B[4]; // offset 0x8011A7AC
static unsigned char NumsLEV3M3C[4]; // offset 0x8011A7B0
static unsigned char NumsLEV3M3QA[4]; // offset 0x8011A7B4
static unsigned char NumsLEV4M4A[4]; // offset 0x8011A7B8
static unsigned char NumsLEV4M4B[4]; // offset 0x8011A7BC
static unsigned char NumsLEV4M4C[4]; // offset 0x8011A7C0
static unsigned char NumsLEV4M4D[4]; // offset 0x8011A7C4
static unsigned char NumsLEV4M4QA[4]; // offset 0x8011A7C8
static unsigned char NumsLEV4M4QB[5]; // offset 0x8011A7CC
static unsigned char NumsLEV4M4QC[5]; // offset 0x8011A7D4
static unsigned char NumsLEV5M5A[4]; // offset 0x8011A7DC
static unsigned char NumsLEV5M5B[4]; // offset 0x8011A7E0
static unsigned char NumsLEV5M5C[4]; // offset 0x8011A7E4
static unsigned char NumsLEV5M5D[4]; // offset 0x8011A7E8
static unsigned char NumsLEV5M5E[4]; // offset 0x8011A7EC
static unsigned char NumsLEV5M5F[3]; // offset 0x8011A7F0
static unsigned char NumsLEV5M5QA[4]; // offset 0x8011A7F4
static unsigned char NumsLEV6M6A[5]; // offset 0x8011A7F8
static unsigned char NumsLEV6M6B[3]; // offset 0x8011A800
static unsigned char NumsLEV6M6C[4]; // offset 0x8011A804
static unsigned char NumsLEV6M6D[3]; // offset 0x8011A808
static unsigned char NumsLEV6M6E[3]; // offset 0x8011A80C
static unsigned char NumsLEV6M6QA[3]; // offset 0x8011A810
static unsigned char NumsLEV7M7A[4]; // offset 0x8011A814
static unsigned char NumsLEV7M7B[4]; // offset 0x8011A818
static unsigned char NumsLEV7M7C[4]; // offset 0x8011A81C
static unsigned char NumsLEV7M7D[3]; // offset 0x8011A820
static unsigned char NumsLEV7M7E[3]; // offset 0x8011A824
static unsigned char NumsLEV8M8A[2]; // offset 0x8011A828
static unsigned char NumsLEV8M8B[4]; // offset 0x8011A82C
static unsigned char NumsLEV8M8C[3]; // offset 0x8011A830
static unsigned char NumsLEV8M8D[2]; // offset 0x8011A834
static unsigned char NumsLEV8M8QA[2]; // offset 0x8011A838
static unsigned char NumsLEV9M9A[4]; // offset 0x8011A83C
static unsigned char NumsLEV9M9B[3]; // offset 0x8011A840
static unsigned char NumsLEV9M9C[2]; // offset 0x8011A844
static unsigned char NumsLEV9M9D[2]; // offset 0x8011A848
static unsigned char NumsLEV10M10A[3]; // offset 0x8011A84C
static unsigned char NumsLEV10M10B[3]; // offset 0x8011A850
static unsigned char NumsLEV10M10C[2]; // offset 0x8011A854
static unsigned char NumsLEV10M10D[2]; // offset 0x8011A858
static unsigned char NumsLEV10M10QA[3]; // offset 0x8011A85C
static unsigned char NumsLEV11M11A[3]; // offset 0x8011A860
static unsigned char NumsLEV11M11B[3]; // offset 0x8011A864
static unsigned char NumsLEV11M11C[3]; // offset 0x8011A868
static unsigned char NumsLEV11M11D[2]; // offset 0x8011A86C
static unsigned char NumsLEV11M11E[2]; // offset 0x8011A870
static unsigned char NumsLEV12M12A[3]; // offset 0x8011A874
static unsigned char NumsLEV12M12B[3]; // offset 0x8011A878
static unsigned char NumsLEV12M12C[3]; // offset 0x8011A87C
static unsigned char NumsLEV12M12D[3]; // offset 0x8011A880
static unsigned char NumsLEV13M13A[3]; // offset 0x8011A884
static unsigned char NumsLEV13M13B[2]; // offset 0x8011A888
static unsigned char NumsLEV13M13C[2]; // offset 0x8011A88C
static unsigned char NumsLEV13M13D[3]; // offset 0x8011A890
static unsigned char NumsLEV13M13QB[3]; // offset 0x8011A894
static unsigned char NumsLEV14M14A[3]; // offset 0x8011A898
static unsigned char NumsLEV14M14B[3]; // offset 0x8011A89C
static unsigned char NumsLEV14M14C[2]; // offset 0x8011A8A0
static unsigned char NumsLEV14M14D[2]; // offset 0x8011A8A4
static unsigned char NumsLEV14M14E[2]; // offset 0x8011A8A8
static unsigned char NumsLEV14M14QB[3]; // offset 0x8011A8AC
static unsigned char NumsLEV15M15A[2]; // offset 0x8011A8B0
static unsigned char NumsLEV15M15B[3]; // offset 0x8011A8B4
static unsigned char NumsLEV15M15C[2]; // offset 0x8011A8B8
static unsigned char NumsLEV15M15QA[2]; // offset 0x8011A8BC
static unsigned char NumsLEV16M16D[3]; // offset 0x8011A8C0
static struct MonstList ChoiceListLEV1[3]; // offset 0x800B7088
static struct MonstList ChoiceListLEV2[6]; // offset 0x800B70B8
static struct MonstList ChoiceListLEV3[4]; // offset 0x800B7118
static struct MonstList ChoiceListLEV4[7]; // offset 0x800B7158
static struct MonstList ChoiceListLEV5[7]; // offset 0x800B71C8
static struct MonstList ChoiceListLEV6[6]; // offset 0x800B7238
static struct MonstList ChoiceListLEV7[5]; // offset 0x800B7298
static struct MonstList ChoiceListLEV8[5]; // offset 0x800B72E8
static struct MonstList ChoiceListLEV9[4]; // offset 0x800B7338
static struct MonstList ChoiceListLEV10[5]; // offset 0x800B7378
static struct MonstList ChoiceListLEV11[5]; // offset 0x800B73C8
static struct MonstList ChoiceListLEV12[4]; // offset 0x800B7418
static struct MonstList ChoiceListLEV13[5]; // offset 0x800B7458
static struct MonstList ChoiceListLEV14[6]; // offset 0x800B74A8
static struct MonstList ChoiceListLEV15[4]; // offset 0x800B7508
static struct MonstList ChoiceListLEV16[1]; // offset 0x800B7548
static struct TASK *GameTaskPtr; // offset 0x8011C604
extern struct LOAD_IMAGE_ARGS AllArgs[30]; // offset 0x800B75D8
extern int ArgsSoFar; // offset 0x8011AAA4
extern unsigned long *ThisOt; // offset 0x8011AAB4
extern struct POLY_FT4 *ThisPrimAddr; // offset 0x8011AAB8
static long hndPrimBuffers; // offset 0x8011C608
static struct PRIM_BUFFER *PrimBuffers; // offset 0x8011C60C
static unsigned char BufferDepth; // offset 0x8011C610
static unsigned char WorkRamId; // offset 0x8011C611
static unsigned char ScrNum; // offset 0x8011C612
static struct SCREEN_ENV *Screens; // offset 0x8011C614
static struct PRIM_BUFFER *PbToClear; // offset 0x8011C618
static unsigned char BufferNum; // offset 0x8011C61C
extern struct POLY_FT4 *AddrToAvoid; // offset 0x8011AABC
static unsigned char LastBuffer; // offset 0x8011C61D
static struct DISPENV *DispEnvToPut; // offset 0x8011C620
static int ThisOtSize; // offset 0x8011C624
static struct RECT ScrRect; // offset 0x8011AAC0
static int VidWait; // offset 0x8011C628
static struct SCREEN_ENV screen[2]; // offset 0x8011CAE0
static unsigned long VidTick; // offset 0x8011C630
static int VXOff; // offset 0x8011C634
static int VYOff; // offset 0x8011C638
static void * DBufferFlag; // offset 0x8011AAC8
extern struct LNK_OPTS *Gaz; // offset 0x8011AAD8
extern int LastFmem; // offset 0x8011AADC
extern unsigned int GSYS_MemStart; // offset 0x8011AACC
extern unsigned int GSYS_MemEnd; // offset 0x8011AAD0
static struct MEM_INIT_INFO PsxMem; // offset 0x800B7920
static struct MEM_INIT_INFO PsxFastMem; // offset 0x800B7948
extern int LowestFmem; // offset 0x8011AAD4
extern int FileSYS; // offset 0x8011AAEC
static struct FileIO *FileSystem; // offset 0x8011C63C
static struct FileIO *OverlayFileSystem; // offset 0x8011C640
extern unsigned long LastAddr; // offset 0x8011AAFC
extern short DavesPad; // offset 0x8011AB12
extern short DavesPadDeb; // offset 0x8011AB14
extern long PDosh[2]; // offset 0x8011AB18
extern int DaveDebCount; // offset 0x8011AB0C
extern char STREAM_DIR[16]; // offset 0x800B79A4
extern char STREAM_BIN[16]; // offset 0x800B79B4
extern unsigned char EAC_DirectoryCache[400]; // offset 0x800B79C4
extern unsigned long BL_NoLumpFiles; // offset 0x8011AB60
extern unsigned long BL_NoStreamFiles; // offset 0x8011AB64
extern struct STRHDR *LFileTab; // offset 0x8011AB68
extern struct STRHDR *SFileTab; // offset 0x8011AB6C
extern unsigned char FileLoaded; // offset 0x8011AB70
extern unsigned char NoQuedAsyncs; // offset 0x8011AB71
extern unsigned char CurrAsync; // offset 0x8011AB72
extern int NoTAllocs; // offset 0x8011AB94
extern struct MEMSTRUCT MemBlock[60]; // offset 0x800B7B54
static void * CanPause; // offset 0x8011C644
static void * Paused; // offset 0x8011C648
extern struct TASK *TPtr; // offset 0x8011ABA4
static struct Dialog PBack; // offset 0x8011CBC0
extern unsigned char RawPadData0[34]; // offset 0x800B7F0C
extern unsigned char RawPadData1[34]; // offset 0x800B7F30
extern unsigned char demo_buffer[900]; // offset 0x800B7F54
extern int demo_pad_time; // offset 0x8011ABB4
extern int demo_pad_count; // offset 0x8011ABB8
extern struct CPad Pad0; // offset 0x800B7D34
extern struct CPad Pad1; // offset 0x800B7E20
extern unsigned long demo_finish; // offset 0x8011ABBC
extern int demo_start; // offset 0x8011ABC0
extern int cac_pad; // offset 0x8011ABC4
extern struct POLY_FT4 *CharFt4; // offset 0x8011ABE4
extern int CharFrm; // offset 0x8011ABE8
extern unsigned char WHITER; // offset 0x8011ABD1
extern unsigned char WHITEG; // offset 0x8011ABD2
extern unsigned char WHITEB; // offset 0x8011ABD3
extern unsigned char BLUER; // offset 0x8011ABD4
extern unsigned char BLUEG; // offset 0x8011ABD5
extern unsigned char BLUEB; // offset 0x8011ABD6
extern unsigned char REDR; // offset 0x8011ABD7
extern unsigned char REDG; // offset 0x8011ABD8
extern unsigned char REDB; // offset 0x8011ABD9
extern unsigned char GOLDR; // offset 0x8011ABDA
extern unsigned char GOLDG; // offset 0x8011ABDB
extern unsigned char GOLDB; // offset 0x8011ABDC
extern struct CFont MediumFont; // offset 0x800B82D8
extern struct CFont LargeFont; // offset 0x800B84F4
extern void * buttoncol; // offset 0x8011ABE0
extern struct FontItem LFontTab[114]; // offset 0x800B8710
extern struct FontTab LFont; // offset 0x800B88D8
extern struct FontItem MFontTab[118]; // offset 0x800B88E8
extern struct FontTab MFont; // offset 0x800B8AC0
extern unsigned char DialogRed; // offset 0x8011ABFD
extern unsigned char DialogGreen; // offset 0x8011ABFE
extern unsigned char DialogBlue; // offset 0x8011ABFF
extern unsigned char DialogTRed; // offset 0x8011AC00
extern unsigned char DialogTGreen; // offset 0x8011AC01
extern unsigned char DialogTBlue; // offset 0x8011AC02
extern struct TextDat *DialogTData; // offset 0x8011AC04
extern int DialogBackGfx; // offset 0x8011AC08
extern int DialogBackW; // offset 0x8011AC0C
extern int DialogBackH; // offset 0x8011AC10
extern int DialogBorderGfx; // offset 0x8011AC14
extern int DialogBorderTLW; // offset 0x8011AC18
extern int DialogBorderTLH; // offset 0x8011AC1C
extern int DialogBorderTRW; // offset 0x8011AC20
extern int DialogBorderTRH; // offset 0x8011AC24
extern int DialogBorderBLW; // offset 0x8011AC28
extern int DialogBorderBLH; // offset 0x8011AC2C
extern int DialogBorderBRW; // offset 0x8011AC30
extern int DialogBorderBRH; // offset 0x8011AC34
extern int DialogBorderTW; // offset 0x8011AC38
extern int DialogBorderTH; // offset 0x8011AC3C
extern int DialogBorderBW; // offset 0x8011AC40
extern int DialogBorderBH; // offset 0x8011AC44
extern int DialogBorderLW; // offset 0x8011AC48
extern int DialogBorderLH; // offset 0x8011AC4C
extern int DialogBorderRW; // offset 0x8011AC50
extern int DialogBorderRH; // offset 0x8011AC54
extern int DialogBevelGfx; // offset 0x8011AC58
extern int DialogBevelCW; // offset 0x8011AC5C
extern int DialogBevelCH; // offset 0x8011AC60
extern int DialogBevelLRW; // offset 0x8011AC64
extern int DialogBevelLRH; // offset 0x8011AC68
extern int DialogBevelUDW; // offset 0x8011AC6C
extern int DialogBevelUDH; // offset 0x8011AC70
extern int MY_DialogOTpos; // offset 0x8011AC74
static unsigned char DialogGBack; // offset 0x8011C64C
static char GShadeX; // offset 0x8011C64D
static char GShadeY; // offset 0x8011C64E
static unsigned char RandBTab[8]; // offset 0x8011C654
extern int Cxy[28]; // offset 0x800B8B10
extern unsigned char BORDERR; // offset 0x8011ABF7
extern unsigned char BORDERG; // offset 0x8011ABF8
extern unsigned char BORDERB; // offset 0x8011ABF9
extern unsigned char BACKR; // offset 0x8011ABFA
extern unsigned char BACKG; // offset 0x8011ABFB
extern unsigned char BACKB; // offset 0x8011ABFC
static char GShadeTab[64]; // offset 0x800B8AD0
static char GShadePX; // offset 0x8011ABF5
static char GShadePY; // offset 0x8011ABF6
extern unsigned char PlayDemoFlag; // offset 0x8011AC81
static int dx[3]; // offset 0x8011CBE0
static int dy[3]; // offset 0x8011CBF0
static void * InfraFlag; // offset 0x8011C65C
static int blockr; // offset 0x8011C660
static int blockg; // offset 0x8011C664
static int blockb; // offset 0x8011C668
extern int OldSp; // offset 0x8011ACE0
extern int ax; // offset 0x8011ACE4
extern int ay; // offset 0x8011ACE8
extern int PosAdj; // offset 0x8011ACAC
extern unsigned char P1ObjSelCount; // offset 0x8011AC8D
extern unsigned char P2ObjSelCount; // offset 0x8011AC8E
extern unsigned char P12ObjSelCount; // offset 0x8011AC8F
extern unsigned char P1ItemSelCount; // offset 0x8011AC90
extern unsigned char P2ItemSelCount; // offset 0x8011AC91
extern unsigned char P12ItemSelCount; // offset 0x8011AC92
extern unsigned char P1MonstSelCount; // offset 0x8011AC93
extern unsigned char P2MonstSelCount; // offset 0x8011AC94
extern unsigned char P12MonstSelCount; // offset 0x8011AC95
static unsigned short P1ObjSelCol; // offset 0x8011AC96
static unsigned short P2ObjSelCol; // offset 0x8011AC98
static unsigned short P12ObjSelCol; // offset 0x8011AC9A
static unsigned short P1ItemSelCol; // offset 0x8011AC9C
static unsigned short P2ItemSelCol; // offset 0x8011AC9E
static unsigned short P12ItemSelCol; // offset 0x8011ACA0
static unsigned short P1MonstSelCol; // offset 0x8011ACA2
static unsigned short P2MonstSelCol; // offset 0x8011ACA4
static unsigned short P12MonstSelCol; // offset 0x8011ACA6
extern struct CBlocks *CurrentBlocks; // offset 0x8011ACA8
static int LightMethod; // offset 0x8011ACB0
extern struct TownToCreature TownConv[10]; // offset 0x800B8B80
extern int OtShift; // offset 0x8011ACC4
extern int OldLighting; // offset 0x8011ACC8
extern int GMXAdj2; // offset 0x8011ACCC
extern int GMYAdj2; // offset 0x8011ACD0
extern int Adjust; // offset 0x8011ACD4
static struct POLY_FT4 MyFT4; // offset 0x8011CC00
extern struct TextDat (*AllDats[372]); // offset 0x800B9454
extern int TpW; // offset 0x8011AD1C
extern int TpH; // offset 0x8011AD20
extern int TpXDest; // offset 0x8011AD24
extern int TpYDest; // offset 0x8011AD28
extern struct POLY_GT4 MyGT4; // offset 0x800B9A24
extern struct TextDat DatPool[20]; // offset 0x800B8B94
extern int wank; // offset 0x8011AD10
extern enum OVER_TYPE CurrentOverlay; // offset 0x8011AD34
static unsigned long HaltTab[3]; // offset 0x801105F8
static struct Overlay FrontEndOver; // offset 0x8011CC28
static struct Overlay PregameOver; // offset 0x8011CC38
static struct Overlay GameOver; // offset 0x8011CC48
static struct Overlay FmvOver; // offset 0x8011CC58
static int OWorldX; // offset 0x8011C674
static int OWorldY; // offset 0x8011C678
static int WWorldX; // offset 0x8011C67C
static int WWorldY; // offset 0x8011C680
static int TimePerFrame; // offset 0x8011C684
static int CpuStart; // offset 0x8011C688
static int CpuTime; // offset 0x8011C68C
static int DrawTime; // offset 0x8011C690
static int DrawStart; // offset 0x8011C694
static int LastCpuTime; // offset 0x8011C698
static int LastDrawTime; // offset 0x8011C69C
static int DrawArea; // offset 0x8011C6A0
extern void * ProfOn; // offset 0x8011AD60
static unsigned short Level2Bgdata[25]; // offset 0x8011073C
extern unsigned char LevPals[17]; // offset 0x800B9A58
static int CutScreen; // offset 0x8011AD7C
extern struct PanelXY DefP1PanelXY; // offset 0x800B9A6C
extern struct PanelXY DefP1PanelXY2; // offset 0x800B9AC4
extern struct PanelXY DefP2PanelXY; // offset 0x800B9B1C
extern struct PanelXY DefP2PanelXY2; // offset 0x800B9B74
extern int hof; // offset 0x8011AD8C
extern int mof; // offset 0x8011AD90
static int SpdCol0; // offset 0x8011AD94
static int SpdCol1; // offset 0x8011AD98
static int SpdCol2; // offset 0x8011AD9C
static int SpdCol3; // offset 0x8011ADA0
static int SpdColInc0; // offset 0x8011ADA4
static int SpdColInc1; // offset 0x8011ADA8
static int SpdColInc2; // offset 0x8011ADAC
static int SpdColInc3; // offset 0x8011ADB0
static unsigned char DurColors[6][3]; // offset 0x800B9BCC
extern struct SFXHDR SFXTab[2]; // offset 0x800B9BE0
extern unsigned long STR_Buffer[18432]; // offset 0x800B9CE8
extern unsigned long Time; // offset 0x8011ADE8
extern void * CDWAIT; // offset 0x8011ADEC
extern struct SpuVoiceAttr voice_attr; // offset 0x800CBCE8
extern struct SFXHDR STRSave; // offset 0x800CBD28
static void * SavePause; // offset 0x8011C6A4
extern char NoActiveStreams; // offset 0x8011ADBD
static void * STRInit; // offset 0x8011ADC0
static int frame_rate; // offset 0x8011ADC4
static unsigned char CDAngle; // offset 0x8011ADC8
extern int my_spurate; // offset 0x8011ADCC
extern char SFXNotPlayed; // offset 0x8011AE08
extern char SFXNotInBank; // offset 0x8011AE09
static char spu_management[264]; // offset 0x8011CC68
static struct SpuReverbAttr rev_attr; // offset 0x8011CD78
static unsigned short NoSfx; // offset 0x8011C6AC
static unsigned short CHStatus[24]; // offset 0x8011CD98
static long OffsetHandle; // offset 0x8011ADFC
static int BankBase; // offset 0x8011AE00
static unsigned short SFXRemapTab[60]; // offset 0x801109C8
static int NoSNDRemaps; // offset 0x8011AE04
extern struct PalCollection ThePals; // offset 0x800CBDAC
extern unsigned short ShadClut; // offset 0x8011AE24
static struct InitPos InitialPositions[20]; // offset 0x80110A74
extern int demo_level; // offset 0x8011AE88
extern enum GM_SPEEDS speedstore; // offset 0x8011AE8C
static int buff[10]; // offset 0x8011CDC8
extern int old_val; // offset 0x8011AE90
extern struct TASK *DemoTask; // offset 0x8011AE94
extern struct TASK *DemoGameTask; // offset 0x8011AE98
extern struct TASK *tonys; // offset 0x8011AE9C
extern int demo_load; // offset 0x8011AE3C
extern int demo_record_load; // offset 0x8011AE40
extern int level_record; // offset 0x8011AE44
extern char demo_fade_finished; // offset 0x8011AE48
extern unsigned char demo_which; // offset 0x8011AE49
extern unsigned char demo_level_num[5]; // offset 0x8011AE4C
extern unsigned char demo_level_player[5]; // offset 0x8011AE54
extern unsigned char demo_level_spell1[5]; // offset 0x8011AE5C
extern unsigned char demo_level_spell2[5]; // offset 0x8011AE64
extern unsigned char demo_level_clothe[5]; // offset 0x8011AE6C
extern unsigned char quest_cheat_num; // offset 0x8011AE4A
extern unsigned char cheat_quest_flag; // offset 0x8011AE4B
extern int tony_poll; // offset 0x8011AE34
extern int moo_moo; // offset 0x8011AE38
extern unsigned char demo_level_dam[5]; // offset 0x8011AE74
extern unsigned char demo_level_dex[5]; // offset 0x8011AE7C
extern unsigned char demo_flash; // offset 0x8011AE81
extern int tonys_Task; // offset 0x8011AE84
extern void * DoShowPanel; // offset 0x8011B000
extern void * DoDrawBg; // offset 0x8011B004
static void * GlueFinished; // offset 0x8011C6B0
static void * DoHomingScroll; // offset 0x8011C6B4
static struct TextDat *TownerGfx; // offset 0x8011C6B8
static int CurrentMonsterList; // offset 0x8011C6BC
static int QuakeTime; // offset 0x8011C6C0
static int QuakeAmount; // offset 0x8011C6C4
extern struct PInf PlayerInfo[81]; // offset 0x800CBF98
static char ArmourChar[4]; // offset 0x8011B008
static char WepChar[10]; // offset 0x80110B68
static char CharChar[4]; // offset 0x8011B00C
static unsigned char JustLoadedPlayer; // offset 0x8011AFF0
static void * GameStarted; // offset 0x8011AFF4
static char ctrl_select_line; // offset 0x8011C6C8
static char ctrl_select_side; // offset 0x8011C6C9
static char ckeyheld; // offset 0x8011C6CA
static struct RECT CtrlRect; // offset 0x8011C6D0
extern unsigned char ctrlflag; // offset 0x8011B020
extern struct KEY_ASSIGNS txt_actions[20]; // offset 0x800CC40C
extern struct pad_assigns pad_txt[14]; // offset 0x800CC364
static int toppos; // offset 0x8011B01C
static struct Dialog CtrlBack; // offset 0x8011CDF0
static int AdvancedDefaults[20][2]; // offset 0x800CC54C
static int BeginnerDefaults[20][2]; // offset 0x800CC5EC
static void * waitnomore; // offset 0x8011B06C
extern void * penta_cycle; // offset 0x8011B0B0
extern int gr_scrxoff; // offset 0x8011B098
extern int gr_scryoff; // offset 0x8011B09C
extern unsigned short water_clut; // offset 0x8011B0A4
extern char visible_level; // offset 0x8011B0A8
extern char last_type; // offset 0x8011B095
extern unsigned int water_count; // offset 0x8011B0A0
extern unsigned short penta_clut; // offset 0x8011B0A6
extern char daylight; // offset 0x8011B0A9
extern int daytimer; // offset 0x8011B0AC
static int TitleAnimCount; // offset 0x8011B0C0
static int flametick; // offset 0x8011B0C4
static int frmlist[6]; // offset 0x800CC68C
static int xoff[6]; // offset 0x800CC6A4
extern int flamecol; // offset 0x8011B0C8
extern struct SPELLFX_DAT SpellFXDat[2]; // offset 0x800CC6DC
static struct Particle PartArray[16]; // offset 0x8011CE00
static int partOtPos; // offset 0x8011C6D8
static int partmonst; // offset 0x8011C6DC
extern int SetParticle; // offset 0x8011B0E4
static int p1partexecnum; // offset 0x8011B0E8
static int p2partexecnum; // offset 0x8011B0EC
static int JumpArray[8]; // offset 0x800CC6BC
static int partjumpflag; // offset 0x8011B0F0
static int partglowflag; // offset 0x8011B0F4
static int partcolour; // offset 0x8011B0F8
static void * anyfuckingmenus; // offset 0x8011B0FC
extern unsigned char select_flag; // offset 0x8011B11D
static struct RECT SelectRect; // offset 0x8011C6E0
static char item_select; // offset 0x8011C6E8
extern char QSpell[2]; // offset 0x8011B120
extern char _spltotype[2]; // offset 0x8011B124
extern struct CPlayer *gplayer; // offset 0x8011B110
static struct Dialog SelectBack; // offset 0x8011D040
static char mana_order[4]; // offset 0x8011B114
static char health_order[5]; // offset 0x8011B118
static struct TextDat (*DecRequestors[10]); // offset 0x8011D050
static unsigned short progress; // offset 0x8011C6EC
extern struct CScreen CutScr; // offset 0x800CC76C
extern void * TitleFlag; // offset 0x8011B140
static unsigned short Level2CutScreen[12]; // offset 0x80110CA8
static struct TASK *CutScreenTSK; // offset 0x8011B144
static void * GameLoading; // offset 0x8011B148
static void * BootScreen; // offset 0x8011B14C
static int ThisLev; // offset 0x8011B150
extern unsigned char block_buf[128]; // offset 0x800CC7E8
extern unsigned int card_ev0; // offset 0x8011B1C8
extern unsigned int card_ev1; // offset 0x8011B1CC
extern unsigned int card_ev2; // offset 0x8011B1D0
extern unsigned int card_ev3; // offset 0x8011B1D4
extern unsigned int card_ev10; // offset 0x8011B1D8
extern unsigned int card_ev11; // offset 0x8011B1DC
extern unsigned int card_ev12; // offset 0x8011B1E0
extern unsigned int card_ev13; // offset 0x8011B1E4
extern int card_dirty[2]; // offset 0x8011B1E8
extern struct TASK *MemcardTask; // offset 0x8011B1F0
extern int save_blocks; // offset 0x8011B1F4
extern int card_event; // offset 0x8011B1F8
extern int cardondelay; // offset 0x8011B1FC
extern int card_active[2]; // offset 0x8011B200
extern char *Savefilename; // offset 0x8011B208
extern char *Loadfilename; // offset 0x8011B20C
extern void * new_card_flag[2]; // offset 0x8011B210
extern void * MemCardActive; // offset 0x8011B160
extern void * DoLoadedGame; // offset 0x8011B184
extern void * MemcardOverlay; // offset 0x8011B164
extern int saveflag; // offset 0x8011B178
extern int loadflag; // offset 0x8011B17C
extern int formatflag; // offset 0x8011B180
extern int countdownloadcharblock; // offset 0x8011B16C
extern int card_side_empty[2]; // offset 0x8011B188
extern int card_side_read[2]; // offset 0x8011B190
extern int card_side_nogame[2]; // offset 0x8011B198
extern int card_side_noopt[2]; // offset 0x8011B1A0
extern int card_side_nocha[2]; // offset 0x8011B1A8
extern int card_side_load[2]; // offset 0x8011B1B8
extern int card_side_save[2]; // offset 0x8011B1B0
extern int card_side_format[2]; // offset 0x8011B1C0
extern int NewCardFlag; // offset 0x8011B168
static int never_hooked_events; // offset 0x8011B170
extern unsigned long MasterVol; // offset 0x8011B278
extern unsigned long MusicVol; // offset 0x8011B27C
extern unsigned long SoundVol; // offset 0x8011B280
extern unsigned long VideoVol; // offset 0x8011B284
extern unsigned long SpeechVol; // offset 0x8011B288
static struct TextDat *Slider; // offset 0x8011C6F0
static int sw; // offset 0x8011C6F4
static int sx; // offset 0x8011C6F8
static int sy; // offset 0x8011C6FC
static unsigned char Adjust; // offset 0x8011C700
static unsigned char qspin; // offset 0x8011C701
static unsigned char lqspin; // offset 0x8011C702
static enum LANG_TYPE OrigLang; // offset 0x8011C704
static enum LANG_TYPE OldLang; // offset 0x8011C708
static enum LANG_TYPE NewLang; // offset 0x8011C70C
extern int ReturnMenu; // offset 0x8011B28C
static struct RECT ORect; // offset 0x8011C710
static char (*McState[2]); // offset 0x8011C718
extern int they_pressed; // offset 0x8011B290
extern void * optionsflag; // offset 0x8011B248
extern int cmenu; // offset 0x8011B23C
extern int options_pad; // offset 0x8011B250
extern void * allspellsflag; // offset 0x8011B244
extern short Circle[64]; // offset 0x800CD2E0
extern void * goldcheat; // offset 0x8011B224
extern int OptionsSeed; // offset 0x8011B254
extern void * OptionsSetSeed; // offset 0x8011B258
extern void * CharacterBlockLoaded; // offset 0x8011B240
extern unsigned char Qfromoptions; // offset 0x8011B228
static int Spacing; // offset 0x8011B22C
static int cs; // offset 0x8011B230
static int lastcs; // offset 0x8011B234
static int lastlastcs; // offset 0x8011B238
extern int ReturnCards; // offset 0x8011B24C
extern void * DiabloDieFlag; // offset 0x8011B25C
extern void * PadFrig; // offset 0x8011B260
extern struct TASK *DrawOptionsTask; // offset 0x8011B264
extern struct OMENUITEM MainMenu[7]; // offset 0x800CC868
extern struct OMENUITEM GameMenu[12]; // offset 0x800CC910
extern struct OMENUITEM GameSpeedMenu[4]; // offset 0x800CCA30
extern struct OMENUITEM GameOverMenu[3]; // offset 0x800CCA90
extern struct OMENUITEM MemcardLoadGameOverMenu[4]; // offset 0x800CCAD8
extern struct OMENUITEM SoundMenu[7]; // offset 0x800CCB38
extern struct OMENUITEM CentreMenu[3]; // offset 0x800CCBE0
extern struct OMENUITEM LangMenu[6]; // offset 0x800CCC28
extern struct OMENUITEM QuitMenu[4]; // offset 0x800CCCB8
extern struct OMENUITEM AreYouSureMenu[4]; // offset 0x800CCD18
extern struct OMENUITEM MemcardMenu[7]; // offset 0x800CCD78
extern struct OMENUITEM MemcardLoadGameMenu[4]; // offset 0x800CCE20
extern struct OMENUITEM MemcardSaveGameMenu[4]; // offset 0x800CCE80
extern struct OMENUITEM MemcardSaveOptionsMenu[4]; // offset 0x800CCEE0
extern struct OMENUITEM MemcardLoadOptionsMenu[4]; // offset 0x800CCF40
extern struct OMENUITEM MemcardCharacterMenu[4]; // offset 0x800CCFA0
extern struct OMENUITEM MemcardSelectCard1[8]; // offset 0x800CD000
extern struct OMENUITEM MemcardSelectCard2[8]; // offset 0x800CD0C0
extern struct OMENUITEM MemcardFormatMenu[4]; // offset 0x800CD180
extern struct OMENUITEM SaveConfirmMenu[4]; // offset 0x800CD1E0
extern struct OMENULIST MenuList[20]; // offset 0x800CD240
extern int MonoX; // offset 0x8011B268
static void * debounce; // offset 0x8011B26C
static unsigned char KeyPos; // offset 0x8011B270
static unsigned short KeyTab[10]; // offset 0x800CD360
extern int old_pad; // offset 0x8011B274
extern struct BIRDSTRUCT BirdList[16]; // offset 0x800CD374
static int last_seenx[2]; // offset 0x8011C720
static int last_seeny[2]; // offset 0x8011C728
extern char hop_height; // offset 0x8011B29D
static struct Perch perches[4]; // offset 0x8011B2A0
static void * BirdFrig; // offset 0x8011B2A8
extern struct FMVDAT FmvTab[6]; // offset 0x800CD4F4
static enum KANJI_FRMS KanjiCacheType; // offset 0x8011C730
static struct vbuffS KanjiList[200]; // offset 0x8011D078
static struct ALL_DECOMP_BUFFERS *KanjiBuffers; // offset 0x8011C734
static struct FRAME_HDR *KanjiPalFrame; // offset 0x8011C738
static unsigned char KanjiFontData[18650]; // offset 0x8011D398
static struct TextDat *KanjiGfxTData; // offset 0x8011B2C4
static struct vbuffS *KanjiCache; // offset 0x8011B2C8
static int CacheLen; // offset 0x8011B2CC
static void * KanjiLoaded; // offset 0x8011B2D0
static struct RECT HelpRect; // offset 0x8011C73C
static unsigned char HelpTop; // offset 0x8011C744
static char help_select_line; // offset 0x8011C745
extern void * displayinghelp; // offset 0x8011B2F8
static struct Dialog HelpBack; // offset 0x80121C88
static void * helpflag; // offset 0x8011B2E0
static struct HelpStruct HelpList[25]; // offset 0x800CD524
static int AutoSpellList[12]; // offset 0x800CD650
extern int FeBackX; // offset 0x8011B364
extern int FeBackY; // offset 0x8011B368
extern int FeBackW; // offset 0x8011B36C
extern int FeBackH; // offset 0x8011B370
extern unsigned char FeFlag; // offset 0x8011B374
extern struct FeStruct FeBuffer[80]; // offset 0x800CDB78
extern int FePlayerNo; // offset 0x8011B378
static struct FE_CREATE *CStruct; // offset 0x8011C748
extern int FeBufferCount; // offset 0x8011B37C
extern int FeMaxBufferCount; // offset 0x8011B380
extern int FeNoOfPlayers; // offset 0x8011B384
extern unsigned char FePadInTab[2]; // offset 0x8011B388
extern unsigned char FePadInFlag; // offset 0x8011B38A
extern int FeChrClass[2]; // offset 0x8011B38C
extern char FePlayerName[2][11]; // offset 0x800CE2F8
extern struct FeTable *FeCurMenu; // offset 0x8011B394
extern int FeEnterLang; // offset 0x8011B398
extern unsigned char FePlayerNameFlag[2]; // offset 0x8011B39C
extern unsigned long FeCount; // offset 0x8011B3A0
extern int fileselect; // offset 0x8011B3A4
extern int BookMenu; // offset 0x8011B3A8
extern int FMVPress; // offset 0x8011B3AC
extern struct TextDat *FeTData; // offset 0x8011B320
extern void * JustQuitQText; // offset 0x8011B338
extern void * LoadedChar[2]; // offset 0x8011B328
extern struct TextDat *FlameTData; // offset 0x8011B324
extern unsigned char FeIsAVirgin; // offset 0x8011B330
extern int FeMenuDelay; // offset 0x8011B334
extern struct FeTable DummyMenu; // offset 0x800CD680
extern struct FeTable FeMainMenu; // offset 0x800CD69C
extern struct FeTable FeNewGameMenu; // offset 0x800CD6B8
extern struct FeTable FeNewP1ClassMenu; // offset 0x800CD6D4
extern struct FeTable FeNewP1NameMenu; // offset 0x800CD6F0
extern struct FeTable FeNewP2ClassMenu; // offset 0x800CD70C
extern struct FeTable FeNewP2NameMenu; // offset 0x800CD728
extern struct FeTable FeDifficultyMenu; // offset 0x800CD744
extern struct FeTable FeBackgroundMenu; // offset 0x800CD760
extern struct FeTable FeBook1Menu; // offset 0x800CD77C
extern struct FeTable FeBook2Menu; // offset 0x800CD798
extern struct FeTable FeLoadCharMenu; // offset 0x800CD7B4
extern struct FeTable FeLoadChar1Menu; // offset 0x800CD7D0
extern struct FeTable FeLoadChar2Menu; // offset 0x800CD7EC
static int fadeval; // offset 0x8011B33C
extern struct FeMenuTable FeMainMenuTable[5]; // offset 0x800CD808
extern struct FeMenuTable FeNewGameMenuTable[3]; // offset 0x800CD880
extern struct FeMenuTable FePlayerClassMenuTable[5]; // offset 0x800CD8C8
extern unsigned char FeNameEngMenuTable[40]; // offset 0x800CD940
extern struct FeMenuTable FeMemcardMenuTable[3]; // offset 0x800CD968
extern struct FeMenuTable FeDifficultyMenuTable[4]; // offset 0x800CD9B0
extern struct FeMenuTable FeBackgroundMenuTable[4]; // offset 0x800CDA10
extern struct FeMenuTable FeBook1MenuTable[5]; // offset 0x800CDA70
extern struct FeMenuTable FeBook2MenuTable[6]; // offset 0x800CDAE8
static void * DrawBackOn; // offset 0x8011B348
extern int FeAttractMode; // offset 0x8011B34C
extern int AttractNo; // offset 0x8011B350
extern unsigned long AttractTitleDelay; // offset 0x8011B354
extern unsigned long AttractMainDelay; // offset 0x8011B358
extern int FMVEndPad; // offset 0x8011B35C
static int JustInCredits; // offset 0x8011B360
extern int InCredits; // offset 0x8011B3BC
extern int CreditTitleNo; // offset 0x8011B3C0
extern int CreditSubTitleNo; // offset 0x8011B3C4
extern int card_status[2]; // offset 0x8011B3DC
extern int card_usable[2]; // offset 0x8011B3E4
extern int card_files[2]; // offset 0x8011B3EC
extern int card_changed[2]; // offset 0x8011B3F4
extern int last_card_status[2]; // offset 0x8011B3FC
extern int to_ascii_invalid_char; // offset 0x8011B3C8
extern char dirflag; // offset 0x8011B3DB
extern int AlertTxt; // offset 0x8011B458
extern int StatusTxt; // offset 0x8011B45C
extern int current_card; // offset 0x8011B460
extern int LoadType; // offset 0x8011B464
extern int McMenuPos; // offset 0x8011B468
extern struct FeTable *McCurMenu; // offset 0x8011B46C
extern void * fileinfoflag; // offset 0x8011B428
extern char *DiabloGameFile; // offset 0x8011B410
extern char *DiabloOptionFile; // offset 0x8011B414
extern char *DiabloCharacterFile; // offset 0x8011B418
extern char (*McState[2]); // offset 0x8011B420
extern int mdec_audio_buffer[2]; // offset 0x8011B540
extern int mdec_audio_sec; // offset 0x8011B548
extern int mdec_audio_offs; // offset 0x8011B54C
extern int mdec_audio_playing; // offset 0x8011B550
extern int mdec_audio_rate_shift; // offset 0x8011B554
extern char (*vlcbuf[2]); // offset 0x8011B558
extern int slice_size; // offset 0x8011B560
extern struct RECT slice; // offset 0x8011B564
extern int slice_inc; // offset 0x8011B56C
extern int area_pw; // offset 0x8011B570
extern int area_ph; // offset 0x8011B574
extern char tmdc_pol_dirty[2]; // offset 0x8011B578
extern int num_pol[2]; // offset 0x8011B57C
extern int mdec_cx; // offset 0x8011B584
extern int mdec_cy; // offset 0x8011B588
extern int mdec_w; // offset 0x8011B58C
extern int mdec_h; // offset 0x8011B590
extern int mdec_pw[2]; // offset 0x8011B594
extern int mdec_ph[2]; // offset 0x8011B59C
extern int move_x; // offset 0x8011B5A4
extern int move_y; // offset 0x8011B5A8
extern int move_scale; // offset 0x8011B5AC
extern int stream_frames; // offset 0x8011B5B0
extern int last_stream_frame; // offset 0x8011B5B4
extern int mdec_framecount; // offset 0x8011B5B8
extern int mdec_speed; // offset 0x8011B5BC
extern int mdec_stream_starting; // offset 0x8011B5C0
extern int mdec_last_frame; // offset 0x8011B5C4
extern int mdec_sectors_per_frame; // offset 0x8011B5C8
extern unsigned short *vlctab; // offset 0x8011B5CC
extern unsigned char *mdc_buftop; // offset 0x8011B5D0
extern unsigned char *mdc_bufstart; // offset 0x8011B5D4
extern int mdc_bufleft; // offset 0x8011B5D8
extern int mdc_buftotal; // offset 0x8011B5DC
extern int ordertab_length; // offset 0x8011B5E0
extern int time_in_frames; // offset 0x8011B5E4
static char FMVName[32]; // offset 0x80121CE8
extern int stream_chunksize; // offset 0x8011B5E8
extern int stream_bufsize; // offset 0x8011B5EC
extern int stream_subsec; // offset 0x8011B5F0
extern int stream_secnum; // offset 0x8011B5F4
extern int stream_last_sector; // offset 0x8011B5F8
extern int stream_startsec; // offset 0x8011B5FC
extern int stream_opened; // offset 0x8011B600
extern int stream_last_chunk; // offset 0x8011B604
extern int stream_got_chunks; // offset 0x8011B608
extern int stream_subcode; // offset 0x8011B60C
extern int streampos; // offset 0x8011B610
extern int last_sector; // offset 0x8011B614
extern int cdstream_resetsec; // offset 0x8011B618
extern int last_handler_event; // offset 0x8011B61C
static int CreateEnv[12]; // offset 0x80121D08
static char *Passedfilename; // offset 0x8011C758
static int Passedw; // offset 0x8011C75C
static int Passedh; // offset 0x8011C760
static unsigned char TempStack[51200]; // offset 0x80121D38
extern void * user_start; // offset 0x8011B4E4
extern unsigned char *vlc_tab; // offset 0x8011B47C
extern unsigned char *vlc_buf; // offset 0x8011B480
extern unsigned char *img_buf; // offset 0x8011B484
extern int vbuf; // offset 0x8011B488
extern int last_fn; // offset 0x8011B48C
extern int last_mdc; // offset 0x8011B490
extern int slnum; // offset 0x8011B494
extern int slices_to_do; // offset 0x8011B498
extern int mbuf; // offset 0x8011B49C
extern int mfn; // offset 0x8011B4A0
extern int last_move_mbuf; // offset 0x8011B4A4
extern int move_request; // offset 0x8011B4A8
extern int mdec_scale; // offset 0x8011B4AC
extern int do_brightness; // offset 0x8011B4B0
extern int frame_decoded; // offset 0x8011B4B4
extern int mdec_streaming; // offset 0x8011B4B8
extern int mdec_stream_size; // offset 0x8011B4BC
extern int first_stream_frame; // offset 0x8011B4C0
extern int stream_frames_played; // offset 0x8011B4C4
extern int num_mdcs; // offset 0x8011B4C8
extern int mdec_head; // offset 0x8011B4CC
extern int mdec_tail; // offset 0x8011B4D0
extern int mdec_waiting_tail; // offset 0x8011B4D4
extern int mdecs_queued; // offset 0x8011B4D8
extern int mdecs_waiting; // offset 0x8011B4DC
extern int sfx_volume; // offset 0x8011B4E0
static unsigned char DiabEnd; // offset 0x8011B4E8
extern int (*stream_buf)[504]; // offset 0x8011B4EC
extern struct strheader *stream_bufh; // offset 0x8011B4F0
extern int stream_chunks_in; // offset 0x8011B4F4
extern int stream_chunks_total; // offset 0x8011B4F8
extern int stream_in; // offset 0x8011B4FC
extern int stream_out; // offset 0x8011B500
extern int stream_stalled; // offset 0x8011B504
extern int stream_ending; // offset 0x8011B508
extern int stream_open; // offset 0x8011B50C
extern int stream_handler_installed; // offset 0x8011B510
extern int stream_chunks_borrowed; // offset 0x8011B514
extern int _get_count; // offset 0x8011B518
extern int _discard_count; // offset 0x8011B51C
extern int cdready_calls; // offset 0x8011B524
extern int cdready_errors; // offset 0x8011B528
extern int cdready_out_of_sync; // offset 0x8011B52C
extern int cdstream_resetting; // offset 0x8011B530
extern int sector_dma; // offset 0x8011B534
extern int sector_dma_in; // offset 0x8011B538
extern int first_handler_event; // offset 0x8011B53C
extern unsigned char *pStatusPanel; // offset 0x8011B6AC
extern unsigned char *pGBoxBuff; // offset 0x8011B6B0
extern unsigned char dropGoldFlag; // offset 0x8011B6B4
extern unsigned char _pinfoflag[2]; // offset 0x8011B6B8
extern char _infostr[2][256]; // offset 0x800CE810
extern char _infoclr[2]; // offset 0x8011B6BC
extern char tempstr[256]; // offset 0x800CEA10
extern unsigned char drawhpflag; // offset 0x8011B6BE
extern unsigned char drawmanaflag; // offset 0x8011B6BF
extern unsigned char chrflag; // offset 0x8011B6C0
extern unsigned char drawbtnflag; // offset 0x8011B6C1
extern unsigned char panbtndown; // offset 0x8011B6C2
extern unsigned char panelflag; // offset 0x8011B6C3
extern unsigned char chrbtndown; // offset 0x8011B6C4
extern unsigned char lvlbtndown; // offset 0x8011B6C5
extern unsigned char sbookflag; // offset 0x8011B6C6
extern unsigned char talkflag; // offset 0x8011B6C7
extern int dropGoldValue; // offset 0x8011B6C8
extern int initialDropGoldValue; // offset 0x8011B6CC
extern int initialDropGoldIndex; // offset 0x8011B6D0
extern unsigned char *pPanelButtons; // offset 0x8011B6D4
extern unsigned char *pPanelText; // offset 0x8011B6D8
extern unsigned char *pManaBuff; // offset 0x8011B6DC
extern unsigned char *pLifeBuff; // offset 0x8011B6E0
extern unsigned char *pChrPanel; // offset 0x8011B6E4
extern unsigned char *pChrButtons; // offset 0x8011B6E8
extern unsigned char *pSpellCels; // offset 0x8011B6EC
static char _panelstr[2][10][64]; // offset 0x8012E538
static int _pstrjust[2][10]; // offset 0x8012EA38
static int _pnumlines[2]; // offset 0x8011C764
extern struct RECT *InfoBoxRect; // offset 0x8011B6F0
extern struct RECT CSRect; // offset 0x8011B6F4
static int _pSpell[2]; // offset 0x8011C774
static int _pSplType[2]; // offset 0x8011C77C
extern int numpanbtns; // offset 0x8011B6FC
extern unsigned char *pDurIcons; // offset 0x8011B700
extern unsigned char drawdurflag; // offset 0x8011B704
static unsigned char chrbtn[2][4]; // offset 0x8011C784
extern unsigned char chrbtnactive; // offset 0x8011B705
extern unsigned char *pSpellBkCel; // offset 0x8011B708
extern unsigned char *pSBkBtnCel; // offset 0x8011B70C
extern unsigned char *pSBkIconCels; // offset 0x8011B710
extern int sbooktab; // offset 0x8011B714
extern int cur_spel[2]; // offset 0x8011B718
static int my_cur_spel[2]; // offset 0x8011C78C
static long talkofs; // offset 0x8011C794
static char sgszTalkMsg[80]; // offset 0x8012EA98
static unsigned char sgbTalkSavePos; // offset 0x8011C798
static unsigned char sgbNextTalkSave; // offset 0x8011C799
static unsigned char sgbPlrTalkTbl[2]; // offset 0x8011C79A
static unsigned char *pTalkPanel; // offset 0x8011C79C
static unsigned char *pMultiBtns; // offset 0x8011C7A0
static unsigned char *pTalkBtns; // offset 0x8011C7A4
static unsigned char talkbtndown[3]; // offset 0x8011C7A8
extern char SpellITbl[37]; // offset 0x800CE324
extern unsigned char DrawLevelUpFlag; // offset 0x8011B629
extern struct TASK (*_spselflag[2]); // offset 0x8011B650
extern unsigned char spspelstate; // offset 0x8011B64C
extern void * initchr; // offset 0x8011B66C
static int SPLICONNO; // offset 0x8011B62C
static int SPLICONY; // offset 0x8011B630
static int SPLICONRIGHT; // offset 0x8011C76C
static int scx; // offset 0x8011B634
static int scy; // offset 0x8011B638
static int scx1; // offset 0x8011B63C
static int scy1; // offset 0x8011B640
static int scx2; // offset 0x8011B644
static int scy2; // offset 0x8011B648
extern char SpellCol; // offset 0x8011B658
extern unsigned char SpellColors[18]; // offset 0x800CE310
extern int SpellPages[5][5]; // offset 0x800CE34C
static int lus; // offset 0x8011B65C
static int CsNo; // offset 0x8011B660
static char plusanim; // offset 0x8011B664
static struct Dialog CSBack; // offset 0x8012EA88
static int CS_XOFF; // offset 0x8011B668
extern struct CSDATA CS_Tab[28]; // offset 0x800CE3B0
extern int NoCSEntries; // offset 0x8011B670
static int SPALOFF; // offset 0x8011B674
static int paloffset1; // offset 0x8011B678
static int paloffset2; // offset 0x8011B67C
static int paloffset3; // offset 0x8011B680
static int paloffset4; // offset 0x8011B684
static int pinc1; // offset 0x8011B688
static int pinc2; // offset 0x8011B68C
static int pinc3; // offset 0x8011B690
static int pinc4; // offset 0x8011B694
static unsigned char CrossCount[2]; // offset 0x8011B6A0
extern int _pcurs[2]; // offset 0x8011B730
extern int cursW; // offset 0x8011B738
extern int cursH; // offset 0x8011B73C
extern int icursW; // offset 0x8011B740
extern int icursH; // offset 0x8011B744
extern int icursW28; // offset 0x8011B748
extern int icursH28; // offset 0x8011B74C
extern int cursmx; // offset 0x8011B750
extern int cursmy; // offset 0x8011B754
extern int _pcursmonst[2]; // offset 0x8011B758
extern char _pcursobj[2]; // offset 0x8011B760
extern char _pcursitem[2]; // offset 0x8011B764
extern char _pcursinvitem[2]; // offset 0x8011B768
extern char _pcursplr[2]; // offset 0x8011B76C
extern int sel_data; // offset 0x8011B72C
extern struct DeadStruct dead[31]; // offset 0x800CEB10
extern int spurtndx; // offset 0x8011B770
extern int stonendx; // offset 0x8011B774
extern unsigned char *pSquareCel; // offset 0x8011B778
extern unsigned char svgamode; // offset 0x8011B7E0
extern int MouseX; // offset 0x8011B7E4
extern int MouseY; // offset 0x8011B7E8
extern long gv1; // offset 0x8011B7EC
extern long gv2; // offset 0x8011B7F0
extern long gv3; // offset 0x8011B7F4
extern long gv4; // offset 0x8011B7F8
extern long gv5; // offset 0x8011B7FC
extern unsigned char gbProcessPlayers; // offset 0x8011B800
extern int DebugMonsters[10]; // offset 0x800CEC84
extern unsigned char pMegaTiles[2736]; // offset 0x800CECAC
extern unsigned long glSeedTbl[17]; // offset 0x800CF75C
extern int gnLevelTypeTbl[17]; // offset 0x800CF7A0
extern unsigned char gbDoEnding; // offset 0x8011B801
extern unsigned char gbRunGame; // offset 0x8011B802
extern unsigned char gbRunGameResult; // offset 0x8011B803
extern unsigned char gbGameLoopStartup; // offset 0x8011B804
static int glEndSeed[17]; // offset 0x8012EAE8
static int glMid1Seed[17]; // offset 0x8012EB38
static int glMid2Seed[17]; // offset 0x8012EB88
static int glMid3Seed[17]; // offset 0x8012EBD8
static long *sg_previousFilter; // offset 0x8011C7AC
static int CreateEnv[12]; // offset 0x8012EC28
static int Passedlvldir; // offset 0x8011C7B0
static unsigned char *TempStack; // offset 0x8011C7B4
static void * pauseo; // offset 0x8011C7B8
extern unsigned long ghMainWnd; // offset 0x8011B788
extern unsigned char fullscreen; // offset 0x8011B78C
extern int force_redraw; // offset 0x8011B790
extern unsigned char PauseMode; // offset 0x8011B7A4
extern unsigned char FriendlyMode; // offset 0x8011B7A5
extern unsigned char visiondebug; // offset 0x8011B795
extern unsigned char light4flag; // offset 0x8011B797
extern unsigned char leveldebug; // offset 0x8011B798
extern unsigned char monstdebug; // offset 0x8011B799
extern int debugmonsttypes; // offset 0x8011B7A0
static unsigned char cineflag; // offset 0x8011B794
extern unsigned char scrollflag; // offset 0x8011B796
extern unsigned char trigdebug; // offset 0x8011B79A
extern int setseed; // offset 0x8011B79C
static int sgnTimeoutCurs; // offset 0x8011B7A8
extern unsigned char sgbMouseDown; // offset 0x8011B7AC
extern int LastFrCount; // offset 0x8011B7D8
extern enum GM_SPEEDS GameSpeed; // offset 0x8011B7DC
extern struct TownerStruct towner[16]; // offset 0x800CFE80
extern int numtowners; // offset 0x8011B81C
extern unsigned char storeflag; // offset 0x8011B820
extern unsigned char boyloadflag; // offset 0x8011B821
extern unsigned char bannerflag; // offset 0x8011B822
extern unsigned char *pCowCels; // offset 0x8011B824
static unsigned long sgdwCowClicks; // offset 0x8011C7BC
static int sgnCowMsg; // offset 0x8011C7C0
extern int Qtalklist[11][16]; // offset 0x800CFBC0
extern unsigned long CowPlaying; // offset 0x8011B814
extern char AnimOrder[6][148]; // offset 0x800CF7E4
extern int TownCowX[3]; // offset 0x800CFB5C
extern int TownCowY[3]; // offset 0x800CFB68
extern int TownCowDir[3]; // offset 0x800CFB74
extern int cowoffx[8]; // offset 0x800CFB80
extern int cowoffy[8]; // offset 0x800CFBA0
extern int sfxdelay; // offset 0x8011B850
extern int sfxdnum; // offset 0x8011B854
extern struct SFXHDR *sghStream; // offset 0x8011B834
extern struct TSFX sgSFX[992]; // offset 0x800D0AC0
extern struct TSFX *sgpStreamSFX; // offset 0x8011B838
static int SFXX; // offset 0x8011B83C
static int SFXY; // offset 0x8011B840
static int SFXW; // offset 0x8011B844
static int SFXH; // offset 0x8011B848
extern int mypan; // offset 0x8011B84C
extern long orgseed; // offset 0x8011B858
static long sglGameSeed; // offset 0x8011C7C4
extern int SeedCount; // offset 0x8011B85C
static struct CCritSect sgMemCrit; // offset 0x8011C7C8
static int sgnWidth; // offset 0x8011C7CC
extern char msgflag; // offset 0x8011B86B
extern char msgdelay; // offset 0x8011B86C
extern char msgtable[80]; // offset 0x800D1AF0
extern int MsgStrings[44]; // offset 0x800D1A40
extern char msgholdflag; // offset 0x8011B869
extern char msgcnt; // offset 0x8011B86A
static unsigned long sgdwProgress; // offset 0x8011C7D0
static unsigned long sgdwXY; // offset 0x8011C7D4
extern unsigned char AllItemsUseable[157]; // offset 0x800D1B40
extern struct ItemDataStruct AllItemsList[157]; // offset 0x801113A4
extern struct PLStruct PL_Prefix[84]; // offset 0x80112744
extern struct PLStruct PL_Suffix[96]; // offset 0x80113464
extern struct UItemStruct UniqueItemList[91]; // offset 0x80114364
extern struct ItemStruct item[128]; // offset 0x800D1D54
extern char itemactive[127]; // offset 0x800D5354
extern char itemavail[127]; // offset 0x800D53D4
extern unsigned char UniqueItemFlag[128]; // offset 0x800D5454
extern unsigned char uitemflag; // offset 0x8011B8DC
static int tem; // offset 0x8011C7D8
static struct ItemStruct curruitem; // offset 0x8012EC58
static unsigned char itemhold[3][3]; // offset 0x8012ECC8
static char itemactivelist[127]; // offset 0x8012ECD8
extern int ScrollType; // offset 0x8011B8E0
extern char OutStr[128]; // offset 0x800D54D4
extern struct ItemDataStruct *itemsave; // offset 0x8011B8E4
extern long numitems; // offset 0x8011B888
extern int gnNumGetRecords; // offset 0x8011B88C
extern int ItemInvSnds[35]; // offset 0x800D1CB0
extern unsigned char ItemCAnimTbl[169]; // offset 0x800D1BE0
extern short SinTab[32]; // offset 0x80116178
static short Item2Frm[35]; // offset 0x801161F4
extern unsigned char ItemAnimLs[35]; // offset 0x800D1C8C
extern int *ItemAnimSnds; // offset 0x8011B890
extern int idoppely; // offset 0x8011B894
extern int ScrollFlag[2]; // offset 0x8011B8B8
extern int premiumlvladd[6]; // offset 0x800D1D3C
extern void * FIRSTTIME; // offset 0x8011B8D8
extern struct LightListStruct2 LightList[80]; // offset 0x800D6300
extern unsigned char lightactive[80]; // offset 0x800D6580
extern int numlights; // offset 0x8011B914
extern char lightmax; // offset 0x8011B918
extern struct LightListStruct VisionList[32]; // offset 0x800D65D0
extern int numvision; // offset 0x8011B91C
extern unsigned char dovision; // offset 0x8011B920
extern int visionid; // offset 0x8011B924
static int disp_mask; // offset 0x8011C7DC
static int weird; // offset 0x8011C7E0
static int disp_tab_r; // offset 0x8011C7E4
static int dispy_r; // offset 0x8011C7E8
static int disp_tab_g; // offset 0x8011C7EC
static int dispy_g; // offset 0x8011C7F0
static int disp_tab_b; // offset 0x8011C7F4
static int dispy_b; // offset 0x8011C7F8
static int radius; // offset 0x8011C7FC
static int bright; // offset 0x8011C800
static int max_bright; // offset 0x8011C804
static unsigned char mult_tab[128]; // offset 0x8012ED58
extern unsigned char vCrawlTable[23][30]; // offset 0x800D6014
extern unsigned char RadiusAdj[23]; // offset 0x800D62C8
extern char CrawlTable[2749]; // offset 0x800D5554
extern int restore_r; // offset 0x8011B8F8
extern int restore_g; // offset 0x8011B8FC
extern int restore_b; // offset 0x8011B900
extern char light_level[5]; // offset 0x8011B904
extern char level_lamp[5]; // offset 0x8011B90C
extern int weird_cheat; // offset 0x8011B8F4
static char radius_tab[16]; // offset 0x800D62E0
static char bright_tab[16]; // offset 0x800D62F0
extern unsigned char qtextflag; // offset 0x8011B960
extern int qtextSpd; // offset 0x8011B964
static unsigned char *pMedTextCels; // offset 0x8011C808
static unsigned char *pTextBoxCels; // offset 0x8011C80C
static char *qtextptr; // offset 0x8011C810
static int qtexty; // offset 0x8011C814
static unsigned long qtextDelay; // offset 0x8011C818
static unsigned long sgLastScroll; // offset 0x8011C81C
static unsigned long scrolltexty; // offset 0x8011C820
extern char MtPrevText[80]; // offset 0x800D67A0
static int TextNum; // offset 0x8011C824
static void * qtextonflag; // offset 0x8011C828
static void * qtbodge; // offset 0x8011B934
extern struct Dialog QBack; // offset 0x800D6790
static int textadj; // offset 0x8011B938
static int fetextadj; // offset 0x8011B93C
static char FadeState; // offset 0x8011B940
static void * MusicFading; // offset 0x8011B944
static int iBookName; // offset 0x8011B948
extern int mytx; // offset 0x8011B954
extern int myty; // offset 0x8011B958
extern int TextWait; // offset 0x8011B95C
extern struct MissileData missiledata[68]; // offset 0x800D67F0
extern struct MisFileData misfiledata[47]; // offset 0x800D6F60
extern struct LocalLevel sgLocals[22]; // offset 0x800D71BC
static struct DJunk sgJunk; // offset 0x8012EDD8
static unsigned char sgbRecvCmd; // offset 0x8011C82D
static unsigned long sgdwRecvOffset; // offset 0x8011C830
static unsigned char sgbDeltaChunks; // offset 0x8011C834
static unsigned char sgbDeltaChanged; // offset 0x8011C835
static unsigned long sgdwOwnerWait; // offset 0x8011C838
static struct TMegaPkt *sgpMegaPkt; // offset 0x8011C83C
static struct TMegaPkt *sgpCurrPkt; // offset 0x8011C840
static int sgnCurrMegaPlayer; // offset 0x8011C844
extern unsigned char deltaload; // offset 0x8011B97D
extern unsigned char gbBufferMsgs; // offset 0x8011B97E
extern struct NoComp CompNoComp; // offset 0x8011B980
extern struct PakComp CompPakComp; // offset 0x8011B984
extern struct CrunchComp CompCrunchComp; // offset 0x8011B988
extern struct CompLevelMaps GameMaps; // offset 0x800D704C
extern unsigned long dwRecCount; // offset 0x8011B98C
extern unsigned char gbMaxPlayers; // offset 0x8011B9A2
extern unsigned char gbActivePlayers; // offset 0x8011B9A3
extern unsigned char gbGameDestroyed; // offset 0x8011B9A4
extern unsigned char gbDeltaSender; // offset 0x8011B9A5
extern unsigned char gbSelectProvider; // offset 0x8011B9A6
extern unsigned char gbSomebodyWonGameKludge; // offset 0x8011B9A7
static unsigned char sgbSentThisCycle; // offset 0x8011C848
static unsigned long sgdwGameLoops; // offset 0x8011C84C
static unsigned short sgwPackPlrOffsetTbl[2]; // offset 0x8011C850
static unsigned char sgbPlayerLeftGameTbl[2]; // offset 0x8011C854
static unsigned long sgdwPlayerLeftReasonTbl[2]; // offset 0x8011C858
static unsigned char sgbSendDeltaTbl[2]; // offset 0x8011C860
static struct _gamedata sgGameInitInfo; // offset 0x8011C868
static unsigned char sgbTimeout; // offset 0x8011C870
static long sglTimeoutStart; // offset 0x8011C874
extern char gszVersionNumber[5]; // offset 0x8011B99C
static unsigned char sgbNetInited; // offset 0x8011B9A1
extern int ObjTypeConv[113]; // offset 0x800D82EC
extern struct ObjDataStruct AllObjects[99]; // offset 0x800D84B0
extern struct OBJ_LOAD_INFO ObjMasterLoadList[56]; // offset 0x801169F0
extern struct ObjectStruct object[127]; // offset 0x800D8C4C
extern long numobjects; // offset 0x8011B9CC
extern char objectactive[127]; // offset 0x800DA220
extern char objectavail[127]; // offset 0x800DA2A0
extern unsigned char InitObjFlag; // offset 0x8011B9D0
extern int trapid; // offset 0x8011B9D4
extern char ObjFileList[40]; // offset 0x800DA320
extern int trapdir; // offset 0x8011B9D8
extern int leverid; // offset 0x8011B9DC
extern int numobjfiles; // offset 0x8011B9C0
extern int bxadd[8]; // offset 0x800D8BA8
extern int byadd[8]; // offset 0x800D8BC8
extern char shrineavail[26]; // offset 0x800D8C1C
extern unsigned short shrinestrs[26]; // offset 0x800D8BE8
extern unsigned short StoryBookName[9]; // offset 0x800D8C38
extern int myscale; // offset 0x8011B9C4
extern unsigned char gbValidSaveFile; // offset 0x8011B9F0
extern void * DoLoadedChar; // offset 0x8011B9EC
extern struct PlayerStruct plr[2]; // offset 0x800DA538
extern int myplr; // offset 0x8011BA08
extern unsigned char deathflag; // offset 0x8011BA0C
static char deathdelay2[2]; // offset 0x8011C878
extern char light_rad; // offset 0x8011BA0D
extern int PlayerDeathCount[2]; // offset 0x8011BA10
extern int PlayerEar[2]; // offset 0x8011BA18
extern int MaxStats[3][4]; // offset 0x800DA438
static int PlrStructSize; // offset 0x8011BA00
static int ItemStructSize; // offset 0x8011BA04
extern int plrxoff[9]; // offset 0x800DA348
extern int plryoff[9]; // offset 0x800DA36C
extern int plrxoff2[9]; // offset 0x800DA390
extern int plryoff2[9]; // offset 0x800DA3B4
extern char PlrGFXAnimLens[3][11]; // offset 0x800DA3D8
extern int StrengthTbl[3]; // offset 0x800DA3FC
extern int MagicTbl[3]; // offset 0x800DA408
extern int DexterityTbl[3]; // offset 0x800DA414
extern int VitalityTbl[3]; // offset 0x800DA420
extern int ToBlkTbl[3]; // offset 0x800DA42C
extern long ExpLvlsTbl[51]; // offset 0x800DA468
extern struct QuestStruct quests[16]; // offset 0x800DDA40
extern unsigned char *pQLogCel; // offset 0x8011BA50
extern int ReturnLvlX; // offset 0x8011BA54
extern int ReturnLvlY; // offset 0x8011BA58
extern int ReturnLvl; // offset 0x8011BA5C
extern int ReturnLvlT; // offset 0x8011BA60
extern unsigned char rporttest; // offset 0x8011BA64
extern int qline; // offset 0x8011BA68
extern int numqlines; // offset 0x8011BA6C
extern int qtopline; // offset 0x8011BA70
static int qlist[16]; // offset 0x8012EDF8
static struct RECT QSRect; // offset 0x8011C87C
extern unsigned char questlog; // offset 0x8011BA29
extern struct QuestData questlist[16]; // offset 0x800DD908
extern int ALLQUESTS; // offset 0x8011BA2C
extern int QuestGroup1[3]; // offset 0x800DDA1C
extern int QuestGroup2[3]; // offset 0x800DDA28
extern int QuestGroup3[3]; // offset 0x800DDA34
extern int QuestGroup4[2]; // offset 0x8011BA30
extern void * WaterDone; // offset 0x8011BA48
extern int questtrigstr[5]; // offset 0x800DDA08
static int QS_PX; // offset 0x8011BA38
static int QS_PY; // offset 0x8011BA3C
static int QS_PW; // offset 0x8011BA40
static int QS_PH; // offset 0x8011BA44
static struct Dialog QSBack; // offset 0x8012EE38
static int qtoffset; // offset 0x8011BA4C
extern struct SpellData spelldata[37]; // offset 0x800DDB80
extern int StorePlrNo; // offset 0x8011BAB4
extern struct ItemStruct _smithitem[2][20]; // offset 0x800DE428
extern struct ItemStruct _premiumitem[2][6]; // offset 0x800DF508
extern int _numpremium[2]; // offset 0x8011BAB8
extern int _premiumlevel[2]; // offset 0x8011BAC0
extern struct ItemStruct _witchitem[2][20]; // offset 0x800DFA18
extern int _NoWitchItems[2]; // offset 0x8011BAC8
extern int _WitchIdxOfs[2]; // offset 0x8011BAD0
extern struct ItemStruct _boyitem[2]; // offset 0x800E0AF8
extern int _boylevel[2]; // offset 0x8011BAD8
extern struct ItemStruct _healitem[2][20]; // offset 0x800E0BD0
extern struct ItemStruct _golditem[2]; // offset 0x800E1CB0
extern char stextflag; // offset 0x8011BAE0
extern char stextsize; // offset 0x8011BAE1
extern unsigned char stextscrl; // offset 0x8011BAE2
static int stextsel; // offset 0x8011C884
static int stextlhold; // offset 0x8011C888
static int stextshold; // offset 0x8011C88C
static int stextvhold; // offset 0x8011C890
static int stextsval; // offset 0x8011C894
static int stextsmax; // offset 0x8011C898
static int stextup; // offset 0x8011C89C
static int stextdown; // offset 0x8011C8A0
static char stextscrlubtn; // offset 0x8011C8A4
static char stextscrldbtn; // offset 0x8011C8A5
static char SItemListFlag; // offset 0x8011C8A6
static struct STextStruct stext[24]; // offset 0x8012EE48
static int storenumh; // offset 0x8011C8A8
static int gossipstart; // offset 0x8011C8AC
static int gossipend; // offset 0x8011C8B0
static struct RECT StoreBackRect; // offset 0x8011C8B4
static struct RECT StoreBackRectClipper; // offset 0x8011C8BC
extern int SmithItemCount; // offset 0x8011BAE4
extern struct ItemStruct storehold[48]; // offset 0x800E1D88
extern char storehidx[48]; // offset 0x800E31C8
extern int SellIdx; // offset 0x8011BAE8
static int talker; // offset 0x8011C8C4
extern int SWrapCount; // offset 0x8011BAEC
extern unsigned char *pSTextBoxCels; // offset 0x8011BA98
extern unsigned char *pSTextSlidCels; // offset 0x8011BA9C
extern int *SStringY; // offset 0x8011BAA4
extern struct Dialog SBack; // offset 0x800DE304
extern char WStaffFlag; // offset 0x8011BAA0
extern char WFlag; // offset 0x8011BAA1
extern int SStringYNorm[20]; // offset 0x800DE314
extern int SStringYBuy0[20]; // offset 0x800DE364
extern int SStringYBuy1[20]; // offset 0x800DE3B4
extern int talkname[9]; // offset 0x800DE404
extern unsigned char InStoreFlag; // offset 0x8011BAB3
extern struct TextDataStruct alltext[269]; // offset 0x80117C20
extern unsigned long gdwAllTextEntries; // offset 0x8011BAFC
static unsigned char *P3Tiles; // offset 0x8011C8C8
extern int tile; // offset 0x8011BB0C
extern unsigned char _trigflag[2]; // offset 0x8011BB74
extern struct TriggerStruct trigs[5]; // offset 0x800E33CC
extern int numtrigs; // offset 0x8011BB78
extern unsigned char townwarps[3]; // offset 0x8011BB7C
extern int TWarpFrom; // offset 0x8011BB80
extern short TrigList[4][64]; // offset 0x800E341C
extern struct BLOCK BlockList[160]; // offset 0x800E361C
extern void * FRIGFLAG; // offset 0x8011BB48
extern short TownDownList[11]; // offset 0x800E31F8
extern short TownWarp1List[13]; // offset 0x800E3210
extern short TownWarp2List[23]; // offset 0x800E322C
extern short TownWarp3List[17]; // offset 0x800E325C
extern short L1UpList[12]; // offset 0x800E3280
extern short L1DownList[10]; // offset 0x800E3298
extern short L2UpList[3]; // offset 0x8011BB1C
extern short L2DownList[5]; // offset 0x800E32AC
extern short L2TWarpUpList[3]; // offset 0x8011BB24
extern short L3UpList[15]; // offset 0x800E32B8
extern short L3DownList[9]; // offset 0x800E32D8
extern short L3TWarpUpList[14]; // offset 0x800E32EC
extern short L4UpList[4]; // offset 0x8011BB2C
extern short L4DownList[6]; // offset 0x800E3308
extern short L4TWarpUpList[4]; // offset 0x8011BB34
extern short L4PentaList[33]; // offset 0x800E3314
extern short L1BlockList[41]; // offset 0x800E3358
extern short L2BlockList[9]; // offset 0x800E33AC
extern short L3BlockList[5]; // offset 0x800E33C0
extern short L4BlockList[2]; // offset 0x8011BB3C
static int NoBlocks; // offset 0x8011BB40
static short *levlist; // offset 0x8011BB44
static int FRIGCheat; // offset 0x8011BB4C
static int FRIGTime; // offset 0x8011BB50
static int FRIGState; // offset 0x8011BB54
static int FRIGFlip; // offset 0x8011BB58
static int FRIGFlipit; // offset 0x8011BB5C
static int FRIGFirst; // offset 0x8011BB60
extern int FRIGX; // offset 0x8011BB64
extern int FRIGY; // offset 0x8011BB68
extern int FRIGZ; // offset 0x8011BB6C
extern int fot; // offset 0x8011BB70
extern unsigned char gbSndInited; // offset 0x8011BB99
extern long sglMasterVolume; // offset 0x8011BB9C
extern long sglMusicVolume; // offset 0x8011BBA0
extern long sglSoundVolume; // offset 0x8011BBA4
extern long sglSpeechVolume; // offset 0x8011BBA8
extern int sgnMusicTrack; // offset 0x8011BBAC
extern void * MONO; // offset 0x8011BBB0
extern unsigned char gbDupSounds; // offset 0x8011BB9A
extern struct SFXHDR *sghMusic; // offset 0x8011BBB4
extern unsigned short sgszMusicTracks[6]; // offset 0x800E389C
extern int _pcurr_inv[2]; // offset 0x8011BBD4
extern struct found_objects _pfind_list[2][10]; // offset 0x800E38A8
extern char _pfind_index[2]; // offset 0x8011BBDC
extern unsigned char automapmoved; // offset 0x8011BBDE
extern unsigned char flyflag; // offset 0x8011BBC1
extern unsigned char _SpdBeltSelFlag[2]; // offset 0x8011BBC4
extern void * ignore_buttons; // offset 0x8011BBD0
static struct GamePad GPad1; // offset 0x8012FB68
static struct GamePad GPad2; // offset 0x8012FC48
static int HappyManFlag; // offset 0x8011BBC8
static char seen_combo; // offset 0x8011BBCC
static struct MESSAGE_STR AllMsgs[11]; // offset 0x80118BD8
extern int NumOfStrings; // offset 0x8011BC18
extern char **TextPtr; // offset 0x8011BBF4
extern enum LANG_TYPE LanguageType; // offset 0x8011BBEC
extern long hndText; // offset 0x8011BBF0
extern enum LANG_DB_NO LangDbNo; // offset 0x8011BBF8
extern struct TextDat *MissDat; // offset 0x8011BC28
extern char MlTab[16]; // offset 0x800E39C4
extern char QlTab[16]; // offset 0x800E39D4
static struct CINDER Cinders[16]; // offset 0x8012FD20
static int lasttick; // offset 0x8011BC44
static void * FireInit; // offset 0x8011BC48
static void * FirstFire; // offset 0x8011BC4C
extern struct DoorOff DoorOffsets[4][4]; // offset 0x800E3B6C
extern int lox; // offset 0x8011BC50
extern int loy; // offset 0x8011BC54
extern int lot; // offset 0x8011BC58
static unsigned char sgbFadedIn; // offset 0x8011BC65
static unsigned char screenbright; // offset 0x8011BC66
static int faderate; // offset 0x8011BC68
static void * fading; // offset 0x8011BC6C
static int FADE_OT; // offset 0x8011BC70
static unsigned char FadeCoords[8]; // offset 0x8011BC7C
static unsigned char FadeCoords2[8]; // offset 0x8011BC84
extern int st; // offset 0x8011BC74
extern int mode; // offset 0x8011BC78
extern unsigned char AmLTab[16]; // offset 0x800E3BAC
extern unsigned char AmRTab[16]; // offset 0x800E3BBC
extern struct PortalStruct portal[4]; // offset 0x800E3BEC
static int portalindex; // offset 0x8011C8D0
static int WarpDropX[4]; // offset 0x800E3BCC
static int WarpDropY[4]; // offset 0x800E3BDC
extern char MyVerString[120]; // offset 0x800E3C1C
extern int Year; // offset 0x8011BE14
extern int Day; // offset 0x8011BE18
extern void * iscflag; // offset 0x8011BE34
extern short *dPiece; // offset 0x8011BE44
static unsigned char *tbuff; // offset 0x8011C8D4
extern unsigned char IconBuffer[768]; // offset 0x800E3CC0
static char DiabloStr[11]; // offset 0x800E3C94
static char SaveCharName[19]; // offset 0x800E3CA0
static char OptSaveName[11]; // offset 0x800E3CB4
extern unsigned char ADirtyFlagThatGaryWillLove; // offset 0x8011BE5A
extern int DirtyVidx; // offset 0x8011BE5C
extern int DirtyVidY; // offset 0x8011BE60
static unsigned char HR1; // offset 0x8011C8D8
static unsigned char HR2; // offset 0x8011C8D9
static unsigned char HR3; // offset 0x8011C8DA
static unsigned char VR1; // offset 0x8011C8DB
static unsigned char VR2; // offset 0x8011C8DC
static unsigned char VR3; // offset 0x8011C8DD
extern struct NODE *pHallList; // offset 0x8011BEC8
extern int nRoomCnt; // offset 0x8011BECC
extern int nSx1; // offset 0x8011BED0
extern int nSy1; // offset 0x8011BED4
extern int nSx2; // offset 0x8011BED8
extern int nSy2; // offset 0x8011BEDC
extern int Area_Min; // offset 0x8011BE7C
extern int Room_Max; // offset 0x8011BE80
extern int Room_Min; // offset 0x8011BE84
extern unsigned char BIG3[6]; // offset 0x8011BE88
extern unsigned char BIG4[6]; // offset 0x8011BE90
extern unsigned char BIG6[6]; // offset 0x8011BE98
extern unsigned char BIG7[6]; // offset 0x8011BEA0
extern unsigned char RUINS1[4]; // offset 0x8011BEA8
extern unsigned char RUINS2[4]; // offset 0x8011BEAC
extern unsigned char RUINS3[4]; // offset 0x8011BEB0
extern unsigned char RUINS4[4]; // offset 0x8011BEB4
extern unsigned char RUINS5[4]; // offset 0x8011BEB8
extern unsigned char RUINS6[4]; // offset 0x8011BEBC
extern unsigned char RUINS7[4]; // offset 0x8011BEC0
extern int myk; // offset 0x8011BEC4
static int abyssx; // offset 0x8011C8E0
static unsigned char lavapool; // offset 0x8011C8E4
extern int lockoutcnt; // offset 0x8011BF68
static unsigned char L3TITE12[6]; // offset 0x8011BEEC
static unsigned char L3TITE13[6]; // offset 0x8011BEF4
static unsigned char L3CREV1[6]; // offset 0x8011BEFC
static unsigned char L3CREV2[6]; // offset 0x8011BF04
static unsigned char L3CREV3[6]; // offset 0x8011BF0C
static unsigned char L3CREV4[6]; // offset 0x8011BF14
static unsigned char L3CREV5[6]; // offset 0x8011BF1C
static unsigned char L3CREV6[6]; // offset 0x8011BF24
static unsigned char L3CREV7[6]; // offset 0x8011BF2C
static unsigned char L3CREV8[6]; // offset 0x8011BF34
static unsigned char L3CREV9[6]; // offset 0x8011BF3C
static unsigned char L3CREV10[6]; // offset 0x8011BF44
static unsigned char L3CREV11[6]; // offset 0x8011BF4C
static unsigned char L3XTRA1[4]; // offset 0x8011BF54
static unsigned char L3XTRA2[4]; // offset 0x8011BF58
static unsigned char L3XTRA3[4]; // offset 0x8011BF5C
static unsigned char L3XTRA4[4]; // offset 0x8011BF60
static unsigned char L3XTRA5[4]; // offset 0x8011BF64
extern int diabquad1x; // offset 0x8011BF7C
extern int diabquad2x; // offset 0x8011BF80
extern int diabquad3x; // offset 0x8011BF84
extern int diabquad4x; // offset 0x8011BF88
extern int diabquad1y; // offset 0x8011BF8C
extern int diabquad2y; // offset 0x8011BF90
extern int diabquad3y; // offset 0x8011BF94
extern int diabquad4y; // offset 0x8011BF98
extern int SP4x1; // offset 0x8011BF9C
extern int SP4y1; // offset 0x8011BFA0
extern int SP4x2; // offset 0x8011BFA4
extern int SP4y2; // offset 0x8011BFA8
extern int l4holdx; // offset 0x8011BFAC
extern int l4holdy; // offset 0x8011BFB0
static unsigned char *lpSetPiece1; // offset 0x8011C8E8
static unsigned char *lpSetPiece2; // offset 0x8011C8EC
static unsigned char *lpSetPiece3; // offset 0x8011C8F0
static unsigned char *lpSetPiece4; // offset 0x8011C8F4
static unsigned char *lppSetPiece2; // offset 0x8011C8F8
static unsigned char *lppSetPiece3; // offset 0x8011C8FC
static unsigned char *lppSetPiece4; // offset 0x8011C900
static int recurs; // offset 0x8011BF78
static unsigned char SkelKingTrans1[8]; // offset 0x8011BFC0
static unsigned char SkelKingTrans2[8]; // offset 0x8011BFC8
static unsigned char SkelKingTrans3[20]; // offset 0x800E3FC0
static unsigned char SkelKingTrans4[28]; // offset 0x800E3FD4
static unsigned char SkelChamTrans1[20]; // offset 0x800E3FF0
static unsigned char SkelChamTrans2[8]; // offset 0x8011BFD0
static unsigned char SkelChamTrans3[36]; // offset 0x800E4004
static void * DoUiForChooseMonster; // offset 0x8011C0BC
static char (*MgToText[34]); // offset 0x800E4028
extern unsigned short StoryText[3][3]; // offset 0x800E40B0
extern unsigned short dungeon[48][48]; // offset 0x800E40C4
extern unsigned char pdungeon[40][40]; // offset 0x800E52C4
extern int setpc_x; // offset 0x8011C0E4
extern int setpc_y; // offset 0x8011C0E8
extern int setpc_w; // offset 0x8011C0EC
extern int setpc_h; // offset 0x8011C0F0
extern unsigned char setloadflag; // offset 0x8011C0F4
extern unsigned char nBlockTable[2049]; // offset 0x800E5904
extern unsigned char nSolidTable[2049]; // offset 0x800E6108
extern unsigned char nMissileTable[2049]; // offset 0x800E690C
extern unsigned char nTrapTable[2049]; // offset 0x800E7110
extern int dminx; // offset 0x8011C0F8
extern int dminy; // offset 0x8011C0FC
extern int dmaxx; // offset 0x8011C100
extern int dmaxy; // offset 0x8011C104
extern int gnDifficulty; // offset 0x8011C108
extern unsigned char currlevel; // offset 0x8011C10C
extern unsigned char leveltype; // offset 0x8011C10D
extern unsigned char setlevel; // offset 0x8011C10E
extern unsigned char setlvlnum; // offset 0x8011C10F
extern unsigned char setlvltype; // offset 0x8011C110
extern int ViewX; // offset 0x8011C114
extern int ViewY; // offset 0x8011C118
extern int ViewDX; // offset 0x8011C11C
extern int ViewDY; // offset 0x8011C120
extern int ViewBX; // offset 0x8011C124
extern int ViewBY; // offset 0x8011C128
extern struct ScrollStruct ScrollInfo; // offset 0x800E7914
extern int LvlViewX; // offset 0x8011C12C
extern int LvlViewY; // offset 0x8011C130
extern int btmbx; // offset 0x8011C134
extern int btmby; // offset 0x8011C138
extern int btmdx; // offset 0x8011C13C
extern int btmdy; // offset 0x8011C140
extern int MicroTileLen; // offset 0x8011C144
extern char TransVal; // offset 0x8011C148
extern unsigned char TransList[256]; // offset 0x800E7928
extern int themeCount; // offset 0x8011C14C
extern struct map_info dung_map[112][112]; // offset 0x800E7A28
extern unsigned char dung_map_r[56][56]; // offset 0x80100228
extern unsigned char dung_map_g[56][56]; // offset 0x80100E68
extern unsigned char dung_map_b[56][56]; // offset 0x80101AA8
extern int nSxy[16]; // offset 0x801026E8
extern unsigned char *mydflags; // offset 0x8011C0D8
extern unsigned char *pSetPiece; // offset 0x8011C0DC
extern int DungSize; // offset 0x8011C0E0
extern struct ThemeStruct theme[50]; // offset 0x80102848
extern int numthemes; // offset 0x8011C18C
extern int zharlib; // offset 0x8011C190
extern unsigned char armorFlag; // offset 0x8011C194
extern unsigned char bCrossFlag; // offset 0x8011C195
extern unsigned char weaponFlag; // offset 0x8011C196
extern int themex; // offset 0x8011C198
extern int themey; // offset 0x8011C19C
extern int themeVar1; // offset 0x8011C1A0
extern unsigned char bFountainFlag; // offset 0x8011C1A4
extern unsigned char cauldronFlag; // offset 0x8011C1A5
extern unsigned char mFountainFlag; // offset 0x8011C1A6
extern unsigned char pFountainFlag; // offset 0x8011C1A7
extern unsigned char tFountainFlag; // offset 0x8011C1A8
extern unsigned char treasureFlag; // offset 0x8011C1A9
extern unsigned char ThemeGoodIn[4]; // offset 0x8011C1AC
extern int ThemeGood[4]; // offset 0x80102728
extern int trm5x[25]; // offset 0x80102738
extern int trm5y[25]; // offset 0x8010279C
extern int trm3x[9]; // offset 0x80102800
extern int trm3y[9]; // offset 0x80102824
extern struct TextDat *AutoMapTData; // offset 0x8011C200
static unsigned char AmpBuffer[512]; // offset 0x8012FD80
extern int nummissiles; // offset 0x8011C288
extern short missileactive[125]; // offset 0x80102A60
extern short missileavail[125]; // offset 0x80102B5C
extern unsigned char MissilePreFlag; // offset 0x8011C28C
extern struct MissileStruct missile[125]; // offset 0x80102C58
extern unsigned char ManashieldFlag; // offset 0x8011C28D
extern unsigned char ManashieldFlag2; // offset 0x8011C28E
extern char dMissArray[32][4]; // offset 0x80105174
extern int XDirAdd[8]; // offset 0x801029D8
extern int YDirAdd[8]; // offset 0x801029F8
extern unsigned char fadetor; // offset 0x8011C255
extern unsigned char fadetog; // offset 0x8011C256
extern unsigned char fadetob; // offset 0x8011C257
extern unsigned char ValueTable[16]; // offset 0x80102A18
extern unsigned char StringTable[6][9]; // offset 0x80102A28
extern struct MonsterStruct monster[190]; // offset 0x80105394
extern long nummonsters; // offset 0x8011C2CC
extern short monstactive[190]; // offset 0x8010A0C4
extern short monstkills[190]; // offset 0x8010A240
extern struct CMonster Monsters[16]; // offset 0x8010A3BC
extern long monstimgtot; // offset 0x8011C2D0
extern unsigned char totalmonsters; // offset 0x8011C2D4
extern int uniquetrans; // offset 0x8011C2D8
static unsigned char sgbSaveSoundOn; // offset 0x8011C904
extern char offset_x[8]; // offset 0x8011C2A8
extern char offset_y[8]; // offset 0x8011C2B0
extern int nummtypes; // offset 0x8011C29C
extern char animletter[7]; // offset 0x8011C2A0
extern int MWVel[24][3]; // offset 0x801051F4
extern int UniqTransPals[194]; // offset 0x8010A794
extern struct MonsterData monsterdata[113]; // offset 0x8010AB9C
extern char MonstConvTbl[128]; // offset 0x8010C618
extern char MonstAvailTbl[112]; // offset 0x8010C698
extern struct UniqMonstStruct UniqMonst[96]; // offset 0x8010C708
extern int TransPals[134]; // offset 0x8010A57C
extern struct STONEPAL StonePals[32]; // offset 0x8010AA9C
extern unsigned char invflag; // offset 0x8011C32C
extern unsigned char drawsbarflag; // offset 0x8011C32D
extern int InvBackY; // offset 0x8011C330
extern int InvCursPos; // offset 0x8011C334
extern int InvPageNo; // offset 0x8011C338
extern int InvPageFlag; // offset 0x8011C33C
extern unsigned char InvSlotTable[73]; // offset 0x8010D680
extern int InvBackAY; // offset 0x8011C340
extern int InvSel; // offset 0x8011C344
extern int ItemW; // offset 0x8011C348
extern int ItemH; // offset 0x8011C34C
extern int ItemNo; // offset 0x8011C350
extern struct RECT BRect; // offset 0x8011C354
extern struct TextDat *InvPanelTData; // offset 0x8011C308
extern struct TextDat *InvGfxTData; // offset 0x8011C30C
extern int InvGfxTable[168]; // offset 0x8010D278
static int clipit; // offset 0x8011C2F4
static int backot; // offset 0x8011C2F8
static int slotot; // offset 0x8011C2FC
static int slotbackot; // offset 0x8011C300
static int itemot; // offset 0x8011C304
extern int AP2x2Tbl[10]; // offset 0x8010D008
extern struct InvXY InvRect[73]; // offset 0x8010D030
extern unsigned char InvItemWidth[180]; // offset 0x8010D518
extern unsigned char InvItemHeight[180]; // offset 0x8010D5CC
extern int CursGlow; // offset 0x8011C310
extern int CursGlowDx; // offset 0x8011C314
static void * InvOn; // offset 0x8011C324
static unsigned long sgdwLastTime; // offset 0x8011C328
extern unsigned char automapflag; // offset 0x8011C37B
extern unsigned char automapview[5][40]; // offset 0x8010D6E4
extern unsigned short automaptype[512]; // offset 0x8010D7AC
extern int AutoMapX; // offset 0x8011C37C
extern int AutoMapY; // offset 0x8011C380
extern int AutoMapXOfs; // offset 0x8011C384
extern int AutoMapYOfs; // offset 0x8011C388
extern int AMPlayerX; // offset 0x8011C38C
extern int AMPlayerY; // offset 0x8011C390
extern int AMPx[2]; // offset 0x8011C394
extern int AMPy[2]; // offset 0x8011C39C
extern int AutoMapScale; // offset 0x8011C368
static int AutoMapOt; // offset 0x8011C36C
static int SetLevelName[6]; // offset 0x8010D6CC
static struct TASK *ActiveTasks; // offset 0x8011C98C
static struct TASK *CurrentTask; // offset 0x8011C990
static struct TASK *T; // offset 0x8011C994
static unsigned long MemTypeForTasker; // offset 0x8011C998
static int SchEnv[12]; // offset 0x801325A0
static unsigned long ExecId; // offset 0x8011C99C
static unsigned long ExecMask; // offset 0x8011C9A0
static int TasksActive; // offset 0x8011C9A4
static unsigned long EpiProId; // offset 0x8011C9B0
static unsigned long EpiProMask; // offset 0x8011C9B4
static unsigned char ExtraStackProtection; // offset 0x8011C9C4
static int ExtraStackSizeLongs; // offset 0x8011C9C8
extern unsigned long GazTick; // offset 0x8011CA60
extern unsigned long RndTabs[6]; // offset 0x801351E8
extern unsigned long DefaultRnd[6]; // offset 0x800B635C
extern void *LastPtr; // offset 0x8011CA74
extern struct MEM_INFO WorkMemInfo; // offset 0x800B6394
static struct MEM_INIT_INFO *MemInitBlocks; // offset 0x8011C9CC
static struct MEM_HDR MemHdrBlocks[200]; // offset 0x801325D0
static struct MEM_HDR *FreeBlocks; // offset 0x8011C9D0
static enum GAL_ERROR_CODE LastError; // offset 0x8011C9D4
static int TimeStamp; // offset 0x8011C9D8
static unsigned char FullErrorChecking; // offset 0x8011C9DC
static unsigned long LastAttemptedAlloc; // offset 0x8011C9E0
static unsigned long LastDeallocedBlock; // offset 0x8011C9E4
static enum GAL_VERB_LEV VerbLev; // offset 0x8011C9E8
static int NumOfFreeHdrs; // offset 0x8011C9EC
static unsigned long LastTypeAlloced; // offset 0x8011C9F0
extern char (*GalErrors[10]); // offset 0x800B639C
extern struct MEM_INIT_INFO PhantomMem; // offset 0x800B63C4
static char buf[4992]; // offset 0x80133BB0
static char NULL_REP[7]; // offset 0x800B63EC

/* End external declarations */

#endif

// WARNING: This file's extension ('.MIP') indicates that it may not have been a C or C++ file.
// It should contain Ghidra's best effort at decompiling the machine language to C, 
// but TDR does not currently attempt to handle assembly language or other non-C/C++ code differently, 
// so any decompiled code below may not reflect the original project source code for this file.
// If the source file is from a library, you should replace it with the original library version of the file.
// Otherwise, manual reconstruction of the code may be required, 
// Especially if the original source code was assembly language which used hardware features inaccessible to C.
#include "THISDUST.H"
#include "REPLACE.H"


// decompiled code
// original method signature: 
// void longjmp() /* longjmp method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 84, offset 0x800101e8
void longjmp(__jmp_buf_tag *__env,int __val)

{
	return;
}



// decompiled code
// original method signature: 
// void setjmp() /* setjmp method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 105, offset 0x80010220
int setjmp(__jmp_buf_tag *__env)

{
	int unaff_s0;
	int unaff_s1;
	int unaff_s2;
	int unaff_s3;
	ulong unaff_s4;
	ulong unaff_s5;
	ulong unaff_s6;
	ulong unaff_s7;
	int unaff_s8;
	int unaff_retaddr;
	undefined auStackX0 [16];
	
	__env->__jmpbuf[0] = unaff_retaddr;
	*(BADSPACEBASE **)(__env->__jmpbuf + 1) = register0x00000074;
	__env->__jmpbuf[2] = unaff_s8;
	__env->__jmpbuf[3] = unaff_s0;
	__env->__jmpbuf[4] = unaff_s1;
	__env->__jmpbuf[5] = unaff_s2;
	__env->__mask_was_saved = unaff_s3;
	(__env->__saved_mask).__val[0] = unaff_s4;
	(__env->__saved_mask).__val[1] = unaff_s5;
	(__env->__saved_mask).__val[2] = unaff_s6;
	(__env->__saved_mask).__val[3] = unaff_s7;
	*(BADSPACEBASE **)((__env->__saved_mask).__val + 4) = register0x00000070;
	return 0;
}



// decompiled code
// original method signature: 
// void memset() /* memset method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 125, offset 0x80010258
void * memset(void *__s,int __c,size_t __n)

{
	void *pvVar1;
	
	pvVar1 = (void *)(__n - 1);
	if (__n != 0) {
		do {
			*(char *)__s = (char)__c;
			pvVar1 = (void *)((int)pvVar1 + -1);
			__s = (undefined *)__s + 1;
		} while (pvVar1 != (void *)0xffffffff);
	}
	return pvVar1;
}



// decompiled code
// original method signature: 
// void strcpy() /* strcpy method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 142, offset 0x8001027c
char * strcpy(char *__dest,char *__src)

{
	char cVar1;
	char *pcVar2;
	
	pcVar2 = __dest;
	while (cVar1 = *__src, *pcVar2 = cVar1, cVar1 != '\0') {
		__src = __src + 1;
		pcVar2 = pcVar2 + 1;
	}
	return __dest;
}



// decompiled code
// original method signature: 
// void strcat() /* strcat method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 163, offset 0x800102a4
char * strcat(char *__dest,char *__src)

{
	int iVar1;
	char *pcVar2;
	
	iVar1 = strlen2(__dest);
	pcVar2 = strcpy(__dest + iVar1,__src);
	return pcVar2;
}



// decompiled code
// original method signature: 
// void strrchr() /* strrchr method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 180, offset 0x800102c4
char * strrchr(char *__s,int __c)

{
	char cVar1;
	int iVar2;
	char *pcVar3;
	code *UNRECOVERED_JUMPTABLE_00;
	
	iVar2 = strlen2(__s);
	pcVar3 = __s + iVar2;
	do {
		cVar1 = *pcVar3;
		pcVar3 = pcVar3 + -1;
		if ((int)cVar1 == __c) {
										/* WARNING: Could not recover jumptable at 0x800102f8. Too many branches */
										/* WARNING: Treating indirect jump as call */
			pcVar3 = (char *)(*UNRECOVERED_JUMPTABLE_00)();
			return pcVar3;
		}
	} while (pcVar3 != __s);
										/* WARNING: Could not recover jumptable at 0x800102f0. Too many branches */
										/* WARNING: Treating indirect jump as call */
	pcVar3 = (char *)(*UNRECOVERED_JUMPTABLE_00)();
	return pcVar3;
}



// decompiled code
// original method signature: 
// void strchr() /* strchr method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 209, offset 0x80010300
char * strchr(char *__s,int __c)

{
	char *pcVar1;
	
	if ((int)*__s == 0) {
		if (__s != (char *)0x0) {
			return (char *)0x0;
		}
	}
	else {
		if ((int)*__s != __c) {
			pcVar1 = strchr(__s + 1,__c);
			return pcVar1;
		}
	}
	return __s;
}



// decompiled code
// original method signature: 
// void strlen2() /* strlen2 method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 233, offset 0x80010338
int strlen2(char *param_1)

{
	char cVar1;
	int iVar2;
	
	iVar2 = 0;
	while (cVar1 = *param_1, param_1 = param_1 + 1, cVar1 != '\0') {
		iVar2 = iVar2 + 1;
	}
	return iVar2;
}



// decompiled code
// original method signature: 
// void FlushCache() /* FlushCache method signature is not contained in the debug symbol data. This is likely either a library function or the game was compiled without debug symbols. Please refer to the TDR documentation for additional guidance. */
 // line 385, offset 0x80010468
void FlushCache(void)

{
										/* WARNING: Treating indirect jump as call */
	(*(code *)0xa0)();
	return;
}






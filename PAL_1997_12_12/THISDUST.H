#ifndef OVERLAYS_MONOLITHIC_HEADER
#define OVERLAYS_MONOLITHIC_HEADER

/* Begin enums */

enum _0fake // Hashcode: 0x6314D332 (dec: 1662309170)
{
	MQ_BLOOD = 4096,
	MQ_PWATER = 2048,
	MQ_ANVIL = 1024,
	MQ_SCHAMB = 512,
	MQ_BETRAYER = 256,
	MQ_DIABLO = 128,
	MQ_SKELKING = 64,
	MQ_WARLORD = 32,
	MQ_VEIL = 16,
	MQ_LTBANNER = 8,
	MQ_ZHAR = 4,
	MQ_GARBUD = 2,
	MQ_BUTCHER = 1,
};

enum _48fake // Hashcode: 0xC043F0AD (dec: -1069289299)
{
	VK_SHIFT = 25,
	VK_TAB = 24,
	VK_NEXT = 23,
	VK_PRIOR = 22,
	VK_PAUSE = 21,
	VK_F12 = 20,
	VK_F11 = 19,
	VK_F10 = 18,
	VK_F9 = 17,
	VK_F8 = 16,
	VK_F7 = 15,
	VK_F6 = 14,
	VK_F5 = 13,
	VK_F4 = 12,
	VK_F3 = 11,
	VK_F2 = 10,
	VK_F1 = 9,
	VK_SNAPSHOT = 8,
	VK_RIGHT = 7,
	VK_LEFT = 6,
	VK_UP = 5,
	VK_DOWN = 4,
	VK_BACK = 3,
	VK_RETURN = 2,
	VK_ESCAPE = 1,
	VK_SPACE = 0,
};

enum _65fake // Hashcode: 0xC87FE5BA (dec: -931142214)
{
	NUM_MUSIC = 6,
	TMUSIC_INTRO = 5,
	TMUSIC_L4 = 4,
	TMUSIC_L3 = 3,
	TMUSIC_L2 = 2,
	TMUSIC_L1 = 1,
	TMUSIC_TOWN = 0,
};

enum _71fake // Hashcode: 0xA1ADFBB4 (dec: -1582433356)
{
	MG_FIREMAN = 33,
	MG_UNRAV = 32,
	MG_MEGA = 31,
	MG_THIN = 30,
	MG_DIABLO = 29,
	MG_SKELBOW = 28,
	MG_RHINO = 27,
	MG_GOATLORD = 26,
	MG_WORM = 25,
	MG_ZOMBIE = 24,
	MG_TSNEAK = 23,
	MG_SUCC = 22,
	MG_SNEAK = 21,
	MG_SNAKE = 20,
	MG_SKING = 19,
	MG_SKELSD = 18,
	MG_SKELAXE = 17,
	MG_SCAV = 16,
	MG_MAGMA = 15,
	MG_MAGE = 14,
	MG_GOLEM = 13,
	MG_GOATMACE = 12,
	MG_GOATBOW = 11,
	MG_GARGOYLE = 10,
	MG_FATC = 9,
	MG_FAT = 8,
	MG_FALSWORD = 7,
	MG_FALSPEAR = 6,
	MG_DEMSKEL = 5,
	MG_DARKMAGE = 4,
	MG_BLACK = 3,
	MG_BIGFALL = 2,
	MG_BAT = 1,
	MG_ACID = 0,
};

enum _72fake // Hashcode: 0x4EF0295C (dec: 1324362076)
{
	SYS_GAMEOVER = 32769,
	SYS_TASK = 32768,
	TSK_CUTSCREEN = 16387,
	TSK_MONSTER_CHOOSE = 16386,
	TSK_BACKGROUND = 16385,
	TSK_GAMETASK = 16384,
	TSK_NOENUM = 0,
};

enum _73fake // Hashcode: 0x25E72948 (dec: 635906376)
{
	GAL_FLAGS = 32768,
	GAL_HIGH = 32768,
	GAL_FIRST_FREE_MEM_TYPE = 1,
	GAL_PHANTOM_MEM = 0,
};

enum GAL_ERROR_CODE // Hashcode: 0x25CF350E (dec: 634336526)
{
	NUM_OF_ERROR_MESSAGES = 10,
	ERR_GAL_NO_MEM_MOVE = 9,
	ERR_GAL_MEM_AREA_NOT_COVERED = 8,
	ERR_GAL_MEM_BLOCK_COLLISION = 7,
	ERR_GAL_MEM_ALREADY_UNLOCKED = 6,
	ERR_GAL_INVALID_MEM_HANDLE = 5,
	ERR_GAL_INVALID_MEM_TYPE = 4,
	ERR_GAL_MEM_TYPE_OVERLAP = 3,
	ERR_GAL_MEM_TYPE_EXISTS = 2,
	ERR_RUN_OUT_OF_MEM_HDRS = 1,
	ERR_GAL_NO_ERROR = 0,
};

enum GAL_VERB_LEV // Hashcode: 0x4EBD0F40 (dec: 1321013056)
{
	GAL_NOISY = 2,
	GAL_AVERAGE = 1,
	GAL_SILENT = 0,
};

enum LANG_TYPE // Hashcode: 0xE837FF13 (dec: -398983405)
{
	LANG_NONE = 5,
	LANG_JAP = 4,
	LANG_SWEDISH = 3,
	LANG_GERMAN = 2,
	LANG_FRENCH = 1,
	LANG_ENGLISH = 0,
};

enum LANG_DB_NO // Hashcode: 0x79EC8B0F (dec: 2045545231)
{
	LANG_DB_BACK = 2,
	LANG_DB_QUEST = 1,
	LANG_DB_MAIN = 0,
};

enum B_PER_PIX // Hashcode: 0xB23A3ADD (dec: -1304806691)
{
	BITS_8 = 2,
	BITS_5 = 1,
	BITS_4 = 0,
};

enum _74fake // Hashcode: 0x8F1B8CA7 (dec: -1894019929)
{
	PAD_ALL_DIRS = 15,
	PAD_BUTTONS = 16320,
	PAD_R2 = 8192,
	PAD_R1 = 4096,
	PAD_L2 = 2048,
	PAD_L1 = 1024,
	PAD_TRIANGLE = 512,
	PAD_CIRCLE = 256,
	PAD_SQUARE = 128,
	PAD_CROSS = 64,
	PAD_SELECT = 32,
	PAD_START = 16,
	PAD_RIGHT = 8,
	PAD_LEFT = 4,
	PAD_DOWN = 2,
	PAD_UP = 1,
};

enum TXT_JUST // Hashcode: 0xCB9EB4A3 (dec: -878791517)
{
	JustRight = 2,
	JustCentre = 1,
	JustLeft = 0,
};

enum _item_indexes // Hashcode: 0x71CBB40B (dec: 1909175307)
{
	IDI_RESURRECT = 34,
	IDI_LAZSTAFF = 33,
	IDI_LGTFORGE = 32,
	IDI_GRISWOLD = 31,
	IDI_FULLMANA = 30,
	IDI_FULLHEAL = 29,
	IDI_ARMOFVAL = 28,
	IDI_PORTAL = 27,
	IDI_IDENTIFY = 26,
	IDI_MANA = 25,
	IDI_HEAL = 24,
	IDI_EAR = 23,
	IDI_LASTQUEST = 22,
	IDI_MAPOFDOOM = 22,
	IDI_BLDSTONE = 21,
	IDI_SPECELIX = 20,
	IDI_FUNGALTM = 19,
	IDI_BRAIN = 18,
	IDI_MUSHROOM = 17,
	IDI_ANVIL = 16,
	IDI_GLDNELIX = 15,
	IDI_STEELVEIL = 14,
	IDI_HARCREST = 13,
	IDI_BANNER = 12,
	IDI_TRING = 11,
	IDI_OPTAMULET = 10,
	IDI_ROCK = 9,
	IDI_INFRARING = 8,
	IDI_SKCROWN = 7,
	IDI_CLEAVER = 6,
	IDI_FIRSTQUEST = 6,
	IDI_SORCEROR = 5,
	IDI_ROGUE = 4,
	IDI_WARRCLUB = 3,
	IDI_WARRSHLD = 2,
	IDI_WARRIOR = 1,
	IDI_GOLD = 0,
};

enum _86fake // Hashcode: 0x0A2BC74E (dec: 170641230)
{
	PEQ_pWAnim = 8,
	PEQ_pHAnim = 7,
	PEQ_pTAnim = 6,
	PEQ_pLAnim = 5,
	PEQ_pFAnim = 4,
	PEQ_pBAnim = 3,
	PEQ_pAAnim = 2,
	PEQ_pDAnim = 1,
	PEQ_pNAnim = 0,
};

enum PACTION // Hashcode: 0x8A692335 (dec: -1972821195)
{
	PL_FMAGIC = 11,
	PL_QMAGIC = 10,
	PL_LMAGIC = 9,
	PL_TSTAND = 8,
	PL_TWALK = 7,
	PL_DEATH = 6,
	PL_BLOCK = 5,
	PL_HIT = 4,
	PL_ATTACK = 3,
	PL_STAND = 2,
	PL_WALK = 1,
	PL_NOACTION = 0,
};

enum _90fake // Hashcode: 0xCC5D2BF2 (dec: -866309134)
{
	PAD_UP_IS_UPRIGHT = 1,
	PAD_UP_IS_UP = 0,
};

enum _91fake // Hashcode: 0x54FB2992 (dec: 1425746322)
{
	GAMEPAD_GETWALK = 12,
	GAMEPAD_GETALL_FUNCTIONS = 11,
	GAMEPAD_SET_UPFUNCTION = 10,
	GAMEPAD_SETALL_FUNCTIONS = 9,
	GAMEPAD_SET_FUNCTION = 8,
	GAMEPAD_START_PLAYER2 = 7,
	GAMEPAD_START_PLAYER1 = 6,
	GAMEPAD_START_PLAYERS = 5,
	GAMEPAD_STOP_PLAYER2 = 4,
	GAMEPAD_STOP_PLAYER1 = 3,
	GAMEPAD_STOP_PLAYERS = 2,
	GAMEPAD_TOGGLEPAUSE = 1,
	GAMEPAD_RUNNING = 0,
};

enum _98fake // Hashcode: 0x679D8EF4 (dec: 1738378996)
{
	FAST_RAM = 2,
	WORK_RAM = 1,
};

enum OVER_TYPE // Hashcode: 0x67E3CF64 (dec: 1742983012)
{
	OVR_FMV = 4,
	OVR_FRONTEND = 3,
	OVR_GAME = 2,
	OVR_PREGAME = 1,
	OVR_NONE = 0,
};

enum ping_status // Hashcode: 0x41F0D79C (dec: 1106302876)
{
	ping_silence = 4,
	ping_new = 3,
	ping_empty = 2,
	ping_error = 1,
	ping_ok = 0,
};

enum write_ret // Hashcode: 0x29412405 (dec: 692134917)
{
	write_no_card = 3,
	write_no_space = 2,
	write_error = 1,
	write_ok = 0,
};

enum read_ret // Hashcode: 0x991E4937 (dec: -1726068425)
{
	read_no_card = 3,
	read_invalid = 2,
	read_error = 1,
	read_ok = 0,
};

enum card_events // Hashcode: 0x31DA5809 (dec: 836392969)
{
	cardevent_initialise = 7,
	cardevent_error = 6,
	cardevent_deleting = 5,
	cardevent_formatting = 4,
	cardevent_loading = 3,
	cardevent_saving = 2,
	cardevent_inserted = 1,
	cardevent_directory = 0,
};

enum TPAGE_TYPES // Hashcode: 0x5E44F37D (dec: 1581577085)
{
	TPAGE_16BIT = 2,
	TPAGE_8BIT = 1,
	TPAGE_4BIT = 0,
};

enum FILE_SYSTEM // Hashcode: 0xF6BABEA2 (dec: -155533662)
{
	FS_CD = 1,
	FS_PC = 0,
};

enum DEV_KIT // Hashcode: 0xD9FA4F5F (dec: -637907105)
{
	DK_CLIMAX = 2,
	DK_SONY_PCI = 1,
	DK_SONY_ISA = 0,
};

enum _125fake // Hashcode: 0xD7CD3F57 (dec: -674414761)
{
	IS_TITERR = 979,
	MUSIC_INTRO = 978,
	MUSIC_L4 = 977,
	MUSIC_L3 = 976,
	MUSIC_L2 = 975,
	MUSIC_L1 = 974,
	MUSIC_TOWN = 973,
	MSFX_DMAGS = 972,
	MSFX_DMAGD = 971,
	MSFX_DMAGH = 970,
	MSFX_DMAGA = 969,
	MSFX_DIABLOS = 968,
	MSFX_DIABLOD = 967,
	MSFX_DIABLOH = 966,
	MSFX_DIABLOA = 965,
	MSFX_GOLMS = 964,
	MSFX_GOLMD = 963,
	MSFX_GOLMH = 962,
	MSFX_GOLMA = 961,
	MSFX_MAGES = 960,
	MSFX_MAGED = 959,
	MSFX_MAGEH = 958,
	MSFX_MAGEA = 957,
	MSFX_SCBSS = 956,
	MSFX_SCBSD = 955,
	MSFX_SCBSH = 954,
	MSFX_SCBSA = 953,
	MSFX_BLACKS = 952,
	MSFX_BLACKD = 951,
	MSFX_BLACKH = 950,
	MSFX_BLACKA = 949,
	MSFX_SNAKES = 948,
	MSFX_SNAKED = 947,
	MSFX_SNAKEH = 946,
	MSFX_SNAKEA = 945,
	MSFX_MEGAS = 944,
	MSFX_MEGAD = 943,
	MSFX_MEGAH = 942,
	MSFX_MEGAA = 941,
	MSFX_GARGOS = 940,
	MSFX_GARGOD = 939,
	MSFX_GARGOH = 938,
	MSFX_GARGOA = 937,
	MSFX_BFALS = 936,
	MSFX_BFALD = 935,
	MSFX_BFALH = 934,
	MSFX_BFALA = 933,
	MSFX_THINS = 932,
	MSFX_THIND = 931,
	MSFX_THINH = 930,
	MSFX_THINA = 929,
	MSFX_RHINOS = 928,
	MSFX_RHINOD = 927,
	MSFX_RHINOH = 926,
	MSFX_RHINOA = 925,
	MSFX_MAGMAS = 924,
	MSFX_MAGMAD = 923,
	MSFX_MAGMAH = 922,
	MSFX_MAGMAA = 921,
	MSFX_FATS = 920,
	MSFX_FATD = 919,
	MSFX_FATH = 918,
	MSFX_FATA = 917,
	MSFX_FATCS = 916,
	MSFX_FATCD = 915,
	MSFX_FATCH = 914,
	MSFX_FATCA = 913,
	MSFX_SKINGS = 912,
	MSFX_SKINGD = 911,
	MSFX_SKINGH = 910,
	MSFX_SKINGA = 909,
	MSFX_ACIDS = 908,
	MSFX_ACIDD = 907,
	MSFX_ACIDH = 906,
	MSFX_ACIDA = 905,
	MSFX_GOATBS = 904,
	MSFX_GOATBD = 903,
	MSFX_GOATBH = 902,
	MSFX_GOATBA = 901,
	MSFX_BATS = 900,
	MSFX_BATD = 899,
	MSFX_BATH = 898,
	MSFX_BATA = 897,
	MSFX_GOATS = 896,
	MSFX_GOATD = 895,
	MSFX_GOATH = 894,
	MSFX_GOATA = 893,
	MSFX_GOATLS = 892,
	MSFX_GOATLD = 891,
	MSFX_GOATLH = 890,
	MSFX_GOATLA = 889,
	MSFX_SNEAKS = 888,
	MSFX_SNEAKD = 887,
	MSFX_SNEAKH = 886,
	MSFX_SNEAKA = 885,
	MSFX_SNEAKLS = 884,
	MSFX_SNEAKLD = 883,
	MSFX_SNEAKLH = 882,
	MSFX_SNEAKLA = 881,
	MSFX_SKLBWS = 880,
	MSFX_SKLBWD = 879,
	MSFX_SKLBWH = 878,
	MSFX_SKLBWA = 877,
	MSFX_SCAVS = 876,
	MSFX_SCAVD = 875,
	MSFX_SCAVH = 874,
	MSFX_SCAVA = 873,
	MSFX_SKLAXS = 872,
	MSFX_SKLAXD = 871,
	MSFX_SKLAXH = 870,
	MSFX_SKLAXA = 869,
	MSFX_PHALLS = 868,
	MSFX_PHALLD = 867,
	MSFX_PHALLH = 866,
	MSFX_PHALLA = 865,
	MSFX_ZOMBIES = 864,
	MSFX_ZOMBIED = 863,
	MSFX_ZOMBIEH = 862,
	MSFX_ZOMBIEA = 861,
	USFX_DIABLOD = 860,
	USFX_ZHAR2 = 859,
	USFX_ZHAR1 = 858,
	USFX_WLOCK1 = 857,
	USFX_WARLRD1 = 856,
	USFX_SNOT3 = 855,
	USFX_SNOT2 = 854,
	USFX_SNOT1 = 853,
	USFX_SKING1 = 852,
	USFX_LAZ2 = 851,
	USFX_LAZ1 = 850,
	USFX_LACH3 = 849,
	USFX_LACH2 = 848,
	USFX_LACH1 = 847,
	USFX_IZUAL1 = 846,
	USFX_GARBUD4 = 845,
	USFX_GARBUD3 = 844,
	USFX_GARBUD2 = 843,
	USFX_GARBUD1 = 842,
	USFX_CLEAVER = 841,
	PS_DIABLVLINT = 840,
	PS_NAR9 = 839,
	PS_NAR8 = 838,
	PS_NAR7 = 837,
	PS_NAR6 = 836,
	PS_NAR5 = 835,
	PS_NAR4 = 834,
	PS_NAR3 = 833,
	PS_NAR2 = 832,
	PS_NAR1 = 831,
	PS_WDEATH = 830,
	PS_WARR102 = 829,
	PS_WARR101 = 828,
	PS_WARR100 = 827,
	PS_WARR99 = 826,
	PS_WARR98 = 825,
	PS_WARR97 = 824,
	PS_WARR96B = 823,
	PS_WARR95F = 822,
	PS_WARR95E = 821,
	PS_WARR95D = 820,
	PS_WARR95C = 819,
	PS_WARR95B = 818,
	PS_WARR95 = 817,
	PS_WARR94 = 816,
	PS_WARR93 = 815,
	PS_WARR92 = 814,
	PS_WARR91 = 813,
	PS_WARR90 = 812,
	PS_WARR89 = 811,
	PS_WARR88 = 810,
	PS_WARR87 = 809,
	PS_WARR86 = 808,
	PS_WARR85 = 807,
	PS_WARR84 = 806,
	PS_WARR83 = 805,
	PS_WARR82 = 804,
	PS_WARR81 = 803,
	PS_WARR80 = 802,
	PS_WARR79 = 801,
	PS_WARR78 = 800,
	PS_WARR77 = 799,
	PS_WARR76 = 798,
	PS_WARR75 = 797,
	PS_WARR74 = 796,
	PS_WARR73 = 795,
	PS_WARR72 = 794,
	PS_WARR71 = 793,
	PS_WARR70 = 792,
	PS_WARR69B = 791,
	PS_WARR69 = 790,
	PS_WARR68 = 789,
	PS_WARR67 = 788,
	PS_WARR66 = 787,
	PS_WARR65 = 786,
	PS_WARR64 = 785,
	PS_WARR63 = 784,
	PS_WARR62 = 783,
	PS_WARR61 = 782,
	PS_WARR60 = 781,
	PS_WARR59 = 780,
	PS_WARR58 = 779,
	PS_WARR57 = 778,
	PS_WARR56 = 777,
	PS_WARR55 = 776,
	PS_WARR54 = 775,
	PS_WARR53 = 774,
	PS_WARR52 = 773,
	PS_WARR51 = 772,
	PS_WARR50 = 771,
	PS_WARR49 = 770,
	PS_WARR48 = 769,
	PS_WARR47 = 768,
	PS_WARR46 = 767,
	PS_WARR45 = 766,
	PS_WARR44 = 765,
	PS_WARR43 = 764,
	PS_WARR42 = 763,
	PS_WARR41 = 762,
	PS_WARR40 = 761,
	PS_WARR39 = 760,
	PS_WARR38 = 759,
	PS_WARR37 = 758,
	PS_WARR36 = 757,
	PS_WARR35 = 756,
	PS_WARR34 = 755,
	PS_WARR33 = 754,
	PS_WARR32 = 753,
	PS_WARR31 = 752,
	PS_WARR30 = 751,
	PS_WARR29 = 750,
	PS_WARR28 = 749,
	PS_WARR27 = 748,
	PS_WARR26 = 747,
	PS_WARR25 = 746,
	PS_WARR24 = 745,
	PS_WARR23 = 744,
	PS_WARR22 = 743,
	PS_WARR21 = 742,
	PS_WARR20 = 741,
	PS_WARR19 = 740,
	PS_WARR18 = 739,
	PS_WARR17 = 738,
	PS_WARR16C = 737,
	PS_WARR16B = 736,
	PS_WARR16 = 735,
	PS_WARR15C = 734,
	PS_WARR15B = 733,
	PS_WARR15 = 732,
	PS_WARR14C = 731,
	PS_WARR14B = 730,
	PS_WARR14 = 729,
	PS_WARR13 = 728,
	PS_WARR12 = 727,
	PS_WARR11 = 726,
	PS_WARR10 = 725,
	PS_WARR9 = 724,
	PS_WARR8 = 723,
	PS_WARR7 = 722,
	PS_WARR6 = 721,
	PS_WARR5 = 720,
	PS_WARR4 = 719,
	PS_WARR3 = 718,
	PS_WARR2 = 717,
	PS_WARR1 = 716,
	PS_RDEATH = 715,
	PS_ROGUE102 = 714,
	PS_ROGUE101 = 713,
	PS_ROGUE100 = 712,
	PS_ROGUE99 = 711,
	PS_ROGUE98 = 710,
	PS_ROGUE97 = 709,
	PS_ROGUE96 = 708,
	PS_ROGUE95 = 707,
	PS_ROGUE94 = 706,
	PS_ROGUE93 = 705,
	PS_ROGUE92 = 704,
	PS_ROGUE91 = 703,
	PS_ROGUE90 = 702,
	PS_ROGUE89 = 701,
	PS_ROGUE88 = 700,
	PS_ROGUE87 = 699,
	PS_ROGUE86 = 698,
	PS_ROGUE85 = 697,
	PS_ROGUE84 = 696,
	PS_ROGUE83 = 695,
	PS_ROGUE82 = 694,
	PS_ROGUE81 = 693,
	PS_ROGUE80 = 692,
	PS_ROGUE79 = 691,
	PS_ROGUE78 = 690,
	PS_ROGUE77 = 689,
	PS_ROGUE76 = 688,
	PS_ROGUE75 = 687,
	PS_ROGUE74 = 686,
	PS_ROGUE73 = 685,
	PS_ROGUE72 = 684,
	PS_ROGUE71 = 683,
	PS_ROGUE70 = 682,
	PS_ROGUE69B = 681,
	PS_ROGUE69 = 680,
	PS_ROGUE68 = 679,
	PS_ROGUE67 = 678,
	PS_ROGUE66 = 677,
	PS_ROGUE65 = 676,
	PS_ROGUE64 = 675,
	PS_ROGUE63 = 674,
	PS_ROGUE62 = 673,
	PS_ROGUE61 = 672,
	PS_ROGUE60 = 671,
	PS_ROGUE59 = 670,
	PS_ROGUE58 = 669,
	PS_ROGUE57 = 668,
	PS_ROGUE56 = 667,
	PS_ROGUE55 = 666,
	PS_ROGUE54 = 665,
	PS_ROGUE53 = 664,
	PS_ROGUE52 = 663,
	PS_ROGUE51 = 662,
	PS_ROGUE50 = 661,
	PS_ROGUE49 = 660,
	PS_ROGUE48 = 659,
	PS_ROGUE47 = 658,
	PS_ROGUE46 = 657,
	PS_ROGUE45 = 656,
	PS_ROGUE44 = 655,
	PS_ROGUE43 = 654,
	PS_ROGUE42 = 653,
	PS_ROGUE41 = 652,
	PS_ROGUE40 = 651,
	PS_ROGUE39 = 650,
	PS_ROGUE38 = 649,
	PS_ROGUE37 = 648,
	PS_ROGUE36 = 647,
	PS_ROGUE35 = 646,
	PS_ROGUE34 = 645,
	PS_ROGUE33 = 644,
	PS_ROGUE32 = 643,
	PS_ROGUE31 = 642,
	PS_ROGUE30 = 641,
	PS_ROGUE29 = 640,
	PS_ROGUE28 = 639,
	PS_ROGUE27 = 638,
	PS_ROGUE26 = 637,
	PS_ROGUE25 = 636,
	PS_ROGUE24 = 635,
	PS_ROGUE23 = 634,
	PS_ROGUE22 = 633,
	PS_ROGUE21 = 632,
	PS_ROGUE20 = 631,
	PS_ROGUE19 = 630,
	PS_ROGUE18 = 629,
	PS_ROGUE17 = 628,
	PS_ROGUE16 = 627,
	PS_ROGUE15 = 626,
	PS_ROGUE14 = 625,
	PS_ROGUE13 = 624,
	PS_ROGUE12 = 623,
	PS_ROGUE11 = 622,
	PS_ROGUE10 = 621,
	PS_ROGUE9 = 620,
	PS_ROGUE8 = 619,
	PS_ROGUE7 = 618,
	PS_ROGUE6 = 617,
	PS_ROGUE5 = 616,
	PS_ROGUE4 = 615,
	PS_ROGUE3 = 614,
	PS_ROGUE2 = 613,
	PS_ROGUE1 = 612,
	PS_SDEATH = 611,
	PS_MAGE102 = 610,
	PS_MAGE101 = 609,
	PS_MAGE100 = 608,
	PS_MAGE99 = 607,
	PS_MAGE98 = 606,
	PS_MAGE97 = 605,
	PS_MAGE96 = 604,
	PS_MAGE95 = 603,
	PS_MAGE94 = 602,
	PS_MAGE93 = 601,
	PS_MAGE92 = 600,
	PS_MAGE91 = 599,
	PS_MAGE90 = 598,
	PS_MAGE89 = 597,
	PS_MAGE88 = 596,
	PS_MAGE87 = 595,
	PS_MAGE86 = 594,
	PS_MAGE85 = 593,
	PS_MAGE84 = 592,
	PS_MAGE83 = 591,
	PS_MAGE82 = 590,
	PS_MAGE81 = 589,
	PS_MAGE80 = 588,
	PS_MAGE79 = 587,
	PS_MAGE78 = 586,
	PS_MAGE77 = 585,
	PS_MAGE76 = 584,
	PS_MAGE75 = 583,
	PS_MAGE74 = 582,
	PS_MAGE73 = 581,
	PS_MAGE72 = 580,
	PS_MAGE71 = 579,
	PS_MAGE70 = 578,
	PS_MAGE69B = 577,
	PS_MAGE69 = 576,
	PS_MAGE68 = 575,
	PS_MAGE67 = 574,
	PS_MAGE66 = 573,
	PS_MAGE65 = 572,
	PS_MAGE64 = 571,
	PS_MAGE63 = 570,
	PS_MAGE62 = 569,
	PS_MAGE61 = 568,
	PS_MAGE60 = 567,
	PS_MAGE59 = 566,
	PS_MAGE58 = 565,
	PS_MAGE57 = 564,
	PS_MAGE56 = 563,
	PS_MAGE55 = 562,
	PS_MAGE54 = 561,
	PS_MAGE53 = 560,
	PS_MAGE52 = 559,
	PS_MAGE51 = 558,
	PS_MAGE50 = 557,
	PS_MAGE49 = 556,
	PS_MAGE48 = 555,
	PS_MAGE47 = 554,
	PS_MAGE46 = 553,
	PS_MAGE45 = 552,
	PS_MAGE44 = 551,
	PS_MAGE43 = 550,
	PS_MAGE42 = 549,
	PS_MAGE41 = 548,
	PS_MAGE40 = 547,
	PS_MAGE39 = 546,
	PS_MAGE38 = 545,
	PS_MAGE37 = 544,
	PS_MAGE36 = 543,
	PS_MAGE35 = 542,
	PS_MAGE34 = 541,
	PS_MAGE33 = 540,
	PS_MAGE32 = 539,
	PS_MAGE31 = 538,
	PS_MAGE30 = 537,
	PS_MAGE29 = 536,
	PS_MAGE28 = 535,
	PS_MAGE27 = 534,
	PS_MAGE26 = 533,
	PS_MAGE25 = 532,
	PS_MAGE24 = 531,
	PS_MAGE23 = 530,
	PS_MAGE22 = 529,
	PS_MAGE21 = 528,
	PS_MAGE20 = 527,
	PS_MAGE19 = 526,
	PS_MAGE18 = 525,
	PS_MAGE17 = 524,
	PS_MAGE16 = 523,
	PS_MAGE15 = 522,
	PS_MAGE14 = 521,
	PS_MAGE13 = 520,
	PS_MAGE12 = 519,
	PS_MAGE11 = 518,
	PS_MAGE10 = 517,
	PS_MAGE9 = 516,
	PS_MAGE8 = 515,
	PS_MAGE7 = 514,
	PS_MAGE6 = 513,
	PS_MAGE5 = 512,
	PS_MAGE4 = 511,
	PS_MAGE3 = 510,
	PS_MAGE2 = 509,
	PS_MAGE1 = 508,
	TSFX_WOUND = 507,
	TSFX_WITCH50 = 506,
	TSFX_WITCH49 = 505,
	TSFX_WITCH48 = 504,
	TSFX_WITCH47 = 503,
	TSFX_WITCH46 = 502,
	TSFX_WITCH45 = 501,
	TSFX_WITCH44 = 500,
	TSFX_WITCH43 = 499,
	TSFX_WITCH42 = 498,
	TSFX_WITCH41 = 497,
	TSFX_WITCH40 = 496,
	TSFX_WITCH39 = 495,
	TSFX_WITCH38 = 494,
	TSFX_WITCH37 = 493,
	TSFX_WITCH36 = 492,
	TSFX_WITCH35 = 491,
	TSFX_WITCH34 = 490,
	TSFX_WITCH33 = 489,
	TSFX_WITCH32 = 488,
	TSFX_WITCH31 = 487,
	TSFX_WITCH30 = 486,
	TSFX_WITCH29 = 485,
	TSFX_WITCH28 = 484,
	TSFX_WITCH27 = 483,
	TSFX_WITCH26 = 482,
	TSFX_WITCH25 = 481,
	TSFX_WITCH24 = 480,
	TSFX_WITCH23 = 479,
	TSFX_WITCH22 = 478,
	TSFX_WITCH21 = 477,
	TSFX_WITCH20 = 476,
	TSFX_WITCH19 = 475,
	TSFX_WITCH18 = 474,
	TSFX_WITCH17 = 473,
	TSFX_WITCH16 = 472,
	TSFX_WITCH15 = 471,
	TSFX_WITCH14 = 470,
	TSFX_WITCH13 = 469,
	TSFX_WITCH12 = 468,
	TSFX_WITCH11 = 467,
	TSFX_WITCH10 = 466,
	TSFX_WITCH9 = 465,
	TSFX_WITCH8 = 464,
	TSFX_WITCH7 = 463,
	TSFX_WITCH6 = 462,
	TSFX_WITCH5 = 461,
	TSFX_WITCH4 = 460,
	TSFX_WITCH3 = 459,
	TSFX_WITCH2 = 458,
	TSFX_WITCH1 = 457,
	TSFX_TAVERN45 = 456,
	TSFX_TAVERN44 = 455,
	TSFX_TAVERN43 = 454,
	TSFX_TAVERN42 = 453,
	TSFX_TAVERN41 = 452,
	TSFX_TAVERN40 = 451,
	TSFX_TAVERN39 = 450,
	TSFX_TAVERN38 = 449,
	TSFX_TAVERN37 = 448,
	TSFX_TAVERN36 = 447,
	TSFX_TAVERN35 = 446,
	TSFX_TAVERN34 = 445,
	TSFX_TAVERN33 = 444,
	TSFX_TAVERN32 = 443,
	TSFX_TAVERN31 = 442,
	TSFX_TAVERN30 = 441,
	TSFX_TAVERN29 = 440,
	TSFX_TAVERN28 = 439,
	TSFX_TAVERN27 = 438,
	TSFX_TAVERN26 = 437,
	TSFX_TAVERN25 = 436,
	TSFX_TAVERN24 = 435,
	TSFX_TAVERN23 = 434,
	TSFX_TAVERN22 = 433,
	TSFX_TAVERN21 = 432,
	TSFX_TAVERN20 = 431,
	TSFX_TAVERN19 = 430,
	TSFX_TAVERN18 = 429,
	TSFX_TAVERN17 = 428,
	TSFX_TAVERN16 = 427,
	TSFX_TAVERN15 = 426,
	TSFX_TAVERN14 = 425,
	TSFX_TAVERN13 = 424,
	TSFX_TAVERN12 = 423,
	TSFX_TAVERN11 = 422,
	TSFX_TAVERN10 = 421,
	TSFX_TAVERN9 = 420,
	TSFX_TAVERN8 = 419,
	TSFX_TAVERN7 = 418,
	TSFX_TAVERN6 = 417,
	TSFX_TAVERN5 = 416,
	TSFX_TAVERN4 = 415,
	TSFX_TAVERN3 = 414,
	TSFX_TAVERN2 = 413,
	TSFX_TAVERN1 = 412,
	TSFX_TAVERN0 = 411,
	TSFX_STORY38 = 410,
	TSFX_STORY37 = 409,
	TSFX_STORY36 = 408,
	TSFX_STORY35 = 407,
	TSFX_STORY34 = 406,
	TSFX_STORY33 = 405,
	TSFX_STORY32 = 404,
	TSFX_STORY31 = 403,
	TSFX_STORY30 = 402,
	TSFX_STORY29 = 401,
	TSFX_STORY28 = 400,
	TSFX_STORY27 = 399,
	TSFX_STORY26 = 398,
	TSFX_STORY25 = 397,
	TSFX_STORY24 = 396,
	TSFX_STORY23 = 395,
	TSFX_STORY22 = 394,
	TSFX_STORY21 = 393,
	TSFX_STORY20 = 392,
	TSFX_STORY19 = 391,
	TSFX_STORY18 = 390,
	TSFX_STORY17 = 389,
	TSFX_STORY16 = 388,
	TSFX_STORY15 = 387,
	TSFX_STORY14 = 386,
	TSFX_STORY13 = 385,
	TSFX_STORY12 = 384,
	TSFX_STORY11 = 383,
	TSFX_STORY10 = 382,
	TSFX_STORY9 = 381,
	TSFX_STORY8 = 380,
	TSFX_STORY7 = 379,
	TSFX_STORY6 = 378,
	TSFX_STORY5 = 377,
	TSFX_STORY4 = 376,
	TSFX_STORY3 = 375,
	TSFX_STORY2 = 374,
	TSFX_STORY1 = 373,
	TSFX_STORY0 = 372,
	TSFX_PRIEST7 = 371,
	TSFX_PRIEST6 = 370,
	TSFX_PRIEST5 = 369,
	TSFX_PRIEST4 = 368,
	TSFX_PRIEST3 = 367,
	TSFX_PRIEST2 = 366,
	TSFX_PRIEST1 = 365,
	TSFX_PRIEST0 = 364,
	TSFX_PEGBOY43 = 363,
	TSFX_PEGBOY42 = 362,
	TSFX_PEGBOY41 = 361,
	TSFX_PEGBOY40 = 360,
	TSFX_PEGBOY39 = 359,
	TSFX_PEGBOY38 = 358,
	TSFX_PEGBOY37 = 357,
	TSFX_PEGBOY36 = 356,
	TSFX_PEGBOY35 = 355,
	TSFX_PEGBOY34 = 354,
	TSFX_PEGBOY33 = 353,
	TSFX_PEGBOY32 = 352,
	TSFX_PEGBOY31 = 351,
	TSFX_PEGBOY30 = 350,
	TSFX_PEGBOY29 = 349,
	TSFX_PEGBOY28 = 348,
	TSFX_PEGBOY27 = 347,
	TSFX_PEGBOY26 = 346,
	TSFX_PEGBOY25 = 345,
	TSFX_PEGBOY24 = 344,
	TSFX_PEGBOY23 = 343,
	TSFX_PEGBOY22 = 342,
	TSFX_PEGBOY21 = 341,
	TSFX_PEGBOY20 = 340,
	TSFX_PEGBOY19 = 339,
	TSFX_PEGBOY18 = 338,
	TSFX_PEGBOY17 = 337,
	TSFX_PEGBOY16 = 336,
	TSFX_PEGBOY15 = 335,
	TSFX_PEGBOY14 = 334,
	TSFX_PEGBOY13 = 333,
	TSFX_PEGBOY12 = 332,
	TSFX_PEGBOY11 = 331,
	TSFX_PEGBOY10 = 330,
	TSFX_PEGBOY9 = 329,
	TSFX_PEGBOY8 = 328,
	TSFX_PEGBOY7 = 327,
	TSFX_PEGBOY6 = 326,
	TSFX_PEGBOY5 = 325,
	TSFX_PEGBOY4 = 324,
	TSFX_PEGBOY3 = 323,
	TSFX_PEGBOY2 = 322,
	TSFX_PEGBOY1 = 321,
	TSFX_HEALER47 = 320,
	TSFX_HEALER46 = 319,
	TSFX_HEALER45 = 318,
	TSFX_HEALER44 = 317,
	TSFX_HEALER43 = 316,
	TSFX_HEALER42 = 315,
	TSFX_HEALER41 = 314,
	TSFX_HEALER40 = 313,
	TSFX_HEALER39 = 312,
	TSFX_HEALER38 = 311,
	TSFX_HEALER37 = 310,
	TSFX_HEALER36 = 309,
	TSFX_HEALER35 = 308,
	TSFX_HEALER34 = 307,
	TSFX_HEALER33 = 306,
	TSFX_HEALER32 = 305,
	TSFX_HEALER31 = 304,
	TSFX_HEALER30 = 303,
	TSFX_HEALER29 = 302,
	TSFX_HEALER28 = 301,
	TSFX_HEALER27 = 300,
	TSFX_HEALER26 = 299,
	TSFX_HEALER25 = 298,
	TSFX_HEALER24 = 297,
	TSFX_HEALER23 = 296,
	TSFX_HEALER22 = 295,
	TSFX_HEALER21 = 294,
	TSFX_HEALER20 = 293,
	TSFX_HEALER19 = 292,
	TSFX_HEALER18 = 291,
	TSFX_HEALER17 = 290,
	TSFX_HEALER16 = 289,
	TSFX_HEALER15 = 288,
	TSFX_HEALER14 = 287,
	TSFX_HEALER13 = 286,
	TSFX_HEALER12 = 285,
	TSFX_HEALER11 = 284,
	TSFX_HEALER10 = 283,
	TSFX_HEALER9 = 282,
	TSFX_HEALER8 = 281,
	TSFX_HEALER7 = 280,
	TSFX_HEALER6 = 279,
	TSFX_HEALER5 = 278,
	TSFX_HEALER4 = 277,
	TSFX_HEALER3 = 276,
	TSFX_HEALER2 = 275,
	TSFX_HEALER1 = 274,
	TSFX_DRUNK35 = 273,
	TSFX_DRUNK34 = 272,
	TSFX_DRUNK33 = 271,
	TSFX_DRUNK32 = 270,
	TSFX_DRUNK31 = 269,
	TSFX_DRUNK30 = 268,
	TSFX_DRUNK29 = 267,
	TSFX_DRUNK28 = 266,
	TSFX_DRUNK27 = 265,
	TSFX_DRUNK26 = 264,
	TSFX_DRUNK25 = 263,
	TSFX_DRUNK24 = 262,
	TSFX_DRUNK23 = 261,
	TSFX_DRUNK22 = 260,
	TSFX_DRUNK21 = 259,
	TSFX_DRUNK20 = 258,
	TSFX_DRUNK19 = 257,
	TSFX_DRUNK18 = 256,
	TSFX_DRUNK17 = 255,
	TSFX_DRUNK16 = 254,
	TSFX_DRUNK15 = 253,
	TSFX_DRUNK14 = 252,
	TSFX_DRUNK13 = 251,
	TSFX_DRUNK12 = 250,
	TSFX_DRUNK11 = 249,
	TSFX_DRUNK10 = 248,
	TSFX_DRUNK9 = 247,
	TSFX_DRUNK8 = 246,
	TSFX_DRUNK7 = 245,
	TSFX_DRUNK6 = 244,
	TSFX_DRUNK5 = 243,
	TSFX_DRUNK4 = 242,
	TSFX_DRUNK3 = 241,
	TSFX_DRUNK2 = 240,
	TSFX_DRUNK1 = 239,
	TSFX_DEADGUY = 238,
	TSFX_COW8 = 237,
	TSFX_COW7 = 236,
	TSFX_COW6 = 235,
	TSFX_COW5 = 234,
	TSFX_COW4 = 233,
	TSFX_COW3 = 232,
	TSFX_WINDBLOW = 231,
	TSFX_TREEBLOW = 230,
	TSFX_TAVERN = 229,
	TSFX_STREAM = 228,
	TSFX_OWLECHO = 227,
	TSFX_MICE = 226,
	TSFX_CRICKET2 = 225,
	TSFX_CRICKET1 = 224,
	TSFX_BIRDS2 = 223,
	TSFX_BIRDS1 = 222,
	TSFX_BIRDCHR2 = 221,
	TSFX_BIRDCHR1 = 220,
	TSFX_BATS = 219,
	TSFX_COW2 = 218,
	TSFX_COW1 = 217,
	TSFX_SMITH56 = 216,
	TSFX_SMITH55 = 215,
	TSFX_SMITH54 = 214,
	TSFX_SMITH53 = 213,
	TSFX_SMITH52 = 212,
	TSFX_SMITH51 = 211,
	TSFX_SMITH50 = 210,
	TSFX_SMITH49 = 209,
	TSFX_SMITH48 = 208,
	TSFX_SMITH47 = 207,
	TSFX_SMITH46 = 206,
	TSFX_SMITH45 = 205,
	TSFX_SMITH44 = 204,
	TSFX_SMITH43 = 203,
	TSFX_SMITH42 = 202,
	TSFX_SMITH41 = 201,
	TSFX_SMITH40 = 200,
	TSFX_SMITH39 = 199,
	TSFX_SMITH38 = 198,
	TSFX_SMITH37 = 197,
	TSFX_SMITH36 = 196,
	TSFX_SMITH35 = 195,
	TSFX_SMITH34 = 194,
	TSFX_SMITH33 = 193,
	TSFX_SMITH32 = 192,
	TSFX_SMITH31 = 191,
	TSFX_SMITH30 = 190,
	TSFX_SMITH29 = 189,
	TSFX_SMITH28 = 188,
	TSFX_SMITH27 = 187,
	TSFX_SMITH26 = 186,
	TSFX_SMITH25 = 185,
	TSFX_SMITH24 = 184,
	TSFX_SMITH23 = 183,
	TSFX_SMITH22 = 182,
	TSFX_SMITH21 = 181,
	TSFX_SMITH20 = 180,
	TSFX_SMITH19 = 179,
	TSFX_SMITH18 = 178,
	TSFX_SMITH17 = 177,
	TSFX_SMITH16 = 176,
	TSFX_SMITH15 = 175,
	TSFX_SMITH14 = 174,
	TSFX_SMITH13 = 173,
	TSFX_SMITH12 = 172,
	TSFX_SMITH11 = 171,
	TSFX_SMITH10 = 170,
	TSFX_SMITH9 = 169,
	TSFX_SMITH8 = 168,
	TSFX_SMITH7 = 167,
	TSFX_SMITH6 = 166,
	TSFX_SMITH5 = 165,
	TSFX_SMITH4 = 164,
	TSFX_SMITH3 = 163,
	TSFX_SMITH2 = 162,
	TSFX_SMITH1 = 161,
	TSFX_BMAID40 = 160,
	TSFX_BMAID39 = 159,
	TSFX_BMAID38 = 158,
	TSFX_BMAID37 = 157,
	TSFX_BMAID36 = 156,
	TSFX_BMAID35 = 155,
	TSFX_BMAID34 = 154,
	TSFX_BMAID33 = 153,
	TSFX_BMAID32 = 152,
	TSFX_BMAID31 = 151,
	TSFX_BMAID30 = 150,
	TSFX_BMAID29 = 149,
	TSFX_BMAID28 = 148,
	TSFX_BMAID27 = 147,
	TSFX_BMAID26 = 146,
	TSFX_BMAID25 = 145,
	TSFX_BMAID24 = 144,
	TSFX_BMAID23 = 143,
	TSFX_BMAID22 = 142,
	TSFX_BMAID21 = 141,
	TSFX_BMAID20 = 140,
	TSFX_BMAID19 = 139,
	TSFX_BMAID18 = 138,
	TSFX_BMAID17 = 137,
	TSFX_BMAID16 = 136,
	TSFX_BMAID15 = 135,
	TSFX_BMAID14 = 134,
	TSFX_BMAID13 = 133,
	TSFX_BMAID12 = 132,
	TSFX_BMAID11 = 131,
	TSFX_BMAID10 = 130,
	TSFX_BMAID9 = 129,
	TSFX_BMAID8 = 128,
	TSFX_BMAID7 = 127,
	TSFX_BMAID6 = 126,
	TSFX_BMAID5 = 125,
	TSFX_BMAID4 = 124,
	TSFX_BMAID3 = 123,
	TSFX_BMAID2 = 122,
	TSFX_BMAID1 = 121,
	LS_WALLSTRT = 120,
	LS_WALLLOOP = 119,
	LS_VTHEFT = 118,
	LS_TELEPORT = 117,
	LS_TRAPDIS = 116,
	LS_STORM = 115,
	LS_SPOUTSTR = 114,
	LS_SPOUTLOP = 113,
	LS_SOULFIRE = 112,
	LS_SHATTER = 111,
	LS_SENTINEL = 110,
	LS_SCURIMP = 109,
	LS_SCURSE = 108,
	LS_RESUR = 107,
	LS_PUDDLE = 106,
	LS_PORTAL = 105,
	LS_NOVA = 104,
	LS_MSHIELD = 103,
	LS_LTNING = 102,
	LS_LNING1 = 101,
	LS_INVPOT = 100,
	LS_INVISIBL = 99,
	LS_INFRAVIS = 98,
	LS_HYPER = 97,
	LS_HOLYBOLT = 96,
	LS_GUARDLAN = 95,
	LS_GUARD = 94,
	LS_GSHRINE = 93,
	LS_GOLUMDED = 92,
	LS_GOLUM = 91,
	LS_FOUNTAIN = 90,
	LS_FLASH = 89,
	LS_FLAMWAVE = 88,
	LS_FIRIMP2 = 87,
	LS_FIRIMP1 = 86,
	LS_FBOLT2 = 85,
	LS_FBOLT1 = 84,
	LS_FBALL = 83,
	LS_ETHEREAL = 82,
	LS_ELEMENTL = 81,
	LS_ELECIMP1 = 80,
	LS_DSERP = 79,
	LS_CHLTNING = 78,
	LS_CBOLT = 77,
	LS_CALDRON = 76,
	LS_BSIMPCT = 75,
	LS_BONESP = 74,
	LS_BLSIMPT = 73,
	LS_BLODSTAR = 72,
	LS_BLODBOIL = 71,
	LS_ARROWALL = 70,
	LS_APOC = 69,
	LS_ACIDS = 68,
	LS_ACID = 67,
	IS_REPAIR = 66,
	LS_HEALING = 65,
	IS_CAST9 = 64,
	IS_CAST8 = 63,
	IS_CAST7 = 62,
	IS_CAST6 = 61,
	IS_CAST5 = 60,
	IS_CAST4 = 59,
	IS_CAST3 = 58,
	IS_CAST2 = 57,
	IS_CAST12 = 56,
	IS_CAST10 = 55,
	IS_CAST1 = 54,
	IS_TRAP = 53,
	SFX_SILENCE = 52,
	IS_TITLSLCT = 51,
	IS_TITLEMOV = 50,
	IS_SWRDFKD = 49,
	IS_SHLDFKD = 48,
	IS_SARC = 47,
	IS_RBOOK = 46,
	IS_MAGIC1 = 45,
	IS_MAGIC = 44,
	IS_LEVER = 43,
	IS_ISWORD = 42,
	IS_ISTAF = 41,
	IS_ISIGN = 40,
	IS_ISHIEL = 39,
	IS_ISCROL = 38,
	IS_IROCK = 37,
	IS_IRING = 36,
	IS_IPOT = 35,
	IS_IMUSH = 34,
	IS_ILARM = 33,
	IS_IHARM = 32,
	IS_IGRAB = 31,
	IS_ICAP = 30,
	IS_IBOW = 29,
	IS_IBOOK = 28,
	IS_IBODY = 27,
	IS_IBLST = 26,
	IS_IAXE = 25,
	IS_IANVL = 24,
	IS_HLMTFKD = 23,
	IS_GOLD = 22,
	IS_FLIP = 21,
	IS_DOOROPEN = 20,
	IS_DOORCLOS = 19,
	IS_CHEST = 18,
	IS_BHIT1 = 17,
	IS_BHIT = 16,
	IS_BARREL = 15,
	IS_BARLFIRE = 14,
	IS_ARMRFKD = 13,
	IS_QUESTDN = 12,
	PS_DEAD = 11,
	PS_SWING2 = 10,
	PS_SWING = 9,
	PS_LGHIT1 = 8,
	PS_LGHIT = 7,
	PS_TMAG = 6,
	PS_FMAG = 5,
	PS_BFIRE = 4,
	PS_WALK4 = 3,
	PS_WALK3 = 2,
	PS_WALK2 = 1,
	PS_WALK1 = 0,
};

enum _126fake // Hashcode: 0x31DD9003 (dec: 836603907)
{
	QS_BRAINGIVEN = 7,
	QS_BRAINSPAWNED = 6,
	QS_MUSHGIVEN = 5,
	QS_MUSHPICKED = 4,
	QS_MUSHSPAWNED = 3,
	QS_TOMEGIVEN = 2,
	QS_TOMESPAWNED = 1,
	QS_INIT = 0,
};

enum _setlevels // Hashcode: 0x8882AD95 (dec: -2004701803)
{
	SL_VILEBETRAYER = 5,
	SL_POISONWATER = 4,
	SL_MAZE = 3,
	SL_BONECHAMB = 2,
	SL_SKELKING = 1,
};

enum _139fake // Hashcode: 0xA640991D (dec: -1505715939)
{
	NUM_CMDS = 93,
	FAKE_CMD_DROPID = 92,
	FAKE_CMD_SETID = 91,
	CMD_AWAKEGOLEM = 90,
	CMD_ENDSHIELD = 89,
	CMD_SYNCQUEST = 88,
	CMD_KILLGOLEM = 87,
	CMD_SYNCPUTITEM = 86,
	CMD_ITEMEXTRA = 85,
	CMD_SPELLXYD = 84,
	CMD_RETOWN = 83,
	CMD_SETVIT = 82,
	CMD_SETDEX = 81,
	CMD_SETMAG = 80,
	CMD_SETSTR = 79,
	CMD_STRING = 78,
	CMD_HEALOTHER = 77,
	CMD_DLEVEL_END = 76,
	CMD_DLEVEL_JUNK = 75,
	CMD_DLEVEL_16 = 74,
	CMD_DLEVEL_15 = 73,
	CMD_DLEVEL_14 = 72,
	CMD_DLEVEL_13 = 71,
	CMD_DLEVEL_12 = 70,
	CMD_DLEVEL_11 = 69,
	CMD_DLEVEL_10 = 68,
	CMD_DLEVEL_9 = 67,
	CMD_DLEVEL_8 = 66,
	CMD_DLEVEL_7 = 65,
	CMD_DLEVEL_6 = 64,
	CMD_DLEVEL_5 = 63,
	CMD_DLEVEL_4 = 62,
	CMD_DLEVEL_3 = 61,
	CMD_DLEVEL_2 = 60,
	CMD_DLEVEL_1 = 59,
	CMD_DLEVEL_0 = 58,
	CMD_DEACTIVATEPORTAL = 57,
	CMD_ACTIVATEPORTAL = 56,
	CMD_SATTACKXY = 55,
	CMD_SEND_PLRINFO = 54,
	CMD_PLAYER_JOINLEVEL = 53,
	CMD_DROPITEM = 52,
	CMD_PLRLEVEL = 51,
	CMD_PLRDAMAGE = 50,
	CMD_DELPLRITEMS = 49,
	CMD_CHANGEPLRITEMS = 48,
	CMD_BREAKOBJ = 47,
	CMD_PLROPOBJ = 46,
	CMD_OPERATEOBJ = 45,
	CMD_CLOSEDOOR = 44,
	CMD_OPENDOOR = 43,
	CMD_GOTOAGETITEM = 42,
	CMD_GOTOGETITEM = 41,
	CMD_REQUESTAGITEM = 40,
	CMD_REQUESTGITEM = 39,
	CMD_PLRDEAD = 38,
	CMD_MONSTDAMAGE = 37,
	CMD_MONSTDEATH = 36,
	CMD_SYNCDATA = 35,
	CMD_DEBUG = 34,
	CMD_CHEAT_SPELL_LEVEL = 33,
	CMD_CHEAT_EXPERIENCE = 32,
	CMD_WARP = 31,
	CMD_NEWLVL = 30,
	CMD_TALKXY = 29,
	CMD_KNOCKBACK = 28,
	CMD_OPOBJT = 27,
	CMD_RESURRECT = 26,
	CMD_TSPELLPID = 25,
	CMD_TSPELLID = 24,
	CMD_SPELLPID = 23,
	CMD_SPELLID = 22,
	CMD_RATTACKPID = 21,
	CMD_RATTACKID = 20,
	CMD_ATTACKPID = 19,
	CMD_ATTACKID = 18,
	CMD_DISARMXY = 17,
	CMD_OPOBJXY = 16,
	CMD_TSPELLXY = 15,
	CMD_SPELLXY = 14,
	CMD_RATTACKXY = 13,
	CMD_ATTACKXY = 12,
	CMD_RESPAWNITEM = 11,
	CMD_PUTITEM = 10,
	CMD_AGETITEM = 9,
	CMD_GETITEM = 8,
	CMD_SBSPELL = 7,
	CMD_ADDVIT = 6,
	CMD_ADDDEX = 5,
	CMD_ADDMAG = 4,
	CMD_ADDSTR = 3,
	CMD_ACK_PLRINFO = 2,
	CMD_WALKXY = 1,
	CMD_STAND = 0,
};

enum _145fake // Hashcode: 0x7E75676A (dec: 2121623402)
{
	BUFFER_PROCESS = 2,
	BUFFER_ON = 1,
	BUFFER_OFF = 0,
};

enum _221fake // Hashcode: 0x82349D5A (dec: -2110481062)
{
	BIRD_HOP = 4,
	BIRD_LANDING = 3,
	BIRD_SCATTER = 2,
	BIRD_FLY = 1,
	BIRD_PERCH = 0,
};

enum _ui_classes // Hashcode: 0xAA578D55 (dec: -1437102763)
{
	UI_NUM_CLASSES = 3,
	UI_SORCERER = 2,
	UI_ROGUE = 1,
	UI_WARRIOR = 0,
};

enum _copyprot_results // Hashcode: 0x51BF9F34 (dec: 1371512628)
{
	COPYPROT_CANCEL = 2,
	COPYPROT_OK = 1,
};

enum _mainmenu_selections // Hashcode: 0x4B5E29FD (dec: 1264462333)
{
	MAINMENU_ATTRACT_MODE = 6,
	MAINMENU_EXIT_DIABLO = 5,
	MAINMENU_SHOW_CREDITS = 4,
	MAINMENU_REPLAY_INTRO = 3,
	MAINMENU_MULTIPLAYER = 2,
	MAINMENU_SINGLE_PLAYER = 1,
};

enum _difficulty // Hashcode: 0x3223B65A (dec: 841201242)
{
	NUM_DIFFICULTIES = 3,
	DIFF_HELL = 2,
	DIFF_NIGHTMARE = 1,
	DIFF_NORMAL = 0,
};

enum _selhero_selections // Hashcode: 0xCCB2A9E0 (dec: -860706336)
{
	SELHERO_PREVIOUS = 4,
	SELHERO_CONNECT = 3,
	SELHERO_CONTINUE = 2,
	SELHERO_NEW_DUNGEON = 1,
};

enum _dialmodes // Hashcode: 0x1F6B470E (dec: 527124238)
{
	MODE_DIALNEW = 5,
	MODE_DIALOLD = 4,
	MODE_ANSWER = 3,
};

enum hw_event // Hashcode: 0x2ABF7A48 (dec: 717191752)
{
	hw_silence = 4,
	hw_error = 3,
	hw_new = 2,
	hw_empty = 1,
	hw_end = 0,
};

enum _229fake // Hashcode: 0x30FBDC93 (dec: 821812371)
{
	PART_TRANS_RIGHT = 2,
	PART_TRANS_LEFT = 1,
	PART_TRANS_NONE = 0,
};

enum _230fake // Hashcode: 0x819C97AA (dec: -2120443990)
{
	PLAYER_RIGHT_SIDE = 2,
	PLAYER_LEFT_SIDE = 1,
};

enum _231fake // Hashcode: 0xCB86E052 (dec: -880353198)
{
	TRN_MAGE_CNSELBK = 66,
	TRN_MAGE_CNSELGD = 65,
	TRN_MAGE_CNSELG = 64,
	TRN_SUCC_SUCCBW = 63,
	TRN_SUCC_SUCCRW = 62,
	TRN_SUCC_SUCCB = 61,
	TRN_BLACK_BLKKNTBE = 60,
	TRN_BLACK_BLKKNTBT = 59,
	TRN_BLACK_BLKKNTRT = 58,
	TRN_SNAKE_SNAKB = 57,
	TRN_SNAKE_SNAKG = 56,
	TRN_SNAKE_SNAKR = 55,
	TRN_MEGA_BALR = 54,
	TRN_MEGA_VTEXL = 53,
	TRN_MEGA_GUARD = 52,
	TRN_GARGOYLE_GARGB = 51,
	TRN_GARGOYLE_GARGBR = 50,
	TRN_GARGOYLE_GARE = 49,
	TRN_THIN_THINV1 = 48,
	TRN_THIN_THINV2 = 47,
	TRN_THIN_THINV3 = 46,
	TRN_RHINO_RHINOB = 45,
	TRN_RHINO_BLUE = 44,
	TRN_RHINO_ORANGE = 43,
	TRN_MAGMA_WIERD = 42,
	TRN_MAGMA_BLUE = 41,
	TRN_MAGMA_YELLOW = 40,
	TRN_FAT_FATF = 39,
	TRN_FAT_FATB = 38,
	TRN_FAT_BLUE = 37,
	TRN_ACID_ACIDR = 36,
	TRN_ACID_ACIDB = 35,
	TRN_ACID_ACIDBLK = 34,
	TRN_GOATBOW_GRAY = 33,
	TRN_GOATBOW_RED = 32,
	TRN_GOATBOW_BEIGE = 31,
	TRN_BAT_ORANGE = 30,
	TRN_BAT_GREY = 29,
	TRN_BAT_RED = 28,
	TRN_GOATMACE_GRAY = 27,
	TRN_GOATMACE_RED = 26,
	TRN_GOATMACE_BEIGE = 25,
	TRN_SNEAK_SNEAKV1 = 24,
	TRN_SNEAK_SNEAKV3 = 23,
	TRN_SNEAK_SNEAKV2 = 22,
	TRN_SKELSD_BLACK = 21,
	TRN_SKELSD_SKELT = 20,
	TRN_SKELSD_WHITE = 19,
	TRN_SKELBOW_BLACK = 18,
	TRN_SKELBOW_SKELT = 17,
	TRN_SKELBOW_WHITE = 16,
	TRN_SCAV_SCAVW = 15,
	TRN_SCAV_SCAVBE = 14,
	TRN_SCAV_SCAVBR = 13,
	TRN_FALSWORD_BLUE = 12,
	TRN_FALSWORD_DARK = 11,
	TRN_FALSWORD_FALLENT = 10,
	TRN_SKELAXE_BLACK = 9,
	TRN_SKELAXE_SKELT = 8,
	TRN_SKELAXE_WHITE = 7,
	TRN_FALSPEAR_BLUE = 6,
	TRN_FALSPEAR_DARK = 5,
	TRN_FALSPEAR_FALLENT = 4,
	TRN_ZOMBIE_YELLOW = 3,
	TRN_ZOMBIE_GREY = 2,
	TRN_ZOMBIE_BLUERED = 1,
	TRN_PAL_NULL = 0,
};

enum _232fake // Hashcode: 0xE7BB68BF (dec: -407148353)
{
	GAL_PHANTOM_MEM = 0,
	GAL_FIRST_FREE_MEM_TYPE = 1,
	GAL_HIGH = 32768,
	GAL_FLAGS = 32768,
};
/* End enums */

/* Begin structs */

struct _physadr // hashcode: 0xD78033E0 (dec: -679463968)
{
	int r[1]; // size=4, offset=0
};

struct label_t // hashcode: 0x82C1F642 (dec: -2101217726)
{
	int val[12]; // size=48, offset=0
};

struct _quad // hashcode: 0x10B8590E (dec: 280516878)
{
	long val[2]; // size=8, offset=0
};

struct MonstList // hashcode: 0xC335B0B7 (dec: -1019891529)
{
	unsigned short NumOfMonsters; // size=0, offset=0
	unsigned short TexNum; // size=0, offset=2
	unsigned char *TheList; // size=0, offset=4
	char *ListName; // size=0, offset=8
	unsigned long QuestBits; // size=0, offset=12
};

struct MonstLevel // hashcode: 0x71BEEF24 (dec: 1908338468)
{
	int NumOfLists; // size=0, offset=0
	struct MonstList *TheLists; // size=16, offset=4
};

struct ToT // hashcode: 0x23A4FA8D (dec: 598014605)
{
	unsigned long *head; // size=0, offset=0
	long size; // size=0, offset=4
};

struct TCBH // hashcode: 0x3B059B7E (dec: 990223230)
{
	struct TCB *entry; // size=0, offset=0
	long flag; // size=0, offset=4
};

struct TCB // hashcode: 0xFF3B7CCF (dec: -12878641)
{
	long status; // size=0, offset=0
	long mode; // size=0, offset=4
	unsigned long reg[40]; // size=160, offset=8
	long system[6]; // size=24, offset=168
};

struct EvCB // hashcode: 0x78AA5219 (dec: 2024428057)
{
	unsigned long desc; // size=0, offset=0
	long status; // size=0, offset=4
	long spec; // size=0, offset=8
	long mode; // size=0, offset=12
	long (*FHandler)(); // size=0, offset=16
	long system[2]; // size=8, offset=20
};

struct EXEC // hashcode: 0x889AFD77 (dec: -2003108489)
{
	unsigned long pc0; // size=0, offset=0
	unsigned long gp0; // size=0, offset=4
	unsigned long t_addr; // size=0, offset=8
	unsigned long t_size; // size=0, offset=12
	unsigned long d_addr; // size=0, offset=16
	unsigned long d_size; // size=0, offset=20
	unsigned long b_addr; // size=0, offset=24
	unsigned long b_size; // size=0, offset=28
	unsigned long s_addr; // size=0, offset=32
	unsigned long s_size; // size=0, offset=36
	unsigned long sp; // size=0, offset=40
	unsigned long fp; // size=0, offset=44
	unsigned long gp; // size=0, offset=48
	unsigned long ret; // size=0, offset=52
	unsigned long base; // size=0, offset=56
};

struct XF_HDR // hashcode: 0xE61C9F7D (dec: -434331779)
{
	char key[8]; // size=8, offset=0
	unsigned long text; // size=0, offset=8
	unsigned long data; // size=0, offset=12
	struct EXEC exec; // size=60, offset=16
	char title[60]; // size=60, offset=76
};

struct DIRENTRY // hashcode: 0x16036308 (dec: 369320712)
{
	char name[20]; // size=20, offset=0
	long attr; // size=0, offset=20
	long size; // size=0, offset=24
	struct DIRENTRY *next; // size=40, offset=28
	long head; // size=0, offset=32
	char system[4]; // size=4, offset=36
};

struct MATRIX // hashcode: 0x7CD50D5E (dec: 2094337374)
{
	short m[3][3]; // size=18, offset=0
	long t[3]; // size=12, offset=20
};

struct VECTOR // hashcode: 0xD868289D (dec: -664262499)
{
	long vx; // size=0, offset=0
	long vy; // size=0, offset=4
	long vz; // size=0, offset=8
	long pad; // size=0, offset=12
};

struct SVECTOR // hashcode: 0x855F37AD (dec: -2057357395)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
	short vz; // size=0, offset=4
	short pad; // size=0, offset=6
};

struct CVECTOR // hashcode: 0xFB62BF9F (dec: -77414497)
{
	unsigned char r; // size=0, offset=0
	unsigned char g; // size=0, offset=1
	unsigned char b; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
};

struct DVECTOR // hashcode: 0xC74AE6FB (dec: -951392517)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
};

struct EVECTOR // hashcode: 0x2CF4696F (dec: 754215279)
{
	struct SVECTOR v; // size=8, offset=0
	struct VECTOR sxyz; // size=16, offset=8
	struct DVECTOR sxy; // size=4, offset=24
	struct CVECTOR rgb; // size=4, offset=28
	short txuv; // size=0, offset=32
	short pad; // size=0, offset=34
	long chx; // size=0, offset=36
	long chy; // size=0, offset=40
};

struct RVECTOR // hashcode: 0xC9456BA2 (dec: -918197342)
{
	struct SVECTOR v; // size=8, offset=0
	unsigned char uv[2]; // size=2, offset=8
	unsigned short pad; // size=0, offset=10
	struct CVECTOR c; // size=4, offset=12
	struct DVECTOR sxy; // size=4, offset=16
	unsigned long sz; // size=0, offset=20
};

struct CRVECTOR3 // hashcode: 0xF28DC8A3 (dec: -225589085)
{
	struct RVECTOR r01; // size=24, offset=0
	struct RVECTOR r12; // size=24, offset=24
	struct RVECTOR r20; // size=24, offset=48
	struct RVECTOR *r0; // size=24, offset=72
	struct RVECTOR *r1; // size=24, offset=76
	struct RVECTOR *r2; // size=24, offset=80
	unsigned long *rtn; // size=0, offset=84
};

struct DIVPOLYGON3 // hashcode: 0x3D343F99 (dec: 1026834329)
{
	unsigned long ndiv; // size=0, offset=0
	unsigned long pih; // size=0, offset=4
	unsigned long piv; // size=0, offset=8
	unsigned short clut; // size=0, offset=12
	unsigned short tpage; // size=0, offset=14
	struct CVECTOR rgbc; // size=4, offset=16
	unsigned long *ot; // size=0, offset=20
	struct RVECTOR r0; // size=24, offset=24
	struct RVECTOR r1; // size=24, offset=48
	struct RVECTOR r2; // size=24, offset=72
	struct CRVECTOR3 cr[5]; // size=440, offset=96
};

struct CRVECTOR4 // hashcode: 0x659D3ED0 (dec: 1704804048)
{
	struct RVECTOR r01; // size=24, offset=0
	struct RVECTOR r02; // size=24, offset=24
	struct RVECTOR r31; // size=24, offset=48
	struct RVECTOR r32; // size=24, offset=72
	struct RVECTOR rc; // size=24, offset=96
	struct RVECTOR *r0; // size=24, offset=120
	struct RVECTOR *r1; // size=24, offset=124
	struct RVECTOR *r2; // size=24, offset=128
	struct RVECTOR *r3; // size=24, offset=132
	unsigned long *rtn; // size=0, offset=136
};

struct DIVPOLYGON4 // hashcode: 0x640EF9E0 (dec: 1678703072)
{
	unsigned long ndiv; // size=0, offset=0
	unsigned long pih; // size=0, offset=4
	unsigned long piv; // size=0, offset=8
	unsigned short clut; // size=0, offset=12
	unsigned short tpage; // size=0, offset=14
	struct CVECTOR rgbc; // size=4, offset=16
	unsigned long *ot; // size=0, offset=20
	struct RVECTOR r0; // size=24, offset=24
	struct RVECTOR r1; // size=24, offset=48
	struct RVECTOR r2; // size=24, offset=72
	struct RVECTOR r3; // size=24, offset=96
	struct CRVECTOR4 cr[5]; // size=700, offset=120
};

struct SPOL // hashcode: 0x418AE32A (dec: 1099621162)
{
	short xy[3]; // size=6, offset=0
	short uv[2]; // size=4, offset=6
	short rgb[3]; // size=6, offset=10
};

struct POL4 // hashcode: 0xEAC031FA (dec: -356503046)
{
	short sxy[4][2]; // size=16, offset=0
	short sz[4][2]; // size=16, offset=16
	short uv[4][2]; // size=16, offset=32
	short rgb[4][3]; // size=24, offset=48
	short code; // size=0, offset=72
};

struct POL3 // hashcode: 0x5A4C4DEC (dec: 1514950124)
{
	short sxy[3][2]; // size=12, offset=0
	short sz[3][2]; // size=12, offset=12
	short uv[3][2]; // size=12, offset=24
	short rgb[3][3]; // size=18, offset=36
	short code; // size=0, offset=54
};

struct TMESH // hashcode: 0x4ED4C391 (dec: 1322566545)
{
	struct SVECTOR *v; // size=8, offset=0
	struct SVECTOR *n; // size=8, offset=4
	struct SVECTOR *u; // size=8, offset=8
	struct CVECTOR *c; // size=4, offset=12
	unsigned long len; // size=0, offset=16
};

struct QMESH // hashcode: 0x86054219 (dec: -2046475751)
{
	struct SVECTOR *v; // size=8, offset=0
	struct SVECTOR *n; // size=8, offset=4
	struct SVECTOR *u; // size=8, offset=8
	struct CVECTOR *c; // size=4, offset=12
	unsigned long lenv; // size=0, offset=16
	unsigned long lenh; // size=0, offset=20
};

struct RECT // hashcode: 0x96356B79 (dec: -1774883975)
{
	short x; // size=0, offset=0
	short y; // size=0, offset=2
	short w; // size=0, offset=4
	short h; // size=0, offset=6
};

struct RECT32 // hashcode: 0x66B7AFBC (dec: 1723314108)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int w; // size=0, offset=8
	int h; // size=0, offset=12
};

struct DR_ENV // hashcode: 0x8781F091 (dec: -2021527407)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[15]; // size=60, offset=4
};

struct DRAWENV // hashcode: 0xCC2EA12C (dec: -869359316)
{
	struct RECT clip; // size=8, offset=0
	short ofs[2]; // size=4, offset=8
	struct RECT tw; // size=8, offset=12
	unsigned short tpage; // size=0, offset=20
	unsigned char dtd; // size=0, offset=22
	unsigned char dfe; // size=0, offset=23
	unsigned char isbg; // size=0, offset=24
	unsigned char r0; // size=0, offset=25
	unsigned char g0; // size=0, offset=26
	unsigned char b0; // size=0, offset=27
	struct DR_ENV dr_env; // size=64, offset=28
};

struct DISPENV // hashcode: 0x5724C591 (dec: 1462027665)
{
	struct RECT disp; // size=8, offset=0
	struct RECT screen; // size=8, offset=8
	unsigned char isinter; // size=0, offset=16
	unsigned char isrgb24; // size=0, offset=17
	unsigned char pad0; // size=0, offset=18
	unsigned char pad1; // size=0, offset=19
};

struct P_TAG // hashcode: 0x0C104441 (dec: 202392641)
{
	unsigned int addr; // size=24, offset=0
	unsigned int len; // size=8, offset=24
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
};

struct P_CODE // hashcode: 0x3B06C2E1 (dec: 990298849)
{
	unsigned char r0; // size=0, offset=0
	unsigned char g0; // size=0, offset=1
	unsigned char b0; // size=0, offset=2
	unsigned char code; // size=0, offset=3
};

struct POLY_F3 // hashcode: 0xE4D73FDB (dec: -455655461)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
};

struct POLY_F4 // hashcode: 0x5C302D27 (dec: 1546661159)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
	short x3; // size=0, offset=20
	short y3; // size=0, offset=22
};

struct POLY_FT3 // hashcode: 0x75749911 (dec: 1970575633)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char u1; // size=0, offset=20
	unsigned char v1; // size=0, offset=21
	unsigned short tpage; // size=0, offset=22
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char u2; // size=0, offset=28
	unsigned char v2; // size=0, offset=29
	unsigned short pad1; // size=0, offset=30
};

struct POLY_FT4 // hashcode: 0x7DFCFC1A (dec: 2113731610)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char u1; // size=0, offset=20
	unsigned char v1; // size=0, offset=21
	unsigned short tpage; // size=0, offset=22
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char u2; // size=0, offset=28
	unsigned char v2; // size=0, offset=29
	unsigned short pad1; // size=0, offset=30
	short x3; // size=0, offset=32
	short y3; // size=0, offset=34
	unsigned char u3; // size=0, offset=36
	unsigned char v3; // size=0, offset=37
	unsigned short pad2; // size=0, offset=38
};

struct POLY_G3 // hashcode: 0x624F50DA (dec: 1649365210)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char pad1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char pad2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
};

struct POLY_G4 // hashcode: 0xBE4FE1BD (dec: -1102061123)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char pad1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char pad2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char r3; // size=0, offset=28
	unsigned char g3; // size=0, offset=29
	unsigned char b3; // size=0, offset=30
	unsigned char pad3; // size=0, offset=31
	short x3; // size=0, offset=32
	short y3; // size=0, offset=34
};

struct POLY_GT3 // hashcode: 0x3E03F3ED (dec: 1040446445)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	unsigned char r1; // size=0, offset=16
	unsigned char g1; // size=0, offset=17
	unsigned char b1; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	short x1; // size=0, offset=20
	short y1; // size=0, offset=22
	unsigned char u1; // size=0, offset=24
	unsigned char v1; // size=0, offset=25
	unsigned short tpage; // size=0, offset=26
	unsigned char r2; // size=0, offset=28
	unsigned char g2; // size=0, offset=29
	unsigned char b2; // size=0, offset=30
	unsigned char p2; // size=0, offset=31
	short x2; // size=0, offset=32
	short y2; // size=0, offset=34
	unsigned char u2; // size=0, offset=36
	unsigned char v2; // size=0, offset=37
	unsigned short pad2; // size=0, offset=38
};

struct POLY_GT4 // hashcode: 0x26667EA8 (dec: 644251304)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	unsigned char r1; // size=0, offset=16
	unsigned char g1; // size=0, offset=17
	unsigned char b1; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	short x1; // size=0, offset=20
	short y1; // size=0, offset=22
	unsigned char u1; // size=0, offset=24
	unsigned char v1; // size=0, offset=25
	unsigned short tpage; // size=0, offset=26
	unsigned char r2; // size=0, offset=28
	unsigned char g2; // size=0, offset=29
	unsigned char b2; // size=0, offset=30
	unsigned char p2; // size=0, offset=31
	short x2; // size=0, offset=32
	short y2; // size=0, offset=34
	unsigned char u2; // size=0, offset=36
	unsigned char v2; // size=0, offset=37
	unsigned short pad2; // size=0, offset=38
	unsigned char r3; // size=0, offset=40
	unsigned char g3; // size=0, offset=41
	unsigned char b3; // size=0, offset=42
	unsigned char p3; // size=0, offset=43
	short x3; // size=0, offset=44
	short y3; // size=0, offset=46
	unsigned char u3; // size=0, offset=48
	unsigned char v3; // size=0, offset=49
	unsigned short pad3; // size=0, offset=50
};

struct LINE_F2 // hashcode: 0x42F8284D (dec: 1123559501)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
};

struct LINE_G2 // hashcode: 0x0AE659E2 (dec: 182868450)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char p1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
};

struct LINE_F3 // hashcode: 0xA15D8085 (dec: -1587707771)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
	unsigned long pad; // size=0, offset=20
};

struct LINE_G3 // hashcode: 0xF55697E5 (dec: -178874395)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char p1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned long pad; // size=0, offset=28
};

struct LINE_F4 // hashcode: 0xFCE625F0 (dec: -52025872)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short x1; // size=0, offset=12
	short y1; // size=0, offset=14
	short x2; // size=0, offset=16
	short y2; // size=0, offset=18
	short x3; // size=0, offset=20
	short y3; // size=0, offset=22
	unsigned long pad; // size=0, offset=24
};

struct LINE_G4 // hashcode: 0x26668F9B (dec: 644255643)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char r1; // size=0, offset=12
	unsigned char g1; // size=0, offset=13
	unsigned char b1; // size=0, offset=14
	unsigned char p1; // size=0, offset=15
	short x1; // size=0, offset=16
	short y1; // size=0, offset=18
	unsigned char r2; // size=0, offset=20
	unsigned char g2; // size=0, offset=21
	unsigned char b2; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	short x2; // size=0, offset=24
	short y2; // size=0, offset=26
	unsigned char r3; // size=0, offset=28
	unsigned char g3; // size=0, offset=29
	unsigned char b3; // size=0, offset=30
	unsigned char p3; // size=0, offset=31
	short x3; // size=0, offset=32
	short y3; // size=0, offset=34
	unsigned long pad; // size=0, offset=36
};

struct SPRT // hashcode: 0x9980C842 (dec: -1719613374)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
	short w; // size=0, offset=16
	short h; // size=0, offset=18
};

struct SPRT_16 // hashcode: 0x688EF174 (dec: 1754198388)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	unsigned char u0; // size=0, offset=12
	unsigned char v0; // size=0, offset=13
	unsigned short clut; // size=0, offset=14
};

struct TILE // hashcode: 0xF4B442E8 (dec: -189512984)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
	short w; // size=0, offset=12
	short h; // size=0, offset=14
};

struct TILE_16 // hashcode: 0x150E93F0 (dec: 353276912)
{
	unsigned long tag; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	short x0; // size=0, offset=8
	short y0; // size=0, offset=10
};

struct DR_MODE // hashcode: 0xDD3AD3C4 (dec: -583347260)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[2]; // size=8, offset=4
};

struct DR_MOVE // hashcode: 0x89F4C0DF (dec: -1980448545)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[5]; // size=20, offset=4
};

struct DR_LOAD // hashcode: 0x6462EFE1 (dec: 1684205537)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[3]; // size=12, offset=4
	unsigned long p[13]; // size=52, offset=16
};

struct DR_TPAGE // hashcode: 0xB77E52DD (dec: -1216458019)
{
	unsigned long tag; // size=0, offset=0
	unsigned long code[1]; // size=4, offset=4
};

struct TMD_PRIM // hashcode: 0x2B468274 (dec: 726041204)
{
	unsigned long id; // size=0, offset=0
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char p0; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char p1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char p2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char p3; // size=0, offset=19
	unsigned short tpage; // size=0, offset=20
	unsigned short clut; // size=0, offset=22
	unsigned char u0; // size=0, offset=24
	unsigned char v0; // size=0, offset=25
	unsigned char u1; // size=0, offset=26
	unsigned char v1; // size=0, offset=27
	unsigned char u2; // size=0, offset=28
	unsigned char v2; // size=0, offset=29
	unsigned char u3; // size=0, offset=30
	unsigned char v3; // size=0, offset=31
	struct SVECTOR x0; // size=8, offset=32
	struct SVECTOR x1; // size=8, offset=40
	struct SVECTOR x2; // size=8, offset=48
	struct SVECTOR x3; // size=8, offset=56
	struct SVECTOR n0; // size=8, offset=64
	struct SVECTOR n1; // size=8, offset=72
	struct SVECTOR n2; // size=8, offset=80
	struct SVECTOR n3; // size=8, offset=88
	struct SVECTOR *v_ofs; // size=8, offset=96
	struct SVECTOR *n_ofs; // size=8, offset=100
	unsigned short vert0; // size=0, offset=104
	unsigned short vert1; // size=0, offset=106
	unsigned short vert2; // size=0, offset=108
	unsigned short vert3; // size=0, offset=110
	unsigned short norm0; // size=0, offset=112
	unsigned short norm1; // size=0, offset=114
	unsigned short norm2; // size=0, offset=116
	unsigned short norm3; // size=0, offset=118
};

struct TIM_IMAGE // hashcode: 0x16210A5C (dec: 371264092)
{
	unsigned long mode; // size=0, offset=0
	struct RECT *crect; // size=8, offset=4
	unsigned long *caddr; // size=0, offset=8
	struct RECT *prect; // size=8, offset=12
	unsigned long *paddr; // size=0, offset=16
};

struct POINT // hashcode: 0x90A8DB05 (dec: -1867982075)
{
	long x; // size=0, offset=0
	long y; // size=0, offset=4
};

struct MSG // hashcode: 0x0D6A3500 (dec: 225064192)
{
	unsigned long hwnd; // size=0, offset=0
	unsigned int message; // size=0, offset=4
	long wParam; // size=0, offset=8
	unsigned long lParam; // size=0, offset=12
	unsigned long time; // size=0, offset=16
	struct POINT pt; // size=8, offset=20
};

struct FILETIME // hashcode: 0x05E66504 (dec: 98985220)
{
	unsigned long dwLowDateTime; // size=0, offset=0
	unsigned long dwHighDateTime; // size=0, offset=4
};

struct _WIN32_FIND_DATA // hashcode: 0xAFE97EF6 (dec: -1343652106)
{
	unsigned long dwFileAttributes; // size=0, offset=0
	struct FILETIME ftCreationTime; // size=8, offset=4
	struct FILETIME ftLastAccessTime; // size=8, offset=12
	struct FILETIME ftLastWriteTime; // size=8, offset=20
	unsigned long nFileSizeHigh; // size=0, offset=28
	unsigned long nFileSizeLow; // size=0, offset=32
	unsigned long dwReserved0; // size=0, offset=36
	unsigned long dwReserved1; // size=0, offset=40
	char cFileName[256]; // size=256, offset=44
	char cAlternateFileName[14]; // size=14, offset=300
};

struct PALETTEENTRY // hashcode: 0x8809E161 (dec: -2012618399)
{
	unsigned char peRed; // size=0, offset=0
	unsigned char peGreen; // size=0, offset=1
	unsigned char peBlue; // size=0, offset=2
	unsigned char peFlags; // size=0, offset=3
};

struct PAINTSTRUCT // hashcode: 0x718B7AE7 (dec: 1904966375)
{
	unsigned long hdc; // size=0, offset=0
	unsigned char fErase; // size=0, offset=4
	struct RECT rcPaint; // size=8, offset=6
	unsigned char fRestore; // size=0, offset=14
	unsigned char fIncUpdate; // size=0, offset=15
	unsigned char rgbReserved[16]; // size=16, offset=16
};

struct LARGE_INTEGER // hashcode: 0xAF525143 (dec: -1353559741)
{
	unsigned long LowPart; // size=0, offset=0
	unsigned long HighPart; // size=0, offset=4
};

struct GUID // hashcode: 0x71223D1D (dec: 1898069277)
{
	unsigned long Data1; // size=0, offset=0
	unsigned short Data2; // size=0, offset=4
	unsigned short Data3; // size=0, offset=6
	unsigned char Data4[8]; // size=8, offset=8
};

struct WAVEFORMATEX // hashcode: 0x2FF94D40 (dec: 804867392)
{
	unsigned short wFormatTag; // size=0, offset=0
	unsigned short nChannels; // size=0, offset=2
	unsigned long nSamplesPerSec; // size=0, offset=4
	unsigned long nAvgBytesPerSec; // size=0, offset=8
	unsigned short nBlockAlign; // size=0, offset=12
	unsigned short wBitsPerSample; // size=0, offset=14
	unsigned short cbSize; // size=0, offset=16
};

struct MMCKINFO // hashcode: 0x7412C9F6 (dec: 1947388406)
{
	unsigned long ckid; // size=0, offset=0
	unsigned long cksize; // size=0, offset=4
	unsigned long fccType; // size=0, offset=8
	unsigned long dwDataOffset; // size=0, offset=12
	unsigned long dwFlags; // size=0, offset=16
};

struct WAVEFORMAT // hashcode: 0x97326750 (dec: -1758304432)
{
	unsigned short wFormatTag; // size=0, offset=0
	unsigned short nChannels; // size=0, offset=2
	unsigned long nSamplesPerSec; // size=0, offset=4
	unsigned long nAvgBytesPerSec; // size=0, offset=8
	unsigned short nBlockAlign; // size=0, offset=12
};

struct PCMWAVEFORMAT // hashcode: 0xA9DF6896 (dec: -1444976490)
{
	struct WAVEFORMAT wf; // size=16, offset=0
	unsigned short wBitsPerSample; // size=0, offset=16
};

struct VS_FIXEDFILEINFO // hashcode: 0x933887F8 (dec: -1825011720)
{
	unsigned long dwSignature; // size=0, offset=0
	unsigned long dwStrucVersion; // size=0, offset=4
	unsigned long dwFileVersionMS; // size=0, offset=8
	unsigned long dwFileVersionLS; // size=0, offset=12
	unsigned long dwProductVersionMS; // size=0, offset=16
	unsigned long dwProductVersionLS; // size=0, offset=20
	unsigned long dwFileFlagsMask; // size=0, offset=24
	unsigned long dwFileFlags; // size=0, offset=28
	unsigned long dwFileOS; // size=0, offset=32
	unsigned long dwFileType; // size=0, offset=36
	unsigned long dwFileSubtype; // size=0, offset=40
	unsigned long dwFileDateMS; // size=0, offset=44
	unsigned long dwFileDateLS; // size=0, offset=48
};

struct WNDCLASSEX // hashcode: 0x20AC52BF (dec: 548164287)
{
	unsigned int cbSize; // size=0, offset=0
	unsigned int style; // size=0, offset=4
	unsigned long (*lpfnWndProc)(); // size=0, offset=8
	int cbClsExtra; // size=0, offset=12
	int cbWndExtra; // size=0, offset=16
	unsigned long hInstance; // size=0, offset=20
	unsigned long hIcon; // size=0, offset=24
	unsigned long hCursor; // size=0, offset=28
	unsigned long hbrBackground; // size=0, offset=32
	char *lpszMenuName; // size=0, offset=36
	char *lpszClassName; // size=0, offset=40
	unsigned long hIconSm; // size=0, offset=44
};

struct SHITEMID // hashcode: 0x631FD054 (dec: 1663029332)
{
	unsigned short cb; // size=0, offset=0
	unsigned char abID[1]; // size=1, offset=2
};

struct _ITEMIDLIST // hashcode: 0x3A074366 (dec: 973554534)
{
	struct SHITEMID mkid; // size=4, offset=0
};

struct _HSTRANS // hashcode: 0xD76D8BA5 (dec: -680686683)
{
	int unused; // size=0, offset=0
};

struct SIZE // hashcode: 0x7027C6D2 (dec: 1881654994)
{
	int cx; // size=0, offset=0
	int cy; // size=0, offset=4
};

struct TBMP // hashcode: 0x2F5EE3EF (dec: 794747887)
{
	unsigned char *data; // size=0, offset=0
	struct SIZE datasize; // size=8, offset=4
	long userdata; // size=0, offset=12
	char text[256]; // size=256, offset=16
};

struct UIRECT // hashcode: 0x11CC833A (dec: 298615610)
{
	long left; // size=0, offset=0
	long top; // size=0, offset=4
	long right; // size=0, offset=8
	long bottom; // size=0, offset=12
};

struct MSFX // hashcode: 0x49D95817 (dec: 1238980631)
{
	unsigned short pszName; // size=0, offset=0
};

struct CKINFO // hashcode: 0x6FE0A107 (dec: 1876992263)
{
	unsigned long dwSize; // size=0, offset=0
	unsigned long dwOffset; // size=0, offset=4
};

struct TSnd // hashcode: 0x1CBFF2FA (dec: 482341626)
{
};

struct TSFX // hashcode: 0x6A7B261C (dec: 1786455580)
{
	unsigned char bFlags; // size=0, offset=0
	unsigned short pszName; // size=0, offset=2
};

struct AnimStruct // hashcode: 0xEDC62515 (dec: -305781483)
{
	char Frames; // size=0, offset=0
	char Rate; // size=0, offset=1
};

struct MonsterData // hashcode: 0xE5217A42 (dec: -450790846)
{
	unsigned short GraphicType; // size=0, offset=0
	unsigned char has_special; // size=0, offset=2
	unsigned short sndfile; // size=0, offset=4
	unsigned char snd_special; // size=0, offset=6
	char TransFile; // size=0, offset=7
	char Frames[6]; // size=6, offset=8
	char Rate[6]; // size=6, offset=14
	int mName; // size=0, offset=20
	char mMinDLvl; // size=0, offset=24
	char mMaxDLvl; // size=0, offset=25
	char mLevel; // size=0, offset=26
	short mMinHP; // size=0, offset=28
	short mMaxHP; // size=0, offset=30
	unsigned char mAi; // size=0, offset=32
	unsigned short mFlags; // size=0, offset=34
	unsigned char mInt; // size=0, offset=36
	unsigned char mHit; // size=0, offset=37
	unsigned char mAFNum; // size=0, offset=38
	unsigned char mMinDamage; // size=0, offset=39
	unsigned char mMaxDamage; // size=0, offset=40
	unsigned char mHit2; // size=0, offset=41
	unsigned char mAFNum2; // size=0, offset=42
	unsigned char mMinDamage2; // size=0, offset=43
	unsigned char mMaxDamage2; // size=0, offset=44
	char mArmorClass; // size=0, offset=45
	char mMonstClass; // size=0, offset=46
	unsigned short mMagicRes; // size=0, offset=48
	unsigned short mMagicRes2; // size=0, offset=50
	unsigned short mTreasure; // size=0, offset=52
	char mSelFlag; // size=0, offset=54
	unsigned short mExp; // size=0, offset=56
};

struct CMonster // hashcode: 0xBF9B34C4 (dec: -1080347452)
{
	struct MonsterData *MData; // size=60, offset=0
	struct AnimStruct Anims[6]; // size=12, offset=4
	unsigned short Snds; // size=0, offset=16
	unsigned char mtype; // size=0, offset=18
	unsigned char mPlaceFlags; // size=0, offset=19
	unsigned char mMinHP; // size=0, offset=20
	unsigned char mMaxHP; // size=0, offset=21
	unsigned char has_special; // size=0, offset=22
	unsigned char mAFNum; // size=0, offset=23
	char mdeadval; // size=0, offset=24
};

struct MonsterStruct // hashcode: 0x1B974D9B (dec: 462900635)
{
	int mtalkmsg; // size=0, offset=0
	int _mRndSeed; // size=0, offset=4
	int _mAISeed; // size=0, offset=8
	int _mgoalvar1; // size=0, offset=12
	int _mgoalvar2; // size=0, offset=16
	int _mgoalvar3; // size=0, offset=20
	short _mVar1; // size=0, offset=24
	short _mVar2; // size=0, offset=26
	short _mVar3; // size=0, offset=28
	short _mVar4; // size=0, offset=30
	short _mVar5; // size=0, offset=32
	short _mVar6; // size=0, offset=34
	short _mVar7; // size=0, offset=36
	short _mVar8; // size=0, offset=38
	short _mmaxhp; // size=0, offset=40
	short _mhitpoints; // size=0, offset=42
	short _mxvel; // size=0, offset=44
	short _myvel; // size=0, offset=46
	unsigned short _mFlags; // size=0, offset=48
	unsigned short mExp; // size=0, offset=50
	unsigned short mMagicRes; // size=0, offset=52
	char _mMTidx; // size=0, offset=54
	char _mmode; // size=0, offset=55
	char _mx; // size=0, offset=56
	char _my; // size=0, offset=57
	char _mfutx; // size=0, offset=58
	char _mfuty; // size=0, offset=59
	char _moldx; // size=0, offset=60
	char _moldy; // size=0, offset=61
	char _mxoff; // size=0, offset=62
	char _myoff; // size=0, offset=63
	char _mdir; // size=0, offset=64
	char _menemy; // size=0, offset=65
	char _mAnimDelay; // size=0, offset=66
	char _mAnimCnt; // size=0, offset=67
	char _mAnimLen; // size=0, offset=68
	char _mAnimFrame; // size=0, offset=69
	char _mAFNum; // size=0, offset=70
	char _lastx; // size=0, offset=71
	char _lasty; // size=0, offset=72
	char _udeadval; // size=0, offset=73
	char mWhoHit; // size=0, offset=74
	char mLevel; // size=0, offset=75
	char mArmorClass; // size=0, offset=76
	unsigned char _mgoal; // size=0, offset=77
	unsigned char _pathcount; // size=0, offset=78
	unsigned char _menemyx; // size=0, offset=79
	unsigned char _menemyy; // size=0, offset=80
	unsigned char _meflag; // size=0, offset=81
	unsigned char _mAi; // size=0, offset=82
	unsigned char _mint; // size=0, offset=83
	unsigned char _msquelch; // size=0, offset=84
	unsigned char _uniqtype; // size=0, offset=85
	unsigned char _uniqtrans; // size=0, offset=86
	unsigned char mHit; // size=0, offset=87
	unsigned char mMinDamage; // size=0, offset=88
	unsigned char mMaxDamage; // size=0, offset=89
	unsigned char mHit2; // size=0, offset=90
	unsigned char mMinDamage2; // size=0, offset=91
	unsigned char mMaxDamage2; // size=0, offset=92
	unsigned char leader; // size=0, offset=93
	unsigned char leaderflag; // size=0, offset=94
	unsigned char packsize; // size=0, offset=95
	unsigned char mlid; // size=0, offset=96
	char Action; // size=0, offset=97
	char _Wandering; // size=0, offset=98
	char _mDelFlag; // size=0, offset=99
	int mName; // size=0, offset=100
	struct CMonster *MType; // size=28, offset=104
	struct MonsterData *MData; // size=60, offset=108
};

struct UniqMonstStruct // hashcode: 0x442076FE (dec: 1142978302)
{
	char mtype; // size=0, offset=0
	unsigned short mName; // size=0, offset=2
	unsigned char mlevel; // size=0, offset=4
	unsigned short mmaxhp; // size=0, offset=6
	unsigned char mAi; // size=0, offset=8
	unsigned char mint; // size=0, offset=9
	unsigned char mMinDamage; // size=0, offset=10
	unsigned char mMaxDamage; // size=0, offset=11
	unsigned short mMagicRes; // size=0, offset=12
	unsigned short mUnqAttr; // size=0, offset=14
	unsigned char mUnqVar1; // size=0, offset=16
	unsigned char mUnqVar2; // size=0, offset=17
	int mtalkmsg; // size=0, offset=20
};

struct STONEPAL // hashcode: 0x90B404DF (dec: -1867250465)
{
	unsigned char NoStonePals; // size=0, offset=0
	int StonePal; // size=0, offset=4
};

struct DEF_ARGS // hashcode: 0x9222E4C3 (dec: -1843206973)
{
	unsigned long a0; // size=0, offset=0
	unsigned long a1; // size=0, offset=4
	unsigned long a2; // size=0, offset=8
	unsigned long a3; // size=0, offset=12
};

struct MEM_INIT_INFO // hashcode: 0xE42487C7 (dec: -467367993)
{
	void *Mem; // size=0, offset=0
	unsigned long Size; // size=0, offset=4
	unsigned long Type; // size=0, offset=8
	char *TypeString; // size=0, offset=12
	unsigned short Alignment; // size=0, offset=16
	void (*MemMove)(); // size=0, offset=20
	struct MEM_INIT_INFO *NextInitBlock; // size=40, offset=24
	unsigned short Flags; // size=0, offset=28
	struct MEM_HDR *Empty; // size=0, offset=32
	struct MEM_HDR *Used; // size=0, offset=36
};

struct GAL_STRUCT // hashcode: 0xD1F86F3F (dec: -772247745)
{
	int OriginalSize; // size=0, offset=0
	unsigned int Offset; // size=0, offset=4
};

struct TASK // hashcode: 0xE98A0E26 (dec: -376828378)
{
	struct TASK *Next; // size=92, offset=0
	struct TASK *Prev; // size=92, offset=4
	unsigned long Id; // size=0, offset=8
	unsigned long SleepTime; // size=0, offset=12
	unsigned long fToInit; // size=1, offset=128
	unsigned long fToDie; // size=1, offset=129
	unsigned long fKillable; // size=1, offset=130
	unsigned long fActive; // size=1, offset=131
	unsigned long fXtraStack; // size=1, offset=132
	void *Stack; // size=0, offset=20
	unsigned long StackSize; // size=0, offset=24
	void *Data; // size=0, offset=28
	int TskEnv[12]; // size=48, offset=32
	void (*Main)(); // size=0, offset=80
	long hndTask; // size=0, offset=84
	unsigned short XtraLongs; // size=0, offset=88
	unsigned short MaxStackSizeBytes; // size=0, offset=90
};

struct FRAME_HDR // hashcode: 0x55BE8C6F (dec: 1438551151)
{
	unsigned int FrOffset; // size=32, offset=0
	int X; // size=8, offset=32
	int Y; // size=8, offset=40
	unsigned int W; // size=9, offset=48
	unsigned int PalNum; // size=7, offset=57
	unsigned int H; // size=9, offset=64
	unsigned int Rotated; // size=1, offset=73
	unsigned int BitsPerPixel; // size=2, offset=74
	unsigned int InVRAM; // size=1, offset=76
	unsigned int CompType; // size=2, offset=77
	unsigned int NotTrans; // size=1, offset=79
};

struct SysObj // hashcode: 0x5D35DF03 (dec: 1563811587)
{
	long MemHnd; // size=0, offset=0
};

struct FileIO // hashcode: 0x1058548E (dec: 274224270)
{
	struct SysObj SysObj; // size=4, offset=0
	unsigned long MemId; // size=0, offset=4
	long hndPath; // size=0, offset=8
	char *SearchPath; // size=0, offset=12
	struct __vtbl_ptr_type (*_vf)[7]; // size=4, offset=16
};

struct CPart // hashcode: 0x586B5D96 (dec: 1483431318)
{
	unsigned long Piece; // size=0, offset=0
	short X; // size=0, offset=4
	short Y; // size=0, offset=6
};

struct CBlock // hashcode: 0x3366D601 (dec: 862377473)
{
	unsigned long NumOfParts; // size=0, offset=0
	struct CPart Parts[1]; // size=8, offset=4
};

struct CBlockHdr // hashcode: 0x1FB6FB8F (dec: 532085647)
{
	unsigned long NumOfBlocks; // size=0, offset=0
	struct CBlock Blocks[1]; // size=12, offset=4
};

struct PAL // hashcode: 0x263ABAFE (dec: 641383166)
{
	unsigned int InVram; // size=1, offset=0
	unsigned int NumOfCols; // size=31, offset=1
	unsigned short Cols[1]; // size=2, offset=4
};

struct PAL_INVRAM // hashcode: 0x1002C83B (dec: 268617787)
{
	unsigned int InVram; // size=1, offset=0
	unsigned int Pad; // size=15, offset=1
	unsigned int clut; // size=16, offset=16
};

struct DECOMP_BUFFER // hashcode: 0xD028B0B6 (dec: -802639690)
{
	unsigned long TpX; // size=0, offset=0
	unsigned long TpY; // size=0, offset=4
};

struct ALL_DECOMP_BUFFERS // hashcode: 0x990C42D3 (dec: -1727249709)
{
	unsigned long NumOfBuffers; // size=0, offset=0
	struct DECOMP_BUFFER TheBuffers[1]; // size=8, offset=4
};

struct SPR_HDR // hashcode: 0xE5999750 (dec: -442919088)
{
	unsigned int DecompOffset; // size=32, offset=0
	unsigned int CreatureOffset; // size=32, offset=32
	unsigned int PalOffset; // size=32, offset=64
	unsigned int FrameOffset; // size=32, offset=96
	unsigned int BaseFrame; // size=32, offset=128
	unsigned int DestTPage; // size=32, offset=160
	unsigned int ComponentOffset; // size=32, offset=192
	unsigned int NumOfCreatures; // size=32, offset=224
	unsigned int NumOfFrames; // size=16, offset=256
	unsigned int NumOfPals; // size=16, offset=272
	unsigned int TWidth; // size=8, offset=288
	unsigned int THeight; // size=8, offset=296
	unsigned int IsTiles; // size=8, offset=304
	unsigned int Spare; // size=8, offset=312
};

struct TP_LOAD_HDR // hashcode: 0x8355A5C9 (dec: -2091538999)
{
	unsigned int U; // size=8, offset=0
	unsigned int V; // size=8, offset=8
	unsigned int tpage; // size=16, offset=16
};

struct CTextFileInfo // hashcode: 0xA019C1D3 (dec: -1608924717)
{
	char *FileName; // size=0, offset=0
};

struct CCreatureAction // hashcode: 0xAFEA63D4 (dec: -1343593516)
{
	unsigned short BaseFrame; // size=0, offset=0
	unsigned char NumOfFrames; // size=0, offset=2
	unsigned char NumOfPhysFrames; // size=0, offset=3
	unsigned char DirRemap[8]; // size=8, offset=4
	unsigned char AnimRemap[1]; // size=1, offset=12
};

struct CCreatureHdr // hashcode: 0x19E6A0DC (dec: 434544860)
{
	long NumOfActions; // size=0, offset=0
	struct CCreatureAction Cr; // size=14, offset=4
};

struct TextDat // hashcode: 0x762A392C (dec: 1982478636)
{
	int TexNum; // size=0, offset=0
	void * DatLoaded; // size=0, offset=4
	long hndDat; // size=0, offset=8
	long hndHdr; // size=0, offset=12
	long hndPalOffset; // size=0, offset=16
	long hndCreatureOffset; // size=0, offset=20
	long hndBlockOffsets; // size=0, offset=24
	struct FRAME_HDR *Frames; // size=12, offset=28
	struct SPR_HDR *Hdr; // size=40, offset=32
	void *Pals; // size=0, offset=36
	int *PalOffset; // size=0, offset=40
	int *BlockOffsets; // size=0, offset=44
	int *CreatureOffset; // size=0, offset=48
	unsigned char *CreatureAnims; // size=0, offset=52
	unsigned char *Blocks; // size=0, offset=56
	void * Loaded; // size=0, offset=60
	int LoadCount; // size=0, offset=64
	struct CTextFileInfo *FileInfo; // size=4, offset=68
	long hndDecompBuffer; // size=0, offset=72
	int DecX; // size=0, offset=76
	int DecY; // size=0, offset=80
	int PalX; // size=0, offset=84
	int PalY; // size=0, offset=88
	int Scr; // size=0, offset=92
	int NumOfBuffers[2]; // size=8, offset=96
	long hndDecompArrays; // size=0, offset=104
};

struct CScreen // hashcode: 0x12BC704B (dec: 314339403)
{
	struct TextDat TextDat; // size=108, offset=0
	int LoadedId; // size=0, offset=108
	int TpX; // size=0, offset=112
	int TpY; // size=0, offset=116
};

struct OBJ_TYPE_INFO // hashcode: 0x2B405FCA (dec: 725639114)
{
	void (*Constructor)(); // size=0, offset=0
	void (*Destructor)(); // size=0, offset=4
	void (*Printer)(); // size=0, offset=8
	int (*GetWidth)(); // size=0, offset=12
	int (*GetHeight)(); // size=0, offset=16
	int (*GetXOff)(); // size=0, offset=20
	int (*GetYOff)(); // size=0, offset=24
	int (*GetPal)(); // size=0, offset=28
};

struct OBJ_LIST // hashcode: 0x3175E93C (dec: 829811004)
{
	unsigned long PrintDepth; // size=0, offset=0
	unsigned char Visible; // size=0, offset=4
	unsigned char Killable; // size=0, offset=5
	char *ListName; // size=0, offset=8
	struct OBJ_LIST *Prev; // size=40, offset=12
	struct OBJ_LIST *Next; // size=40, offset=16
	long X; // size=0, offset=20
	long Y; // size=0, offset=24
	long Z; // size=0, offset=28
	struct OBJ_STRUCT *Head; // size=0, offset=32
	unsigned char (*SortCompare)(); // size=0, offset=36
};

struct OBJ_STRUCT // hashcode: 0xB1E527A2 (dec: -1310382174)
{
	struct OBJ_STRUCT *Next; // size=52, offset=0
	struct OBJ_STRUCT *Prev; // size=52, offset=4
	unsigned long ID; // size=0, offset=8
	long XPos; // size=0, offset=12
	long YPos; // size=0, offset=16
	long ZPos; // size=0, offset=20
	long XVel; // size=0, offset=24
	long YVel; // size=0, offset=28
	long ZVel; // size=0, offset=32
	struct OBJ_TYPE_INFO *OTI; // size=32, offset=36
	struct OBJ_LIST *OL; // size=40, offset=40
	void *Data; // size=0, offset=44
	long MemHandle; // size=0, offset=48
};

struct CPad // hashcode: 0xCDA8768A (dec: -844597622)
{
	unsigned char get_both; // size=0, offset=0
	unsigned char active; // size=0, offset=1
	unsigned char PadType; // size=0, offset=2
	unsigned char PADTICK; // size=0, offset=3
	unsigned short PADTICKMASK; // size=0, offset=4
	unsigned short PadNum; // size=0, offset=6
	unsigned short Cur; // size=0, offset=8
	unsigned short Up; // size=0, offset=10
	unsigned short Down; // size=0, offset=12
	unsigned short Tick; // size=0, offset=14
	unsigned short Old; // size=0, offset=16
	unsigned short both_Cur; // size=0, offset=18
	unsigned short both_Up; // size=0, offset=20
	unsigned short both_Down; // size=0, offset=22
	unsigned short both_Tick; // size=0, offset=24
	unsigned short both_Old; // size=0, offset=26
	void * TickDown[16]; // size=64, offset=28
	unsigned char TickCount[16]; // size=16, offset=92
};

struct CFont // hashcode: 0xA63DB2B5 (dec: -1505905995)
{
	int TextureId; // size=0, offset=0
	unsigned short FontTab[256]; // size=512, offset=4
	int PrintyOTpos; // size=0, offset=516
	int MinX; // size=0, offset=520
	int MaxX; // size=0, offset=524
	int Width; // size=0, offset=528
	struct TextDat *ThisDat; // size=108, offset=532
};

struct Dialog // hashcode: 0x26EB5ECF (dec: 652959439)
{
	int BevelGfx; // size=0, offset=0
	int BorderGfx; // size=0, offset=4
	int BackGfx; // size=0, offset=8
	int DialogOTpos; // size=0, offset=12
};

struct SCREEN_ENV // hashcode: 0xEC4F85CD (dec: -330332723)
{
	struct DRAWENV drawenv; // size=92, offset=0
	struct DISPENV dispenv; // size=20, offset=92
};

struct DB // hashcode: 0x44DD41AE (dec: 1155350958)
{
	struct DRAWENV draw; // size=92, offset=0
	struct DISPENV disp; // size=20, offset=92
};

struct ShadowStruct // hashcode: 0x2C752E18 (dec: 745877016)
{
	unsigned char strig; // size=0, offset=0
	unsigned char s1; // size=0, offset=1
	unsigned char s2; // size=0, offset=2
	unsigned char s3; // size=0, offset=3
	unsigned char nv1; // size=0, offset=4
	unsigned char nv2; // size=0, offset=5
	unsigned char nv3; // size=0, offset=6
};

struct ScrollStruct // hashcode: 0x5EF1DC1D (dec: 1592908829)
{
	int _sxoff; // size=0, offset=0
	int _syoff; // size=0, offset=4
	int _sdx; // size=0, offset=8
	int _sdy; // size=0, offset=12
	int _sdir; // size=0, offset=16
};

struct THEME_LOC // hashcode: 0x2BC3C751 (dec: 734250833)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int ttval; // size=0, offset=8
	int width; // size=0, offset=12
	int height; // size=0, offset=16
};

struct MINIXY // hashcode: 0x051F7743 (dec: 85948227)
{
	char stairsupx; // size=0, offset=0
	char stairsupy; // size=0, offset=1
	char stairsdownx; // size=0, offset=2
	char stairsdowny; // size=0, offset=3
	char townwarpx; // size=0, offset=4
	char townwarpy; // size=0, offset=5
	char pentax; // size=0, offset=6
	char pentay; // size=0, offset=7
	char pwaterx; // size=0, offset=8
	char pwatery; // size=0, offset=9
};

struct MICROS // hashcode: 0x0ED5339E (dec: 248853406)
{
	unsigned short mt[16]; // size=32, offset=0
};

struct map_info // hashcode: 0x2B7EE3B3 (dec: 729736115)
{
	char dObject; // size=0, offset=0
	char dItem; // size=0, offset=1
	char dMissile; // size=0, offset=2
	char dFlags; // size=0, offset=3
	char dDead; // size=0, offset=4
	char dTransVal; // size=0, offset=5
	short dPiece; // size=0, offset=6
	short dMonster; // size=0, offset=8
	char dPlayer; // size=0, offset=10
};

struct tab_entry // hashcode: 0x52E653E0 (dec: 1390826464)
{
	unsigned char a; // size=0, offset=0
	unsigned char b; // size=0, offset=1
};

struct PLStruct // hashcode: 0x79EC4DA8 (dec: 2045529512)
{
	int PLName; // size=0, offset=0
	int PLPower; // size=0, offset=4
	int PLParam1; // size=0, offset=8
	int PLParam2; // size=0, offset=12
	char PLMinLvl; // size=0, offset=16
	long PLIType; // size=0, offset=20
	unsigned char PLGOE; // size=0, offset=24
	unsigned char PLDouble; // size=0, offset=25
	unsigned char PLOk; // size=0, offset=26
	int PLMinVal; // size=0, offset=28
	int PLMaxVal; // size=0, offset=32
	int PLMultVal; // size=0, offset=36
};

struct UItemStruct // hashcode: 0x00446FAD (dec: 4485037)
{
	int UIName; // size=0, offset=0
	char UIItemId; // size=0, offset=4
	char UIMinLvl; // size=0, offset=5
	char UINumPL; // size=0, offset=6
	int UIValue; // size=0, offset=8
	char UIPower1; // size=0, offset=12
	int UIParam1; // size=0, offset=16
	int UIParam2; // size=0, offset=20
	char UIPower2; // size=0, offset=24
	int UIParam3; // size=0, offset=28
	int UIParam4; // size=0, offset=32
	char UIPower3; // size=0, offset=36
	int UIParam5; // size=0, offset=40
	int UIParam6; // size=0, offset=44
	char UIPower4; // size=0, offset=48
	int UIParam7; // size=0, offset=52
	int UIParam8; // size=0, offset=56
	char UIPower5; // size=0, offset=60
	int UIParam9; // size=0, offset=64
	int UIParam10; // size=0, offset=68
	char UIPower6; // size=0, offset=72
	int UIParam11; // size=0, offset=76
	int UIParam12; // size=0, offset=80
};

struct ItemDataStruct // hashcode: 0xE6D831BE (dec: -422039106)
{
	unsigned char iRnd; // size=0, offset=0
	char iClass; // size=0, offset=1
	char iLoc; // size=0, offset=2
	unsigned char iCurs; // size=0, offset=3
	char itype; // size=0, offset=4
	char iItemId; // size=0, offset=5
	unsigned short iName; // size=0, offset=6
	unsigned short iSName; // size=0, offset=8
	char iMinMLvl; // size=0, offset=10
	unsigned char iDurability; // size=0, offset=11
	unsigned char iMinDam; // size=0, offset=12
	unsigned char iMaxDam; // size=0, offset=13
	unsigned char iMinAC; // size=0, offset=14
	unsigned char iMaxAC; // size=0, offset=15
	char iMinStr; // size=0, offset=16
	char iMinMag; // size=0, offset=17
	char iMinDex; // size=0, offset=18
	long iFlags; // size=0, offset=20
	unsigned char iMiscId; // size=0, offset=24
	unsigned char iSpell; // size=0, offset=25
	unsigned char iUsable; // size=0, offset=26
	unsigned short iValue; // size=0, offset=28
	unsigned short iMaxValue; // size=0, offset=30
};

struct ItemGetRecordStruct // hashcode: 0x2F86A661 (dec: 797353569)
{
	int nSeed; // size=0, offset=0
	unsigned short wCI; // size=0, offset=4
	int nIndex; // size=0, offset=8
	unsigned long dwTimestamp; // size=0, offset=12
};

struct ItemStruct // hashcode: 0x8D3F3D14 (dec: -1925235436)
{
	int _iVAdd1; // size=0, offset=0
	int _iVMult1; // size=0, offset=4
	int _iVAdd2; // size=0, offset=8
	int _iVMult2; // size=0, offset=12
	int _iSeed; // size=0, offset=16
	int _ivalue; // size=0, offset=20
	int _iIvalue; // size=0, offset=24
	int _iMinDam; // size=0, offset=28
	int _iMaxDam; // size=0, offset=32
	int _iSpell; // size=0, offset=36
	int _iDurability; // size=0, offset=40
	int _iMaxDur; // size=0, offset=44
	int _iPLDam; // size=0, offset=48
	int _iPLToHit; // size=0, offset=52
	int _iPLDamMod; // size=0, offset=56
	int _iPLGetHit; // size=0, offset=60
	int _iPLLight; // size=0, offset=64
	int _iFMinDam; // size=0, offset=68
	int _iFMaxDam; // size=0, offset=72
	int _iLMinDam; // size=0, offset=76
	int _iLMaxDam; // size=0, offset=80
	short _iPLEnAc; // size=0, offset=84
	short _iCharges; // size=0, offset=86
	short _iAC; // size=0, offset=88
	short _itype; // size=0, offset=90
	short IDidx; // size=0, offset=92
	long _iFlags; // size=0, offset=96
	short _iPLMana; // size=0, offset=100
	short _iPLHP; // size=0, offset=102
	short _iUid; // size=0, offset=104
	short _iMaxCharges; // size=0, offset=106
	short _iCurs; // size=0, offset=108
	short _iMiscId; // size=0, offset=110
	unsigned short _iCreateInfo; // size=0, offset=112
	unsigned short _iName; // size=0, offset=114
	unsigned short _iIName; // size=0, offset=116
	unsigned short ItemFrame; // size=0, offset=118
	char _iAnimLen; // size=0, offset=120
	char _iAnimFrame; // size=0, offset=121
	char _iSelFlag; // size=0, offset=122
	char _iMagical; // size=0, offset=123
	char _ix; // size=0, offset=124
	char _iy; // size=0, offset=125
	char _iLoc; // size=0, offset=126
	char _iClass; // size=0, offset=127
	char _iPLAC; // size=0, offset=128
	char _iPLStr; // size=0, offset=129
	char _iPLMag; // size=0, offset=130
	char _iPLDex; // size=0, offset=131
	char _iPLVit; // size=0, offset=132
	char _iPLFR; // size=0, offset=133
	char _iPLLR; // size=0, offset=134
	char _iPLMR; // size=0, offset=135
	char _iSplLvlAdd; // size=0, offset=136
	char _iRequest; // size=0, offset=137
	char _iPrePower; // size=0, offset=138
	char _iSufPower; // size=0, offset=139
	char _iMinStr; // size=0, offset=140
	char _iMinDex; // size=0, offset=141
	char _oldlight; // size=0, offset=142
	char _isin; // size=0, offset=143
	unsigned char _iMinMag; // size=0, offset=144
	char _iInvalid; // size=0, offset=145
	char _iStatFlag; // size=0, offset=146
	char _iPostDraw; // size=0, offset=147
	char _iAnimFlag; // size=0, offset=148
	char _iIdentified; // size=0, offset=149
};

struct PlayerStruct // hashcode: 0xC2A0AB31 (dec: -1029657807)
{
	int _pmode; // size=0, offset=0
	char walkpath[25]; // size=25, offset=4
	unsigned char plractive; // size=0, offset=29
	char destAction; // size=0, offset=30
	char destParam1; // size=0, offset=31
	char destParam2; // size=0, offset=32
	char destParam3; // size=0, offset=33
	char destParam4; // size=0, offset=34
	int plrlevel; // size=0, offset=36
	int WorldX; // size=0, offset=40
	int WorldY; // size=0, offset=44
	short _px; // size=0, offset=48
	short _py; // size=0, offset=50
	short _pfutx; // size=0, offset=52
	short _pfuty; // size=0, offset=54
	short _ptargx; // size=0, offset=56
	short _ptargy; // size=0, offset=58
	short _pownerx; // size=0, offset=60
	short _pownery; // size=0, offset=62
	short _poldx; // size=0, offset=64
	short _poldy; // size=0, offset=66
	char _pxoff; // size=0, offset=68
	char _pyoff; // size=0, offset=69
	short _pxvel; // size=0, offset=70
	short _pyvel; // size=0, offset=72
	char _pdir; // size=0, offset=74
	char _nextdir; // size=0, offset=75
	char _pgfxnum; // size=0, offset=76
	unsigned char *_pAnimData; // size=0, offset=80
	int _pAnimDelay; // size=0, offset=84
	int _pAnimCnt; // size=0, offset=88
	int _pAnimLen; // size=0, offset=92
	int _pAnimFrame; // size=0, offset=96
	char _pAnimWidth; // size=0, offset=100
	char _pAnimWidth2; // size=0, offset=101
	char _peflag; // size=0, offset=102
	char _plid; // size=0, offset=103
	char _pvid; // size=0, offset=104
	char _pSpell; // size=0, offset=105
	char _pSplType; // size=0, offset=106
	char _pSplFrom; // size=0, offset=107
	char _pTSpell; // size=0, offset=108
	char _pTSplType; // size=0, offset=109
	int _pRSpell; // size=0, offset=112
	char _pRSplType; // size=0, offset=116
	int _pSBkSpell; // size=0, offset=120
	char _pSBkSplType; // size=0, offset=124
	char _pSplLvl[64]; // size=64, offset=125
	qword _pMemSpells; // size=0, offset=192
	qword _pAblSpells; // size=0, offset=200
	qword _pScrlSpells; // size=0, offset=208
	char _pSpellFlags; // size=0, offset=216
	int _pSplHotKey[4]; // size=16, offset=220
	char _pSplTHotKey[4]; // size=4, offset=236
	int _pwtype; // size=0, offset=240
	unsigned char _pBlockFlag; // size=0, offset=244
	unsigned char _pInvincible; // size=0, offset=245
	char _pLightRad; // size=0, offset=246
	unsigned char _pLvlChanging; // size=0, offset=247
	char _pName[32]; // size=32, offset=248
	char _pClass; // size=0, offset=280
	short _pStrength; // size=0, offset=282
	short _pBaseStr; // size=0, offset=284
	short _pMagic; // size=0, offset=286
	short _pBaseMag; // size=0, offset=288
	short _pDexterity; // size=0, offset=290
	short _pBaseDex; // size=0, offset=292
	short _pVitality; // size=0, offset=294
	short _pBaseVit; // size=0, offset=296
	int _pStatPts; // size=0, offset=300
	int _pDamageMod; // size=0, offset=304
	int _pBaseToBlk; // size=0, offset=308
	long _pHPBase; // size=0, offset=312
	long _pMaxHPBase; // size=0, offset=316
	long _pHitPoints; // size=0, offset=320
	long _pMaxHP; // size=0, offset=324
	int _pHPPer; // size=0, offset=328
	long _pManaBase; // size=0, offset=332
	long _pMaxManaBase; // size=0, offset=336
	long _pMana; // size=0, offset=340
	long _pMaxMana; // size=0, offset=344
	int _pManaPer; // size=0, offset=348
	char _pLevel; // size=0, offset=352
	char _pMaxLvl; // size=0, offset=353
	long _pExperience; // size=0, offset=356
	long _pMaxExp; // size=0, offset=360
	long _pNextExper; // size=0, offset=364
	char _pArmorClass; // size=0, offset=368
	char _pMagResist; // size=0, offset=369
	char _pFireResist; // size=0, offset=370
	char _pLghtResist; // size=0, offset=371
	long _pGold; // size=0, offset=372
	unsigned char _pInfraFlag; // size=0, offset=376
	short _pVar1; // size=0, offset=378
	short _pVar2; // size=0, offset=380
	short _pVar3; // size=0, offset=382
	short _pVar4; // size=0, offset=384
	short _pVar5; // size=0, offset=386
	short _pVar6; // size=0, offset=388
	short _pVar7; // size=0, offset=390
	short _pVar8; // size=0, offset=392
	unsigned char _pLvlVisited[17]; // size=17, offset=394
	unsigned char _pSLvlVisited[10]; // size=10, offset=411
	int _pGFXLoad; // size=0, offset=424
	unsigned char peq; // size=0, offset=428
	int _pAFNum; // size=0, offset=432
	int _pNFrames; // size=0, offset=436
	int _pWFrames; // size=0, offset=440
	int _pAFrames; // size=0, offset=444
	int _pSFrames; // size=0, offset=448
	int _pSFNum; // size=0, offset=452
	int _pHFrames; // size=0, offset=456
	int _pDFrames; // size=0, offset=460
	int _pBFrames; // size=0, offset=464
	struct ItemStruct InvBody[7]; // size=1064, offset=468
	struct ItemStruct InvList[40]; // size=6080, offset=1532
	int _pNumInv; // size=0, offset=7612
	char InvGrid[40]; // size=40, offset=7616
	struct ItemStruct SpdList[8]; // size=1216, offset=7656
	struct ItemStruct HoldItem; // size=152, offset=8872
	int inv_highlight; // size=0, offset=9024
	int body_highlight; // size=0, offset=9028
	int holdinv_x; // size=0, offset=9032
	int holdinv_y; // size=0, offset=9036
	int holdbody_loc; // size=0, offset=9040
	int _pIMinDam; // size=0, offset=9044
	int _pIMaxDam; // size=0, offset=9048
	int _pIAC; // size=0, offset=9052
	int _pIBonusDam; // size=0, offset=9056
	int _pIBonusToHit; // size=0, offset=9060
	int _pIBonusAC; // size=0, offset=9064
	int _pIBonusDamMod; // size=0, offset=9068
	qword _pISpells; // size=0, offset=9072
	long _pIFlags; // size=0, offset=9080
	int _pIGetHit; // size=0, offset=9084
	char _pISplLvlAdd; // size=0, offset=9088
	char _pISplCost; // size=0, offset=9089
	int _pISplDur; // size=0, offset=9092
	int _pIEnAc; // size=0, offset=9096
	int _pIFMinDam; // size=0, offset=9100
	int _pIFMaxDam; // size=0, offset=9104
	int _pILMinDam; // size=0, offset=9108
	int _pILMaxDam; // size=0, offset=9112
	int _pOilType; // size=0, offset=9116
	unsigned char pTownWarps; // size=0, offset=9120
	unsigned char pDungMsgs; // size=0, offset=9121
	unsigned char pLvlLoad; // size=0, offset=9122
	unsigned long pDiabloKillLevel; // size=0, offset=9124
};

struct controller_pos // hashcode: 0x69F065CB (dec: 1777362379)
{
	int rx; // size=0, offset=0
	int ry; // size=0, offset=4
	int rz; // size=0, offset=8
	int tx; // size=0, offset=12
	int ty; // size=0, offset=16
	int tz; // size=0, offset=20
	int px; // size=0, offset=24
	int py; // size=0, offset=28
	int srx; // size=0, offset=32
	int sry; // size=0, offset=36
	int srz; // size=0, offset=40
	int stx; // size=0, offset=44
	int sty; // size=0, offset=48
	int stz; // size=0, offset=52
	int spx; // size=0, offset=56
	int spy; // size=0, offset=60
};

struct pad_assigns // hashcode: 0xBD520511 (dec: -1118698223)
{
	char *txt; // size=0, offset=0
	int pnum; // size=0, offset=4
	char font_num; // size=0, offset=8
};

struct KEY_ASSIGNS // hashcode: 0xCD28D245 (dec: -852962747)
{
	int txt; // size=0, offset=0
	int pad_val; // size=0, offset=4
	void (*func)(); // size=0, offset=8
	int combo_val; // size=0, offset=12
};

struct LittleGt4 // hashcode: 0x6281D300 (dec: 1652675328)
{
	unsigned short clut; // size=0, offset=0
	unsigned short tpage; // size=0, offset=2
	unsigned char code; // size=0, offset=4
	unsigned char u0; // size=0, offset=5
	unsigned char v0; // size=0, offset=6
	unsigned char u1; // size=0, offset=7
	unsigned char v1; // size=0, offset=8
	unsigned char u2; // size=0, offset=9
	unsigned char v2; // size=0, offset=10
	unsigned char u3; // size=0, offset=11
	unsigned char v3; // size=0, offset=12
	unsigned char w; // size=0, offset=13
	unsigned char h; // size=0, offset=14
};

struct CBlocks // hashcode: 0x8088CC26 (dec: -2138518490)
{
	struct TextDat TextDat; // size=108, offset=0
	struct TextDat *MonstTexDat; // size=108, offset=108
	struct TextDat *ObjTexDat; // size=108, offset=112
	struct MonstList *MonsterList; // size=16, offset=116
	int MonstTexId; // size=0, offset=120
	int ObjTexId; // size=0, offset=124
	int ItemTexId; // size=0, offset=128
	struct TextDat *ItemTexDat; // size=108, offset=132
	int BgTexId; // size=0, offset=136
	struct TextDat *BgTexDat; // size=108, offset=140
	int pOtPos[2]; // size=8, offset=144
	void * IsTown; // size=0, offset=152
	int NumOfBlocks; // size=0, offset=156
	struct LittleGt4 *Gt4s; // size=16, offset=160
	long hndGt4s; // size=0, offset=164
	struct RECT *Rects; // size=8, offset=168
	long hndRects; // size=0, offset=172
	struct RECT ClipRect; // size=8, offset=176
	int StX; // size=0, offset=184
	int StY; // size=0, offset=188
	int Mx; // size=0, offset=192
	int My; // size=0, offset=196
	int pBlockX[2]; // size=8, offset=200
	int pBlockY[2]; // size=8, offset=208
	int CursX; // size=0, offset=216
	int CursY; // size=0, offset=220
};

struct CPlayer // hashcode: 0xDA52DD73 (dec: -632103565)
{
	struct TextDat TextDat; // size=108, offset=0
	void * InTown; // size=0, offset=108
	unsigned short PlayerNum; // size=0, offset=112
	unsigned short Tpage; // size=0, offset=114
	int TexId; // size=0, offset=116
	int LastScrX; // size=0, offset=120
	int LastScrY; // size=0, offset=124
	int LastOtPos; // size=0, offset=128
};

struct Spell_Target // hashcode: 0x23648DBF (dec: 593792447)
{
	char (*walk)(); // size=0, offset=0
	int angle; // size=0, offset=4
	int spotid; // size=0, offset=8
	short lastx[5]; // size=10, offset=12
	short lasty[5]; // size=10, offset=22
	unsigned char _sx; // size=0, offset=32
	unsigned char _sy; // size=0, offset=33
	unsigned char active; // size=0, offset=34
};

struct GamePad // hashcode: 0x1DC9BF8C (dec: 499761036)
{
	struct PlayerStruct *player; // size=9128, offset=0
	char pnum; // size=0, offset=4
	char allow_walking; // size=0, offset=5
	char (*walk_style)(); // size=0, offset=8
	int restart_time; // size=0, offset=12
	char style; // size=0, offset=16
	int pad_up_button; // size=0, offset=20
	void (*pad_up_action)(); // size=0, offset=24
	struct CPad *Pad; // size=108, offset=28
	int combo_key; // size=0, offset=32
	unsigned char await_combo; // size=0, offset=36
	unsigned char position_lock; // size=0, offset=37
	int position_key; // size=0, offset=40
	void ((*button_down[14]))(); // size=56, offset=44
	void ((*button_combo[14]))(); // size=56, offset=100
};

struct found_objects // hashcode: 0xDCC8511B (dec: -590851813)
{
	char index; // size=0, offset=0
	char x; // size=0, offset=1
	char y; // size=0, offset=2
	char type; // size=0, offset=3
};

struct CdlLOC // hashcode: 0xB10BCC34 (dec: -1324626892)
{
	unsigned char minute; // size=0, offset=0
	unsigned char second; // size=0, offset=1
	unsigned char sector; // size=0, offset=2
	unsigned char track; // size=0, offset=3
};

struct CdlFILTER // hashcode: 0x712DC748 (dec: 1898825544)
{
	unsigned char file; // size=0, offset=0
	unsigned char chan; // size=0, offset=1
	unsigned short pad; // size=0, offset=2
};

struct CdlATV // hashcode: 0xB27CF35A (dec: -1300434086)
{
	unsigned char val0; // size=0, offset=0
	unsigned char val1; // size=0, offset=1
	unsigned char val2; // size=0, offset=2
	unsigned char val3; // size=0, offset=3
};

struct CdlFILE // hashcode: 0xF2C5E616 (dec: -221911530)
{
	struct CdlLOC pos; // size=4, offset=0
	unsigned long size; // size=0, offset=4
	char name[16]; // size=16, offset=8
};

struct StHEADER // hashcode: 0x179A890D (dec: 396003597)
{
	unsigned short id; // size=0, offset=0
	unsigned short type; // size=0, offset=2
	unsigned short secCount; // size=0, offset=4
	unsigned short nSectors; // size=0, offset=6
	unsigned long frameCount; // size=0, offset=8
	unsigned long frameSize; // size=0, offset=12
	unsigned short width; // size=0, offset=16
	unsigned short height; // size=0, offset=18
	unsigned long dummy1; // size=0, offset=20
	unsigned long dummy2; // size=0, offset=24
	struct CdlLOC loc; // size=4, offset=28
};

struct PCIO // hashcode: 0x1407C5BE (dec: 336053694)
{
	struct FileIO FileIO; // size=20, offset=0
};

struct CdIO // hashcode: 0x468CA75F (dec: 1183623007)
{
	struct FileIO FileIO; // size=20, offset=0
};

struct DList // hashcode: 0x930AA2E2 (dec: -1828019486)
{
	struct SysObj SysObj; // size=4, offset=0
	int XRot; // size=0, offset=4
	int YRot; // size=0, offset=8
	int ZRot; // size=0, offset=12
	struct MATRIX MyRotMatrix; // size=32, offset=16
	struct MATRIX MyTransMatrix; // size=32, offset=48
	struct VECTOR Out[4]; // size=64, offset=80
	struct SVECTOR In[4]; // size=32, offset=144
};

struct ARGB // hashcode: 0x0F8BC327 (dec: 260817703)
{
	unsigned char b; // size=0, offset=0
	unsigned char g; // size=0, offset=1
	unsigned char r; // size=0, offset=2
	unsigned char a; // size=0, offset=3
};

struct shapetbl // hashcode: 0xBB215198 (dec: -1155444328)
{
	unsigned int type; // size=8, offset=0
	int next; // size=24, offset=8
	short width; // size=0, offset=4
	short height; // size=0, offset=6
	short centerx; // size=0, offset=8
	short centery; // size=0, offset=10
	int shapex; // size=12, offset=96
	int reserved; // size=2, offset=108
	int transposed; // size=1, offset=110
	int rotated; // size=1, offset=111
	int shapey; // size=12, offset=112
	int mipmaps; // size=4, offset=124
	char data; // size=0, offset=16
};

struct windowtbl // hashcode: 0x043D8DB4 (dec: 71142836)
{
	long id; // size=0, offset=0
	int x; // size=0, offset=4
	int y; // size=0, offset=8
	int width; // size=0, offset=12
	int height; // size=0, offset=16
	unsigned char bpp; // size=0, offset=20
	unsigned char type; // size=0, offset=21
	unsigned char ram; // size=0, offset=22
	unsigned char unused; // size=0, offset=23
	int minx; // size=0, offset=24
	int miny; // size=0, offset=28
	int maxx; // size=0, offset=32
	int maxy; // size=0, offset=36
	struct shapetbl *shape; // size=20, offset=40
	struct DISPENV dispenv; // size=20, offset=44
	struct DRAWENV drawenv; // size=92, offset=64
};

struct coorddef // hashcode: 0x9468DA4D (dec: -1805067699)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int z; // size=0, offset=8
};

struct scoorddef // hashcode: 0x3A6A8E33 (dec: 980061747)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
};

struct matrixtdef // hashcode: 0x799E11B0 (dec: 2040402352)
{
	int m[9]; // size=36, offset=0
};

struct TSPRT // hashcode: 0x6E3A6D8C (dec: 1849322892)
{
	unsigned char a0; // size=0, offset=0
	unsigned char a1; // size=0, offset=1
	unsigned char a2; // size=0, offset=2
	unsigned char len; // size=0, offset=3
	unsigned long tpage; // size=0, offset=4
	unsigned char r; // size=0, offset=8
	unsigned char g; // size=0, offset=9
	unsigned char b; // size=0, offset=10
	unsigned char code; // size=0, offset=11
	unsigned long xy; // size=0, offset=12
	unsigned char u; // size=0, offset=16
	unsigned char v; // size=0, offset=17
	unsigned short clut; // size=0, offset=18
	unsigned long wh; // size=0, offset=20
};

struct memclassstruct // hashcode: 0x0FB8F6C5 (dec: 263780037)
{
	char **bottomblock; // size=0, offset=0
	char **topblock; // size=0, offset=4
	int pad; // size=0, offset=8
	int align; // size=0, offset=12
	int cache; // size=0, offset=16
	int sentinel; // size=0, offset=20
};

struct FONTFILE // hashcode: 0x98B1D7C2 (dec: -1733175358)
{
	unsigned long type; // size=0, offset=0
	unsigned char first; // size=0, offset=4
	unsigned char last; // size=0, offset=5
	unsigned char maxwidth; // size=0, offset=6
	unsigned char maxheight; // size=0, offset=7
	unsigned char space; // size=0, offset=8
	unsigned char yinc; // size=0, offset=9
	unsigned char baseline; // size=0, offset=10
	char pad1; // size=0, offset=11
	char filesize[4]; // size=4, offset=12
	int palette; // size=16, offset=128
	int width; // size=16, offset=144
	int height; // size=16, offset=160
	int xinc; // size=16, offset=176
	int xoffset; // size=16, offset=192
	int yoffset; // size=16, offset=208
	long shape; // size=0, offset=28
};

struct coordsdef // hashcode: 0x6D9E8D6D (dec: 1839107437)
{
	int frames; // size=0, offset=0
	int coords; // size=0, offset=4
	struct coorddef point[40]; // size=480, offset=8
};

struct linedef // hashcode: 0xCE233AC2 (dec: -836551998)
{
	int start; // size=0, offset=0
	int end; // size=0, offset=4
	int colour; // size=0, offset=8
	int thickness; // size=0, offset=12
};

struct linesdef // hashcode: 0x57551100 (dec: 1465192704)
{
	int lines; // size=0, offset=0
	int basex; // size=0, offset=4
	int basey; // size=0, offset=8
	int basez; // size=0, offset=12
	struct linedef line[40]; // size=640, offset=16
};

struct dirangledef // hashcode: 0xEA1C9361 (dec: -367226015)
{
	int heading; // size=0, offset=0
	int pitch; // size=0, offset=4
	int roll; // size=0, offset=8
};

struct arcangledef // hashcode: 0x2867BB47 (dec: 677886791)
{
	int orientation; // size=0, offset=0
	int heading; // size=0, offset=4
	int pitch; // size=0, offset=8
	int roll; // size=0, offset=12
	int vheading; // size=0, offset=16
	int vpitch; // size=0, offset=20
	int vroll; // size=0, offset=24
};

struct SHAPETABLEENTRY // hashcode: 0xB746BCD6 (dec: -1220100906)
{
	char id[4]; // size=4, offset=0
	long offset; // size=0, offset=4
};

struct SHAPEFILE // hashcode: 0xDEA7C228 (dec: -559431128)
{
	char type[4]; // size=4, offset=0
	long len; // size=0, offset=4
	long num; // size=0, offset=8
	char creator[4]; // size=4, offset=12
	struct SHAPETABLEENTRY tbl[1]; // size=8, offset=16
};

struct radialsymdef // hashcode: 0x1F8B880A (dec: 529238026)
{
	int maxindex; // size=0, offset=0
	int shiftcount; // size=0, offset=4
	int delta; // size=0, offset=8
	int scalefactor; // size=0, offset=12
	struct shapetbl **shapes; // size=20, offset=16
};

struct graphicsmodeinfostruct // hashcode: 0x61822CAA (dec: 1635921066)
{
	int width; // size=0, offset=0
	int height; // size=0, offset=4
	int bpp; // size=0, offset=8
	int shapetype; // size=0, offset=12
	int banked; // size=1, offset=128
	int pagedbanks; // size=1, offset=129
	int modex; // size=1, offset=130
	int pageflip; // size=1, offset=131
	int zbuffer; // size=1, offset=132
	int hwdram; // size=1, offset=133
	int hwblit; // size=1, offset=134
	int hwfill; // size=1, offset=135
	int hwscale; // size=1, offset=136
	int hwtmask; // size=1, offset=137
	int hwtexture; // size=1, offset=138
	int hwvbl; // size=1, offset=139
};

struct chunkhdrstruct // hashcode: 0xC6F9F052 (dec: -956698542)
{
	int type; // size=0, offset=0
	int size; // size=0, offset=4
};

struct chunkhdrchkstruct // hashcode: 0xA1839BF9 (dec: -1585210375)
{
	int type; // size=0, offset=0
	int size; // size=0, offset=4
	int crc; // size=0, offset=8
};

struct UNIQUEID // hashcode: 0xB988E036 (dec: -1182212042)
{
	unsigned long a; // size=0, offset=0
	unsigned short b; // size=0, offset=4
	unsigned short c; // size=0, offset=6
	unsigned char d[8]; // size=8, offset=8
};

struct threadstruct // hashcode: 0x92AFCBCD (dec: -1833972787)
{
	int item; // size=0, offset=0
	int stacksize; // size=0, offset=4
	int priority; // size=0, offset=8
	int processor; // size=0, offset=12
};

struct cdstreamstruct // hashcode: 0xF8141590 (dec: -132901488)
{
	long id; // size=0, offset=0
	char *start; // size=0, offset=4
	char *end; // size=0, offset=8
	char *write; // size=0, offset=12
	char *header; // size=0, offset=16
	char *get; // size=0, offset=20
	char *release; // size=0, offset=24
	int handle; // size=0, offset=28
	int state; // size=0, offset=32
	int control; // size=0, offset=36
	int status; // size=0, offset=40
	int abort; // size=0, offset=44
	int datahascrc; // size=0, offset=48
	int crcerrors; // size=0, offset=52
	int crcretries; // size=0, offset=56
	int buffersize; // size=0, offset=60
	long blocksize; // size=0, offset=64
	int readsize; // size=0, offset=68
	int chunksize; // size=0, offset=72
	int relocationsize; // size=0, offset=76
	long fileoffset; // size=0, offset=80
	int fileend; // size=0, offset=84
	long filesize; // size=0, offset=88
	int dataoffset; // size=0, offset=92
	int seekposition; // size=0, offset=96
	int seekoffset; // size=0, offset=100
	int idtype; // size=0, offset=104
	int idmask; // size=0, offset=108
	struct cdstreamstruct *nextstream; // size=152, offset=112
	void *emptyblock; // size=0, offset=116
	void *head; // size=0, offset=120
	void *tail; // size=0, offset=124
	void *block; // size=0, offset=128
	int timer; // size=0, offset=132
	int blocktime; // size=0, offset=136
	int streamfull; // size=0, offset=140
	int getable; // size=0, offset=144
	int releaseable; // size=0, offset=148
};

struct STREAM // hashcode: 0xDF93F7F0 (dec: -543950864)
{
	unsigned long Offset; // size=0, offset=0
	unsigned long Size; // size=0, offset=4
	unsigned char Name[12]; // size=12, offset=8
};

struct STRHDR // hashcode: 0x174B13C8 (dec: 390796232)
{
	unsigned char Name[12]; // size=12, offset=0
	unsigned long Offset; // size=0, offset=12
	int Size; // size=0, offset=16
};

struct SFXHDR // hashcode: 0xC7F1A5F8 (dec: -940464648)
{
	char used; // size=0, offset=0
	char loop; // size=0, offset=1
	char playing; // size=0, offset=2
	char state; // size=0, offset=3
	void * TaskAlive; // size=0, offset=4
	struct STRHDR *StreamHND; // size=20, offset=8
	unsigned char type; // size=0, offset=12
	unsigned char ChunkGot; // size=0, offset=13
	int voice; // size=0, offset=16
	int volume; // size=0, offset=20
	int s_volume; // size=0, offset=24
	int pitch; // size=0, offset=28
	int stream_sec; // size=0, offset=32
	int stream_offs; // size=0, offset=36
	int stream_read; // size=0, offset=40
	int stream_stall; // size=0, offset=44
	int stream_pos; // size=0, offset=48
	int SPU_frame; // size=0, offset=52
	int SPU_sec; // size=0, offset=56
	int SPU_pos; // size=0, offset=60
	int SPUstreamaddr; // size=0, offset=64
	int framecount; // size=0, offset=68
	int lastcount; // size=0, offset=72
	int sec_num; // size=0, offset=76
	int SPU_sec_num; // size=0, offset=80
	int ah; // size=0, offset=84
	int stream_ending; // size=0, offset=88
	int DMA_size; // size=0, offset=92
	int spu_rate; // size=0, offset=96
	int SizeIn; // size=0, offset=100
	unsigned char *mem; // size=0, offset=104
	unsigned long stream_playing; // size=0, offset=108
	char name[14]; // size=14, offset=112
};

struct DECDCTENV // hashcode: 0xE51425F8 (dec: -451664392)
{
	unsigned char iq_y[64]; // size=64, offset=0
	unsigned char iq_c[64]; // size=64, offset=64
	short dct[64]; // size=128, offset=128
};

struct ENCSPUENV // hashcode: 0xA5751D4C (dec: -1519051444)
{
	short *src; // size=0, offset=0
	short *dest; // size=0, offset=4
	short *work; // size=0, offset=8
	long size; // size=0, offset=12
	long loop_start; // size=0, offset=16
	char loop; // size=0, offset=20
	char byte_swap; // size=0, offset=21
	char proceed; // size=0, offset=22
	char pad4; // size=0, offset=23
};

struct SpuVolume // hashcode: 0x96ABDBD7 (dec: -1767121961)
{
	short left; // size=0, offset=0
	short right; // size=0, offset=2
};

struct SpuVoiceAttr // hashcode: 0xB1CC1702 (dec: -1312024830)
{
	unsigned long voice; // size=0, offset=0
	unsigned long mask; // size=0, offset=4
	struct SpuVolume volume; // size=4, offset=8
	struct SpuVolume volmode; // size=4, offset=12
	struct SpuVolume volumex; // size=4, offset=16
	unsigned short pitch; // size=0, offset=20
	unsigned short note; // size=0, offset=22
	unsigned short sample_note; // size=0, offset=24
	short envx; // size=0, offset=26
	unsigned long addr; // size=0, offset=28
	unsigned long loop_addr; // size=0, offset=32
	long a_mode; // size=0, offset=36
	long s_mode; // size=0, offset=40
	long r_mode; // size=0, offset=44
	unsigned short ar; // size=0, offset=48
	unsigned short dr; // size=0, offset=50
	unsigned short sr; // size=0, offset=52
	unsigned short rr; // size=0, offset=54
	unsigned short sl; // size=0, offset=56
	unsigned short adsr1; // size=0, offset=58
	unsigned short adsr2; // size=0, offset=60
};

struct SpuReverbAttr // hashcode: 0x625A257C (dec: 1650075004)
{
	unsigned long mask; // size=0, offset=0
	long mode; // size=0, offset=4
	struct SpuVolume depth; // size=4, offset=8
	long delay; // size=0, offset=12
	long feedback; // size=0, offset=16
};

struct SpuDecodedData // hashcode: 0x4C5E0485 (dec: 1281229957)
{
	short cd_left[512]; // size=1024, offset=0
	short cd_right[512]; // size=1024, offset=1024
	short voice1[512]; // size=1024, offset=2048
	short voice3[512]; // size=1024, offset=3072
};

struct SpuExtAttr // hashcode: 0x8A79D89A (dec: -1971726182)
{
	struct SpuVolume volume; // size=4, offset=0
	long reverb; // size=0, offset=4
	long mix; // size=0, offset=8
};

struct SpuCommonAttr // hashcode: 0x9C6DC379 (dec: -1670528135)
{
	unsigned long mask; // size=0, offset=0
	struct SpuVolume mvol; // size=4, offset=4
	struct SpuVolume mvolmode; // size=4, offset=8
	struct SpuVolume mvolx; // size=4, offset=12
	struct SpuExtAttr cd; // size=12, offset=16
	struct SpuExtAttr ext; // size=12, offset=28
};

struct SpuEnv // hashcode: 0x65F2DE8A (dec: 1710415498)
{
	unsigned long mask; // size=0, offset=0
	unsigned long queueing; // size=0, offset=4
};

struct SpuStVoiceAttr // hashcode: 0x49F15494 (dec: 1240552596)
{
	char status; // size=0, offset=0
	char pad1; // size=0, offset=1
	char pad2; // size=0, offset=2
	char pad3; // size=0, offset=3
	long last_size; // size=0, offset=4
	unsigned long buf_addr; // size=0, offset=8
	unsigned long data_addr; // size=0, offset=12
};

struct SpuStEnv // hashcode: 0xCFDB8CD1 (dec: -807695151)
{
	long size; // size=0, offset=0
	long low_priority; // size=0, offset=4
	struct SpuStVoiceAttr voice[24]; // size=384, offset=8
};

struct VabHdr // hashcode: 0x14B49813 (dec: 347379731)
{
	long form; // size=0, offset=0
	long ver; // size=0, offset=4
	long id; // size=0, offset=8
	unsigned long fsize; // size=0, offset=12
	unsigned short reserved0; // size=0, offset=16
	unsigned short ps; // size=0, offset=18
	unsigned short ts; // size=0, offset=20
	unsigned short vs; // size=0, offset=22
	unsigned char mvol; // size=0, offset=24
	unsigned char pan; // size=0, offset=25
	unsigned char attr1; // size=0, offset=26
	unsigned char attr2; // size=0, offset=27
	unsigned long reserved1; // size=0, offset=28
};

struct ProgAtr // hashcode: 0xFB216026 (dec: -81698778)
{
	unsigned char tones; // size=0, offset=0
	unsigned char mvol; // size=0, offset=1
	unsigned char prior; // size=0, offset=2
	unsigned char mode; // size=0, offset=3
	unsigned char mpan; // size=0, offset=4
	char reserved0; // size=0, offset=5
	short attr; // size=0, offset=6
	unsigned long reserved1; // size=0, offset=8
	unsigned long reserved2; // size=0, offset=12
};

struct VagAtr // hashcode: 0xAFB778DF (dec: -1346930465)
{
	unsigned char prior; // size=0, offset=0
	unsigned char mode; // size=0, offset=1
	unsigned char vol; // size=0, offset=2
	unsigned char pan; // size=0, offset=3
	unsigned char center; // size=0, offset=4
	unsigned char shift; // size=0, offset=5
	unsigned char min; // size=0, offset=6
	unsigned char max; // size=0, offset=7
	unsigned char vibW; // size=0, offset=8
	unsigned char vibT; // size=0, offset=9
	unsigned char porW; // size=0, offset=10
	unsigned char porT; // size=0, offset=11
	unsigned char pbmin; // size=0, offset=12
	unsigned char pbmax; // size=0, offset=13
	unsigned char reserved1; // size=0, offset=14
	unsigned char reserved2; // size=0, offset=15
	unsigned short adsr1; // size=0, offset=16
	unsigned short adsr2; // size=0, offset=18
	short prog; // size=0, offset=20
	short vag; // size=0, offset=22
	short reserved[4]; // size=8, offset=24
};

struct SndVolume // hashcode: 0x1EDF883F (dec: 517965887)
{
	unsigned short left; // size=0, offset=0
	unsigned short right; // size=0, offset=2
};

struct SndVolume2 // hashcode: 0x444A9A1E (dec: 1145739806)
{
	short left; // size=0, offset=0
	short right; // size=0, offset=2
};

struct SndRegisterAttr // hashcode: 0xAA833F31 (dec: -1434239183)
{
	struct SndVolume2 volume; // size=4, offset=0
	short pitch; // size=0, offset=4
	short mask; // size=0, offset=6
	short addr; // size=0, offset=8
	short adsr1; // size=0, offset=10
	short adsr2; // size=0, offset=12
};

struct SndVoiceStats // hashcode: 0x72B877F6 (dec: 1924691958)
{
	short vagId; // size=0, offset=0
	short vabId; // size=0, offset=2
	unsigned short pitch; // size=0, offset=4
	short note; // size=0, offset=6
	short tone; // size=0, offset=8
	short prog_num; // size=0, offset=10
	short prog_actual; // size=0, offset=12
	short vol; // size=0, offset=14
	short pan; // size=0, offset=16
};

struct _SsFCALL // hashcode: 0x143A008E (dec: 339345550)
{
	void (*noteon)(); // size=0, offset=0
	void (*programchange)(); // size=0, offset=4
	void (*pitchbend)(); // size=0, offset=8
	void (*metaevent)(); // size=0, offset=12
	void ((*control[13]))(); // size=52, offset=16
	void ((*ccentry[20]))(); // size=80, offset=68
};

struct MissileStruct // hashcode: 0x3D14C956 (dec: 1024772438)
{
	long _mixvel; // size=0, offset=0
	long _miyvel; // size=0, offset=4
	long _mitxoff; // size=0, offset=8
	long _mityoff; // size=0, offset=12
	int _mirange; // size=0, offset=16
	int _micaster; // size=0, offset=20
	int _midam; // size=0, offset=24
	int _mirnd; // size=0, offset=28
	short _midist; // size=0, offset=32
	short _miVar1; // size=0, offset=34
	short _miVar2; // size=0, offset=36
	short _miVar3; // size=0, offset=38
	short _miVar4; // size=0, offset=40
	short _miVar5; // size=0, offset=42
	short _miVar6; // size=0, offset=44
	short _miVar7; // size=0, offset=46
	short _miVar8; // size=0, offset=48
	char _mitype; // size=0, offset=50
	char _mix; // size=0, offset=51
	char _miy; // size=0, offset=52
	char _mixoff; // size=0, offset=53
	char _miyoff; // size=0, offset=54
	char _misx; // size=0, offset=55
	char _misy; // size=0, offset=56
	unsigned char _miAnimType; // size=0, offset=57
	unsigned char _miDelFlag; // size=0, offset=58
	unsigned char _miAnimFlags; // size=0, offset=59
	unsigned char _miDrawFlag; // size=0, offset=60
	unsigned char _miLightFlag; // size=0, offset=61
	unsigned char _miPreFlag; // size=0, offset=62
	unsigned char _miUniqTrans; // size=0, offset=63
	unsigned char _miHitFlag; // size=0, offset=64
	char _mlid; // size=0, offset=65
	char _mimfnum; // size=0, offset=66
	char _mispllvl; // size=0, offset=67
	char _miAnimDelay; // size=0, offset=68
	char _miAnimLen; // size=0, offset=69
	char _miAnimWidth; // size=0, offset=70
	char _miAnimWidth2; // size=0, offset=71
	char _miAnimCnt; // size=0, offset=72
	char _miAnimAdd; // size=0, offset=73
	char _miAnimFrame; // size=0, offset=74
	char _misource; // size=0, offset=75
	void (*PrintPtr)(); // size=0, offset=76
};

struct SPELLFX_DAT // hashcode: 0xDAB5D04F (dec: -625618865)
{
	void * apocactive; // size=0, offset=0
	void * healactive; // size=0, offset=4
	int teleflag; // size=0, offset=8
	int phaseflag; // size=0, offset=12
	int inviscount; // size=0, offset=16
	int X; // size=0, offset=20
	int Y; // size=0, offset=24
	int sxoff; // size=0, offset=28
	int syoff; // size=0, offset=32
	int scrnx; // size=0, offset=36
	int scrny; // size=0, offset=40
	int px; // size=0, offset=44
	int py; // size=0, offset=48
	int yoffset; // size=0, offset=52
	int spiny1; // size=0, offset=56
	int spiny2; // size=0, offset=60
	int scale; // size=0, offset=64
	int healtime; // size=0, offset=68
};

struct Particle // hashcode: 0xE1BA9FD8 (dec: -507863080)
{
	int partx; // size=0, offset=0
	int party; // size=0, offset=4
	int partanim; // size=0, offset=8
	int jumpflag; // size=0, offset=12
	int jumpcount; // size=0, offset=16
	int jumpmax; // size=0, offset=20
	int dx; // size=0, offset=24
	int scale; // size=0, offset=28
	int colour; // size=0, offset=32
};

struct strheader // hashcode: 0xC8BF825F (dec: -926973345)
{
	short id; // size=0, offset=0
	short type; // size=0, offset=2
	short seccount; // size=0, offset=4
	short nsectors; // size=0, offset=6
	int framecount; // size=0, offset=8
	int framesize; // size=0, offset=12
	short width; // size=0, offset=16
	short height; // size=0, offset=18
	int res[3]; // size=12, offset=20
};

struct strsec // hashcode: 0x1F023882 (dec: 520239234)
{
	short id; // size=0, offset=0
	short type; // size=0, offset=2
	short seccount; // size=0, offset=4
	short nsectors; // size=0, offset=6
	int framecount; // size=0, offset=8
	int framesize; // size=0, offset=12
	short width; // size=0, offset=16
	short height; // size=0, offset=18
	int res[3]; // size=12, offset=20
	int data[504]; // size=2016, offset=32
};

struct mdc_header // hashcode: 0x51E01392 (dec: 1373639570)
{
	char id[4]; // size=4, offset=0
	int frames; // size=0, offset=4
	int framesize; // size=0, offset=8
	int width; // size=0, offset=12
	int height; // size=0, offset=16
};

struct file_header // hashcode: 0x255C630E (dec: 626811662)
{
	char magic[2]; // size=2, offset=0
	char type; // size=0, offset=2
	char blockentry; // size=0, offset=3
	unsigned char title[64]; // size=64, offset=4
	int chksum; // size=0, offset=68
	int size; // size=0, offset=72
	int id; // size=0, offset=76
	char reserved[16]; // size=16, offset=80
	char clut[32]; // size=32, offset=96
	char icon[3][128]; // size=384, offset=128
};

struct FeTable // hashcode: 0xE22AF203 (dec: -500502013)
{
	int Title; // size=0, offset=0
	int Sel; // size=0, offset=4
	int SelW; // size=0, offset=8
	int SelH; // size=0, offset=12
	void (*InitFuncPtr)(); // size=0, offset=16
	void (*CtrlFuncPtr)(); // size=0, offset=20
	void *PrevMenu; // size=0, offset=24
};

struct FeStruct // hashcode: 0xA0D0BAA4 (dec: -1596933468)
{
	int X; // size=0, offset=0
	int Y; // size=0, offset=4
	enum TXT_JUST Just; // size=4, offset=8
	int Str; // size=0, offset=12
	struct CFont *Font; // size=536, offset=16
	struct FeTable *MenuPtr; // size=28, offset=20
};

struct FE_PLR // hashcode: 0x26F500B4 (dec: 653590708)
{
	char Name[10]; // size=10, offset=0
	int Class; // size=0, offset=12
};

struct FE_CREATE // hashcode: 0xBCB8A5E6 (dec: -1128749594)
{
	int NumOfPlayers; // size=0, offset=0
	struct FE_PLR Plrs[2]; // size=32, offset=4
};

struct LOAD_IMAGE_ARGS // hashcode: 0x72A07216 (dec: 1923117590)
{
	struct RECT Rect; // size=8, offset=0
	unsigned int UseAddr; // size=1, offset=64
	unsigned int DiscardAfterDump; // size=1, offset=65
	unsigned int IsMove; // size=1, offset=66
	int Offset; // size=0, offset=12
	long ImgHandle; // size=0, offset=16
	void *Addr; // size=0, offset=20
	unsigned short DestX; // size=0, offset=24
	unsigned short DestY; // size=0, offset=26
};

struct PRIM_BUFFER // hashcode: 0x9F6BA8BB (dec: -1620334405)
{
	struct POLY_FT4 *Prims; // size=40, offset=0
	struct POLY_FT4 *EndAddr; // size=40, offset=4
	unsigned long *OtList; // size=0, offset=8
	unsigned char Drawing; // size=0, offset=12
	int OtSize; // size=0, offset=16
	long hndOtList; // size=0, offset=20
	long hndPrims; // size=0, offset=24
};

struct TP_LINK // hashcode: 0xA40412C9 (dec: -1543236919)
{
	struct TPAGE_DEF *Next; // size=0, offset=0
	struct TPAGE_DEF *Prev; // size=0, offset=4
};

struct TPAGE_DEF // hashcode: 0x52C18C53 (dec: 1388416083)
{
	union {
		struct TP_LINK TpLink; // size=8, offset=0
		struct DR_TPAGE DrTpage; // size=8, offset=0
	} LPage; // size=8, offset=0, found in object files: ,
	unsigned char TpageMode; // size=0, offset=8
	unsigned char Offset; // size=0, offset=9
	unsigned char Height; // size=0, offset=10
	unsigned char Indent; // size=0, offset=11
	unsigned char Width; // size=0, offset=12
	unsigned char Num; // size=0, offset=13
};

struct MEM_INFO // hashcode: 0xE3A651AB (dec: -475639381)
{
	void *Addr; // size=0, offset=0
	unsigned long Size; // size=0, offset=4
};

struct LNK_OPTS // hashcode: 0x8D1B41DA (dec: -1927593510)
{
	unsigned long RamSize; // size=0, offset=0
	unsigned long StackSize; // size=0, offset=4
	void *OrgAddress; // size=0, offset=8
	void *FreeMemAddress; // size=0, offset=12
	unsigned long FreeMemSize; // size=0, offset=16
	enum FILE_SYSTEM FileSystem; // size=4, offset=20
	enum DEV_KIT DevKit; // size=4, offset=24
};

struct DatIO // hashcode: 0xBBA3FD5F (dec: -1146880673)
{
	struct FileIO FileIO; // size=20, offset=0
};

struct PanelXY // hashcode: 0xEAC9B7DD (dec: -355878947)
{
	int MainX; // size=0, offset=0
	int MainY; // size=0, offset=4
	int FlaskFlip; // size=0, offset=8
	int SpeedBarXOfs; // size=0, offset=12
	int SpeedBarYOfs; // size=0, offset=16
	int SpellXOfs; // size=0, offset=20
	int SpellYOfs; // size=0, offset=24
	int LevelUpXOfs; // size=0, offset=28
	int LevelUpYOfs; // size=0, offset=32
	int MsgX; // size=0, offset=36
	int MsgY; // size=0, offset=40
	int MsgW; // size=0, offset=44
	int MsgH; // size=0, offset=48
	int HeadDurX; // size=0, offset=52
	int HeadDurY; // size=0, offset=56
	int BodyDurX; // size=0, offset=60
	int BodyDurY; // size=0, offset=64
	int Hand0DurX; // size=0, offset=68
	int Hand0DurY; // size=0, offset=72
	int Hand1DurX; // size=0, offset=76
	int Hand1DurY; // size=0, offset=80
};

struct GPanel // hashcode: 0xF8AD0B37 (dec: -122877129)
{
	int HealthAnimCount; // size=0, offset=0
	int ManaAnimCount; // size=0, offset=4
	int GlobeAnimCount; // size=0, offset=8
	struct TextDat *PanelTData; // size=108, offset=12
};

struct DPatsStruct // hashcode: 0x223A1281 (dec: 574231169)
{
	int qpat; // size=0, offset=0
	int d1; // size=0, offset=4
	int d2; // size=0, offset=8
	int d3; // size=0, offset=12
	int d4; // size=0, offset=16
};

struct NODE // hashcode: 0x4AC3FDD9 (dec: 1254358489)
{
	int nHallx1; // size=0, offset=0
	int nHally1; // size=0, offset=4
	int nHallx2; // size=0, offset=8
	int nHally2; // size=0, offset=12
	int nHalldir; // size=0, offset=16
	struct NODE *pNext; // size=24, offset=20
};

struct ROOMNODE // hashcode: 0x20BA3B70 (dec: 549075824)
{
	int nRoomx1; // size=0, offset=0
	int nRoomy1; // size=0, offset=4
	int nRoomx2; // size=0, offset=8
	int nRoomy2; // size=0, offset=12
	int nRoomDest; // size=0, offset=16
};

struct bank_entry // hashcode: 0x8082E645 (dec: -2138905019)
{
	unsigned short Name; // size=0, offset=0
	unsigned long offset; // size=0, offset=4
	unsigned short len; // size=0, offset=8
	unsigned short pitch; // size=0, offset=10
};

struct QuestStruct // hashcode: 0xAA0FEFB4 (dec: -1441796172)
{
	unsigned char _qlevel; // size=0, offset=0
	unsigned char _qtype; // size=0, offset=1
	unsigned char _qactive; // size=0, offset=2
	unsigned char _qlvltype; // size=0, offset=3
	int _qtx; // size=0, offset=4
	int _qty; // size=0, offset=8
	unsigned char _qslvl; // size=0, offset=12
	unsigned char _qidx; // size=0, offset=13
	unsigned char _qmsg; // size=0, offset=14
	unsigned char _qvar1; // size=0, offset=15
	unsigned char _qvar2; // size=0, offset=16
	unsigned char _qlog; // size=0, offset=17
};

struct QuestData // hashcode: 0xD7DF9BA6 (dec: -673211482)
{
	unsigned char _qdlvl; // size=0, offset=0
	char _qdmultlvl; // size=0, offset=1
	unsigned char _qlvlt; // size=0, offset=2
	unsigned char _qdtype; // size=0, offset=3
	unsigned char _qdrnd; // size=0, offset=4
	unsigned char _qslvl; // size=0, offset=5
	unsigned char _qflags; // size=0, offset=6
	int _qdmsg; // size=0, offset=8
	int _qlstr; // size=0, offset=12
};

struct SNDPLAYOPTS // hashcode: 0xF974CBA6 (dec: -109786202)
{
	int patnum; // size=0, offset=0
	char bhandle; // size=0, offset=4
	char keynum; // size=0, offset=5
	char velocity; // size=0, offset=6
	char pan; // size=0, offset=7
	char vol; // size=0, offset=8
	char bend; // size=0, offset=9
	char fxlevel0; // size=0, offset=10
	char use3dpos; // size=0, offset=11
	unsigned short azimuth; // size=0, offset=12
	short elevation; // size=0, offset=14
};

struct SNDLIMITS // hashcode: 0x6C48B059 (dec: 1816703065)
{
	int dmabuflen; // size=0, offset=0
	unsigned char numdmabufs; // size=0, offset=4
	unsigned char numdmamsgs; // size=0, offset=5
	unsigned char nummicrotalkinstances; // size=0, offset=6
	unsigned char microtalkinstanceabort; // size=0, offset=7
	short numrspcmds; // size=0, offset=8
	short pad2; // size=0, offset=10
	int audiostreambufsize; // size=0, offset=12
};

struct SNDUSAGE // hashcode: 0x043954BE (dec: 70866110)
{
	unsigned char numdmabufs; // size=0, offset=0
	unsigned char numvoices; // size=0, offset=1
	short numrspcmds; // size=0, offset=2
	int heapused; // size=0, offset=4
};

struct DR_LOAD2 // hashcode: 0xB8AC8985 (dec: -1196652155)
{
	unsigned int addr; // size=24, offset=0
	unsigned int len; // size=8, offset=24
	unsigned long code[1]; // size=4, offset=4
	struct RECT rect; // size=8, offset=8
	unsigned long p[13]; // size=52, offset=16
};

struct MEMSTRUCT // hashcode: 0xD80E3563 (dec: -670157469)
{
	long Handle; // size=0, offset=0
	void *MemPtr; // size=0, offset=4
};

struct TextDataStruct // hashcode: 0x10333DC7 (dec: 271793607)
{
	int txtstr; // size=0, offset=0
	unsigned char scrlltxt; // size=0, offset=4
	unsigned char txtspd; // size=0, offset=5
	int sfxnr; // size=0, offset=8
};

struct TriggerStruct // hashcode: 0xDB744234 (dec: -613137868)
{
	int _tx; // size=0, offset=0
	int _ty; // size=0, offset=4
	unsigned int _tmsg; // size=0, offset=8
	int _tlvl; // size=0, offset=12
};

struct OBJ_LOAD_INFO // hashcode: 0x6EDEF1AF (dec: 1860104623)
{
	short Creature; // size=0, offset=0
	unsigned short TexDat; // size=0, offset=2
};

struct ObjDataStruct // hashcode: 0x07E37F9D (dec: 132349853)
{
	char oload; // size=0, offset=0
	char ofindex; // size=0, offset=1
	char ominlvl; // size=0, offset=2
	char omaxlvl; // size=0, offset=3
	char olvltype; // size=0, offset=4
	char otheme; // size=0, offset=5
	char oquest; // size=0, offset=6
	unsigned char oAnimFlag; // size=0, offset=7
	short oAnimDelay; // size=0, offset=8
	short oAnimLen; // size=0, offset=10
	unsigned char oSolidFlag; // size=0, offset=12
	unsigned char oMissFlag; // size=0, offset=13
	unsigned char oLightFlag; // size=0, offset=14
	char oBreak; // size=0, offset=15
	char oSelFlag; // size=0, offset=16
	unsigned char oTrapFlag; // size=0, offset=17
};

struct ObjectStruct // hashcode: 0xA363E00B (dec: -1553735669)
{
	short _olid; // size=0, offset=0
	int _oRndSeed; // size=0, offset=4
	short _oAnimDelay; // size=0, offset=8
	short _oAnimCnt; // size=0, offset=10
	short _oAnimLen; // size=0, offset=12
	short _oVar1; // size=0, offset=14
	short _oVar2; // size=0, offset=16
	short _oVar3; // size=0, offset=18
	short _oVar4; // size=0, offset=20
	short _oVar5; // size=0, offset=22
	short _oVar6; // size=0, offset=24
	short _oVar7; // size=0, offset=26
	short _oVar8; // size=0, offset=28
	char _otype; // size=0, offset=30
	char _ox; // size=0, offset=31
	char _oy; // size=0, offset=32
	char _oAnimFrame; // size=0, offset=33
	char _oBreak; // size=0, offset=34
	char _oSelFlag; // size=0, offset=35
	unsigned char _oLight; // size=0, offset=36
	unsigned char _oAnimFlag; // size=0, offset=37
	unsigned char _oDelFlag; // size=0, offset=38
	unsigned char _oSolidFlag; // size=0, offset=39
	unsigned char _oMissFlag; // size=0, offset=40
	unsigned char _oPreFlag; // size=0, offset=41
	unsigned char _oTrapFlag; // size=0, offset=42
	unsigned char _oDoorFlag; // size=0, offset=43
};

struct MonsterStruct_alt_definition_0001 // hashcode: 0x8EB6E468 (dec: -1900616600)
{
	int mtalkmsg; // size=0, offset=0
	int _mRndSeed; // size=0, offset=4
	int _mAISeed; // size=0, offset=8
	int _mgoalvar1; // size=0, offset=12
	int _mgoalvar2; // size=0, offset=16
	int _mgoalvar3; // size=0, offset=20
	short _mVar1; // size=0, offset=24
	short _mVar2; // size=0, offset=26
	short _mVar3; // size=0, offset=28
	short _mVar4; // size=0, offset=30
	short _mVar5; // size=0, offset=32
	short _mVar6; // size=0, offset=34
	short _mVar7; // size=0, offset=36
	short _mVar8; // size=0, offset=38
	short _mmaxhp; // size=0, offset=40
	short _mhitpoints; // size=0, offset=42
	short _mxvel; // size=0, offset=44
	short _myvel; // size=0, offset=46
	unsigned short _mFlags; // size=0, offset=48
	unsigned short mExp; // size=0, offset=50
	unsigned short mMagicRes; // size=0, offset=52
	char _mMTidx; // size=0, offset=54
	char _mmode; // size=0, offset=55
	char _mx; // size=0, offset=56
	char _my; // size=0, offset=57
	char _mfutx; // size=0, offset=58
	char _mfuty; // size=0, offset=59
	char _moldx; // size=0, offset=60
	char _moldy; // size=0, offset=61
	char _mxoff; // size=0, offset=62
	char _myoff; // size=0, offset=63
	char _mdir; // size=0, offset=64
	char _menemy; // size=0, offset=65
	char _mAnimDelay; // size=0, offset=66
	char _mAnimCnt; // size=0, offset=67
	char _mAnimLen; // size=0, offset=68
	char _mAnimFrame; // size=0, offset=69
	char _mAFNum; // size=0, offset=70
	char _lastx; // size=0, offset=71
	char _lasty; // size=0, offset=72
	char _udeadval; // size=0, offset=73
	char mWhoHit; // size=0, offset=74
	char mLevel; // size=0, offset=75
	char mArmorClass; // size=0, offset=76
	unsigned char _mgoal; // size=0, offset=77
	unsigned char _pathcount; // size=0, offset=78
	unsigned char _menemyx; // size=0, offset=79
	unsigned char _menemyy; // size=0, offset=80
	unsigned char _meflag; // size=0, offset=81
	unsigned char _mAi; // size=0, offset=82
	unsigned char _mint; // size=0, offset=83
	unsigned char _msquelch; // size=0, offset=84
	unsigned char _uniqtype; // size=0, offset=85
	unsigned char _uniqtrans; // size=0, offset=86
	unsigned char mHit; // size=0, offset=87
	unsigned char mMinDamage; // size=0, offset=88
	unsigned char mMaxDamage; // size=0, offset=89
	unsigned char mHit2; // size=0, offset=90
	unsigned char mMinDamage2; // size=0, offset=91
	unsigned char mMaxDamage2; // size=0, offset=92
	unsigned char leader; // size=0, offset=93
	unsigned char leaderflag; // size=0, offset=94
	unsigned char unpackfilesize; // size=0, offset=95
	unsigned char mlid; // size=0, offset=96
	char Action; // size=0, offset=97
	char _Wandering; // size=0, offset=98
	char _mDelFlag; // size=0, offset=99
	int mName; // size=0, offset=100
	struct CMonster *MType; // size=28, offset=104
	struct MonsterData *MData; // size=60, offset=108
};

struct PortalStruct // hashcode: 0x00CF1BC5 (dec: 13573061)
{
	int ltype; // size=0, offset=0
	unsigned char open; // size=0, offset=4
	char x; // size=0, offset=5
	char y; // size=0, offset=6
	char level; // size=0, offset=7
	unsigned char setlvl; // size=0, offset=8
};

struct TCmd // hashcode: 0x588A1E8C (dec: 1485446796)
{
	unsigned char bCmd; // size=0, offset=0
};

struct TCmdLoc // hashcode: 0x88BF3465 (dec: -2000735131)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
};

struct TCmdLocParam1 // hashcode: 0x9E576788 (dec: -1638439032)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned short wParam1; // size=0, offset=4
};

struct TCmdLocParam2 // hashcode: 0xF6FDEE52 (dec: -151130542)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned short wParam1; // size=0, offset=4
	unsigned short wParam2; // size=0, offset=6
};

struct TCmdLocParam3 // hashcode: 0xE0FFD830 (dec: -520103888)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned short wParam1; // size=0, offset=4
	unsigned short wParam2; // size=0, offset=6
	unsigned short wParam3; // size=0, offset=8
};

struct TCmdParam1 // hashcode: 0x8C4D5E1E (dec: -1941086690)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wParam1; // size=0, offset=2
};

struct TCmdParam2 // hashcode: 0x3AC62456 (dec: 986063958)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wParam1; // size=0, offset=2
	unsigned short wParam2; // size=0, offset=4
};

struct TCmdParam3 // hashcode: 0x523F5374 (dec: 1379881844)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wParam1; // size=0, offset=2
	unsigned short wParam2; // size=0, offset=4
	unsigned short wParam3; // size=0, offset=6
};

struct TCmdGolem // hashcode: 0x17FB4FDC (dec: 402345948)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char _mx; // size=0, offset=1
	unsigned char _my; // size=0, offset=2
	unsigned char _mdir; // size=0, offset=3
	unsigned char _menemy; // size=0, offset=4
	unsigned char _currlevel; // size=0, offset=5
	short _mhitpoints; // size=0, offset=6
};

struct TCmdQuest // hashcode: 0x4BA10DF1 (dec: 1268846065)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char q; // size=0, offset=1
	unsigned char qstate; // size=0, offset=2
	unsigned char qlog; // size=0, offset=3
	unsigned char qvar1; // size=0, offset=4
};

struct TCmdGItem // hashcode: 0x6764D4F0 (dec: 1734661360)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bMaster; // size=0, offset=1
	unsigned char bPnum; // size=0, offset=2
	unsigned char bCursitem; // size=0, offset=3
	unsigned char bLevel; // size=0, offset=4
	unsigned char x; // size=0, offset=5
	unsigned char y; // size=0, offset=6
	unsigned char bId; // size=0, offset=7
	unsigned char bDur; // size=0, offset=8
	unsigned char bMDur; // size=0, offset=9
	unsigned char bCh; // size=0, offset=10
	unsigned char bMCh; // size=0, offset=11
	unsigned short wValue; // size=0, offset=12
	unsigned short wIndx; // size=0, offset=14
	unsigned short wCI; // size=0, offset=16
	unsigned long dwSeed; // size=0, offset=20
	unsigned long dwTime; // size=0, offset=24
};

struct TCmdPItem // hashcode: 0x77E2D943 (dec: 2011355459)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char x; // size=0, offset=1
	unsigned char y; // size=0, offset=2
	unsigned char bId; // size=0, offset=3
	unsigned char bDur; // size=0, offset=4
	unsigned char bMDur; // size=0, offset=5
	unsigned char bCh; // size=0, offset=6
	unsigned char bMCh; // size=0, offset=7
	unsigned short wValue; // size=0, offset=8
	unsigned short wIndx; // size=0, offset=10
	unsigned short wCI; // size=0, offset=12
	unsigned long dwSeed; // size=0, offset=16
};

struct TCmdChItem // hashcode: 0x13D14CB6 (dec: 332483766)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bLoc; // size=0, offset=1
	unsigned short wIndx; // size=0, offset=2
	unsigned short wCI; // size=0, offset=4
	unsigned long dwSeed; // size=0, offset=8
	unsigned char bId; // size=0, offset=12
};

struct TCmdDelItem // hashcode: 0xE5DEE737 (dec: -438376649)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bLoc; // size=0, offset=1
};

struct TCmdDamage // hashcode: 0xBA8A2438 (dec: -1165351880)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bPlr; // size=0, offset=1
	unsigned long dwDam; // size=0, offset=4
};

struct TCmdPlrInfoHdr // hashcode: 0x87FFF5DF (dec: -2013268513)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned short wOffset; // size=0, offset=2
	unsigned short wBytes; // size=0, offset=4
};

struct TCmdString // hashcode: 0xC2AFC66E (dec: -1028667794)
{
	unsigned char bCmd; // size=0, offset=0
	char str[80]; // size=80, offset=1
};

struct TFakeCmdPlr // hashcode: 0x00F4FA1E (dec: 16054814)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bPlr; // size=0, offset=1
};

struct TFakeDropPlr // hashcode: 0xF7EB6FA2 (dec: -135565406)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bPlr; // size=0, offset=1
	unsigned long dwReason; // size=0, offset=4
};

struct TSyncHeader // hashcode: 0x9BC7B51D (dec: -1681410787)
{
	unsigned char bCmd; // size=0, offset=0
	unsigned char bLevel; // size=0, offset=1
	unsigned short wLen; // size=0, offset=2
	unsigned char bObjId; // size=0, offset=4
	unsigned char bObjCmd; // size=0, offset=5
	unsigned char bItemI; // size=0, offset=6
	unsigned char bItemX; // size=0, offset=7
	unsigned char bItemY; // size=0, offset=8
	unsigned short wItemIndx; // size=0, offset=10
	unsigned short wItemCI; // size=0, offset=12
	int dwItemSeed; // size=0, offset=16
	unsigned char bItemId; // size=0, offset=20
	unsigned char bItemDur; // size=0, offset=21
	unsigned char bItemMDur; // size=0, offset=22
	unsigned char bItemCh; // size=0, offset=23
	unsigned char bItemMCh; // size=0, offset=24
	unsigned short wItemVal; // size=0, offset=26
	unsigned long dwItemBuff; // size=0, offset=28
	unsigned char bPInvLoc; // size=0, offset=32
	unsigned short wPInvIndx; // size=0, offset=34
	unsigned short wPInvCI; // size=0, offset=36
	int dwPInvSeed; // size=0, offset=40
	unsigned char bPInvId; // size=0, offset=44
};

struct TSyncMonster // hashcode: 0x1B7575E1 (dec: 460682721)
{
	unsigned char _mndx; // size=0, offset=0
	unsigned char _mx; // size=0, offset=1
	unsigned char _my; // size=0, offset=2
	unsigned char _menemy; // size=0, offset=3
	unsigned char _mdelta; // size=0, offset=4
};

struct TPktHdr // hashcode: 0x62573C07 (dec: 1649884167)
{
	unsigned char px; // size=0, offset=0
	unsigned char py; // size=0, offset=1
	unsigned char targx; // size=0, offset=2
	unsigned char targy; // size=0, offset=3
	unsigned long php; // size=0, offset=4
	unsigned long pmhp; // size=0, offset=8
	unsigned char bstr; // size=0, offset=12
	unsigned char bmag; // size=0, offset=13
	unsigned char bdex; // size=0, offset=14
	unsigned short wCheck; // size=0, offset=16
	unsigned short wLen; // size=0, offset=18
};

struct TPkt // hashcode: 0x37477C5C (dec: 927431772)
{
	struct TPktHdr hdr; // size=20, offset=0
	unsigned char body[492]; // size=492, offset=20
};

struct DMonsterStr // hashcode: 0x3B1F579E (dec: 991909790)
{
	unsigned char _mx; // size=0, offset=0
	unsigned char _my; // size=0, offset=1
	unsigned char _mdir; // size=0, offset=2
	unsigned char _menemy; // size=0, offset=3
	short _mhitpoints; // size=0, offset=4
};

struct DObjectStr // hashcode: 0xD74E328F (dec: -682741105)
{
	unsigned char bCmd; // size=0, offset=0
};

struct DLevel // hashcode: 0xC32B9ED8 (dec: -1020551464)
{
	struct TCmdPItem item[127]; // size=2540, offset=0
	struct DObjectStr object[127]; // size=127, offset=2540
	struct DMonsterStr monster[200]; // size=1200, offset=2668
};

struct LocalLevel // hashcode: 0x26E20414 (dec: 652346388)
{
	unsigned char automapsv[5][40]; // size=200, offset=0
};

struct DPortal // hashcode: 0x9414D89F (dec: -1810573153)
{
	unsigned char x; // size=0, offset=0
	unsigned char y; // size=0, offset=1
	unsigned char level; // size=0, offset=2
	unsigned char ltype; // size=0, offset=3
	unsigned char setlvl; // size=0, offset=4
};

struct MultiQuests // hashcode: 0x1C87ADFF (dec: 478653951)
{
	unsigned char qstate; // size=0, offset=0
	unsigned char qlog; // size=0, offset=1
	unsigned char qvar1; // size=0, offset=2
};

struct DJunk // hashcode: 0x00E37CAF (dec: 14908591)
{
	struct DPortal portal[2]; // size=10, offset=0
	struct MultiQuests quests[4]; // size=12, offset=10
};

struct STextStruct // hashcode: 0x7D678089 (dec: 2103935113)
{
	char _sx; // size=0, offset=0
	char _syoff; // size=0, offset=1
	char _sstr[128]; // size=128, offset=2
	unsigned char _sjust; // size=0, offset=130
	char _sclr; // size=0, offset=131
	unsigned char _sline; // size=0, offset=132
	unsigned char _ssel; // size=0, offset=133
	int _sval; // size=0, offset=136
};

struct CPauseMessages // hashcode: 0x69CDB8D0 (dec: 1775089872)
{
	int PadNum; // size=0, offset=0
	struct __vtbl_ptr_type (*_vf)[11]; // size=4, offset=4
};

struct CTempPauseMessage // hashcode: 0x5B041093 (dec: 1526993043)
{
	struct CPauseMessages CPauseMessages; // size=8, offset=0
	struct TextDat *TData; // size=108, offset=8
};

struct FontItem // hashcode: 0x688C1E3F (dec: 1754013247)
{
	char ch; // size=0, offset=0
	unsigned char Offset; // size=0, offset=1
};

struct FontTab // hashcode: 0xCBD9D0EC (dec: -874917652)
{
	struct CFont *Fnt; // size=536, offset=0
	struct FontItem *Items; // size=2, offset=4
	int NumOfItems; // size=0, offset=8
	int FrameBase; // size=0, offset=12
};

struct TNQ // hashcode: 0x0C24BF01 (dec: 203734785)
{
	unsigned char _qsttype; // size=0, offset=0
	unsigned char _qstmsg; // size=0, offset=1
	unsigned char _qstmsgact; // size=0, offset=2
};

struct TownerStruct // hashcode: 0x528083CA (dec: 1384154058)
{
	int _tmode; // size=0, offset=0
	int _ttype; // size=0, offset=4
	int _tx; // size=0, offset=8
	int _ty; // size=0, offset=12
	long _txoff; // size=0, offset=16
	long _tyoff; // size=0, offset=20
	long _txvel; // size=0, offset=24
	long _tyvel; // size=0, offset=28
	int _tdir; // size=0, offset=32
	int _tAnimDelay; // size=0, offset=36
	int _tAnimCnt; // size=0, offset=40
	int _tAnimLen; // size=0, offset=44
	int _tAnimFrame; // size=0, offset=48
	int _tAnimFrameCnt; // size=0, offset=52
	char _tAnimOrder; // size=0, offset=56
	long _tAnimWidth; // size=0, offset=60
	long _tAnimWidth2; // size=0, offset=64
	int _tTenPer; // size=0, offset=68
	int _teflag; // size=0, offset=72
	int _tbtcnt; // size=0, offset=76
	unsigned char _tSelFlag; // size=0, offset=80
	unsigned char _tMsgSaid; // size=0, offset=81
	struct TNQ qsts[16]; // size=48, offset=82
	int _tSeed; // size=0, offset=132
	long _tVar1; // size=0, offset=136
	long _tVar2; // size=0, offset=140
	long _tVar3; // size=0, offset=144
	long _tVar4; // size=0, offset=148
	char _tName[32]; // size=32, offset=152
	unsigned char (*_tNAnim[8]); // size=32, offset=184
	int _tNFrames; // size=0, offset=216
	unsigned char *_tNData; // size=0, offset=220
};

struct QuestTalkData // hashcode: 0xD63DE73F (dec: -700586177)
{
	int _qinfra; // size=0, offset=0
	int _qblkm; // size=0, offset=4
	int _qgarb; // size=0, offset=8
	int _qzhar; // size=0, offset=12
	int _qveil; // size=0, offset=16
	int _qmod; // size=0, offset=20
	int _qbutch; // size=0, offset=24
	int _qbol; // size=0, offset=28
	int _qblind; // size=0, offset=32
	int _qblood; // size=0, offset=36
	int _qanvil; // size=0, offset=40
	int _qwarlrd; // size=0, offset=44
	int _qking; // size=0, offset=48
	int _qpw; // size=0, offset=52
	int _qbone; // size=0, offset=56
	int _qvb; // size=0, offset=60
};

struct LightListStruct // hashcode: 0xBF0DC9A7 (dec: -1089615449)
{
	char _lx; // size=0, offset=0
	char _ly; // size=0, offset=1
	unsigned short _lradius; // size=0, offset=2
	char _lid; // size=0, offset=4
	unsigned char _ldel; // size=0, offset=5
	unsigned char _lunflag; // size=0, offset=6
	char _lunx; // size=0, offset=7
	char _luny; // size=0, offset=8
	char _lunr; // size=0, offset=9
	char _xoff; // size=0, offset=10
	char _yoff; // size=0, offset=11
	unsigned char _lflags; // size=0, offset=12
};

struct LightListStruct2 // hashcode: 0xD2EF8DC5 (dec: -756052539)
{
	char _lx; // size=0, offset=0
	char _ly; // size=0, offset=1
	unsigned short _lradius; // size=0, offset=2
	char _lid; // size=0, offset=4
	unsigned char _ldel; // size=0, offset=5
	char _xoff; // size=0, offset=6
	char _yoff; // size=0, offset=7
};

struct DeadStruct // hashcode: 0x7C3A6AB2 (dec: 2084203186)
{
	int _deadtype; // size=0, offset=0
	int _deadFrame; // size=0, offset=4
	char _deadtrans; // size=0, offset=8
};

struct TownToCreature // hashcode: 0x7A7BDB36 (dec: 2054937398)
{
	unsigned char GameEqu; // size=0, offset=0
	unsigned char CreatureEquate; // size=0, offset=1
};

struct RGBPOLY // hashcode: 0xA6C24B59 (dec: -1497216167)
{
	int r1; // size=0, offset=0
	int g1; // size=0, offset=4
	int b1; // size=0, offset=8
	int r2; // size=0, offset=12
	int g2; // size=0, offset=16
	int b2; // size=0, offset=20
	int r3; // size=0, offset=24
	int g3; // size=0, offset=28
	int b3; // size=0, offset=32
	int r4; // size=0, offset=36
	int g4; // size=0, offset=40
	int b4; // size=0, offset=44
};

struct Overlay // hashcode: 0x89C73AF4 (dec: -1983431948)
{
	unsigned char *Addr; // size=0, offset=0
	int Size; // size=0, offset=4
	char *FileName; // size=0, offset=8
	enum OVER_TYPE Over; // size=4, offset=12
};

struct TMenuItem // hashcode: 0x9198C500 (dec: -1852259072)
{
	unsigned long dwFlags; // size=0, offset=0
	int pszStr; // size=0, offset=4
	void (*fnMenu)(); // size=0, offset=8
};

struct SpellData // hashcode: 0x6CCAD53D (dec: 1825232189)
{
	unsigned char sName; // size=0, offset=0
	unsigned char sManaCost; // size=0, offset=1
	unsigned char sType; // size=0, offset=2
	int sNameText; // size=0, offset=4
	int sSkillText; // size=0, offset=8
	int sBookLvl; // size=0, offset=12
	int sStaffLvl; // size=0, offset=16
	unsigned char sTargeted; // size=0, offset=20
	unsigned char sTownSpell; // size=0, offset=21
	int sMinInt; // size=0, offset=24
	unsigned char sSFX; // size=0, offset=28
	unsigned char sMissiles[3]; // size=3, offset=29
	unsigned char sManaAdj; // size=0, offset=32
	unsigned char sMinMana; // size=0, offset=33
	int sStaffMin; // size=0, offset=36
	int sStaffMax; // size=0, offset=40
	int sBookCost; // size=0, offset=44
	int sStaffCost; // size=0, offset=48
};

struct GsCOORD2PARAM // hashcode: 0x05F80419 (dec: 100140057)
{
	struct VECTOR scale; // size=16, offset=0
	struct SVECTOR rotate; // size=8, offset=16
	struct VECTOR trans; // size=16, offset=24
};

struct _GsCOORDINATE2 // hashcode: 0x8220279B (dec: -2111821925)
{
	unsigned long flg; // size=0, offset=0
	struct MATRIX coord; // size=32, offset=4
	struct MATRIX workm; // size=32, offset=36
	struct GsCOORD2PARAM *param; // size=40, offset=68
	struct _GsCOORDINATE2 *super; // size=80, offset=72
	struct _GsCOORDINATE2 *sub; // size=80, offset=76
};

struct GsVIEW2 // hashcode: 0xA12511A4 (dec: -1591406172)
{
	struct MATRIX view; // size=32, offset=0
	struct _GsCOORDINATE2 *super; // size=80, offset=32
};

struct GsRVIEW2 // hashcode: 0x726B108D (dec: 1919619213)
{
	long vpx; // size=0, offset=0
	long vpy; // size=0, offset=4
	long vpz; // size=0, offset=8
	long vrx; // size=0, offset=12
	long vry; // size=0, offset=16
	long vrz; // size=0, offset=20
	long rz; // size=0, offset=24
	struct _GsCOORDINATE2 *super; // size=80, offset=28
};

struct GsF_LIGHT // hashcode: 0xB87AAB52 (dec: -1199920302)
{
	int vx; // size=0, offset=0
	int vy; // size=0, offset=4
	int vz; // size=0, offset=8
	unsigned char r; // size=0, offset=12
	unsigned char g; // size=0, offset=13
	unsigned char b; // size=0, offset=14
};

struct GsOT_TAG // hashcode: 0x04BF36BF (dec: 79640255)
{
	unsigned int p; // size=24, offset=0
	unsigned char num; // size=8, offset=24
};

struct GsOT // hashcode: 0x11A553FC (dec: 296047612)
{
	unsigned long length; // size=0, offset=0
	struct GsOT_TAG *org; // size=4, offset=4
	unsigned long offset; // size=0, offset=8
	unsigned long point; // size=0, offset=12
	struct GsOT_TAG *tag; // size=4, offset=16
};

struct GsDOBJ2 // hashcode: 0xFCD346DF (dec: -53262625)
{
	unsigned long attribute; // size=0, offset=0
	struct _GsCOORDINATE2 *coord2; // size=80, offset=4
	unsigned long *tmd; // size=0, offset=8
	unsigned long id; // size=0, offset=12
};

struct GsDOBJ3 // hashcode: 0xB9FB74A4 (dec: -1174702940)
{
	unsigned long attribute; // size=0, offset=0
	struct _GsCOORDINATE2 *coord2; // size=80, offset=4
	unsigned long *pmd; // size=0, offset=8
	unsigned long *base; // size=0, offset=12
	unsigned long *sv; // size=0, offset=16
	unsigned long id; // size=0, offset=20
};

struct GsDOBJ5 // hashcode: 0xED490C36 (dec: -313979850)
{
	unsigned long attribute; // size=0, offset=0
	struct _GsCOORDINATE2 *coord2; // size=80, offset=4
	unsigned long *tmd; // size=0, offset=8
	unsigned long *packet; // size=0, offset=12
	unsigned long id; // size=0, offset=16
};

struct GsSPRITE // hashcode: 0x7D9037C7 (dec: 2106603463)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	unsigned short w; // size=0, offset=8
	unsigned short h; // size=0, offset=10
	unsigned short tpage; // size=0, offset=12
	unsigned char u; // size=0, offset=14
	unsigned char v; // size=0, offset=15
	short cx; // size=0, offset=16
	short cy; // size=0, offset=18
	unsigned char r; // size=0, offset=20
	unsigned char g; // size=0, offset=21
	unsigned char b; // size=0, offset=22
	short mx; // size=0, offset=24
	short my; // size=0, offset=26
	short scalex; // size=0, offset=28
	short scaley; // size=0, offset=30
	long rotate; // size=0, offset=32
};

struct GsSPARRAY // hashcode: 0xCC302038 (dec: -869261256)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	struct DR_MODE mode[2]; // size=24, offset=8
	struct SPRT packet[2]; // size=40, offset=32
};

struct GsCELL // hashcode: 0x0B9D03EE (dec: 194839534)
{
	unsigned char u; // size=0, offset=0
	unsigned char v; // size=0, offset=1
	unsigned short cba; // size=0, offset=2
	unsigned short flag; // size=0, offset=4
	unsigned short tpage; // size=0, offset=6
};

struct GsMAP // hashcode: 0x1C8E6DE3 (dec: 479096291)
{
	unsigned char cellw; // size=0, offset=0
	unsigned char cellh; // size=0, offset=1
	unsigned short ncellw; // size=0, offset=2
	unsigned short ncellh; // size=0, offset=4
	struct GsCELL *base; // size=8, offset=8
	unsigned short *index; // size=0, offset=12
};

struct GsBG // hashcode: 0x4985A499 (dec: 1233495193)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	short w; // size=0, offset=8
	short h; // size=0, offset=10
	short scrollx; // size=0, offset=12
	short scrolly; // size=0, offset=14
	unsigned char r; // size=0, offset=16
	unsigned char g; // size=0, offset=17
	unsigned char b; // size=0, offset=18
	struct GsMAP *map; // size=16, offset=20
	short mx; // size=0, offset=24
	short my; // size=0, offset=26
	short scalex; // size=0, offset=28
	short scaley; // size=0, offset=30
	long rotate; // size=0, offset=32
};

struct GsLINE // hashcode: 0x6BECF2A1 (dec: 1810690721)
{
	unsigned long attribute; // size=0, offset=0
	short x0; // size=0, offset=4
	short y0; // size=0, offset=6
	short x1; // size=0, offset=8
	short y1; // size=0, offset=10
	unsigned char r; // size=0, offset=12
	unsigned char g; // size=0, offset=13
	unsigned char b; // size=0, offset=14
};

struct GsGLINE // hashcode: 0x6B182E9B (dec: 1796746907)
{
	unsigned long attribute; // size=0, offset=0
	short x0; // size=0, offset=4
	short y0; // size=0, offset=6
	short x1; // size=0, offset=8
	short y1; // size=0, offset=10
	unsigned char r0; // size=0, offset=12
	unsigned char g0; // size=0, offset=13
	unsigned char b0; // size=0, offset=14
	unsigned char r1; // size=0, offset=15
	unsigned char g1; // size=0, offset=16
	unsigned char b1; // size=0, offset=17
};

struct GsBOXF // hashcode: 0xD289B35D (dec: -762727587)
{
	unsigned long attribute; // size=0, offset=0
	short x; // size=0, offset=4
	short y; // size=0, offset=6
	unsigned short w; // size=0, offset=8
	unsigned short h; // size=0, offset=10
	unsigned char r; // size=0, offset=12
	unsigned char g; // size=0, offset=13
	unsigned char b; // size=0, offset=14
};

struct GsFOGPARAM // hashcode: 0xB2DAAC46 (dec: -1294291898)
{
	short dqa; // size=0, offset=0
	long dqb; // size=0, offset=4
	unsigned char rfc; // size=0, offset=8
	unsigned char gfc; // size=0, offset=9
	unsigned char bfc; // size=0, offset=10
};

struct GsIMAGE // hashcode: 0xD410A686 (dec: -737106298)
{
	unsigned long pmode; // size=0, offset=0
	short px; // size=0, offset=4
	short py; // size=0, offset=6
	unsigned short pw; // size=0, offset=8
	unsigned short ph; // size=0, offset=10
	unsigned long *pixel; // size=0, offset=12
	short cx; // size=0, offset=16
	short cy; // size=0, offset=18
	unsigned short cw; // size=0, offset=20
	unsigned short ch; // size=0, offset=22
	unsigned long *clut; // size=0, offset=24
};

struct _GsPOSITION // hashcode: 0xC8800D56 (dec: -931132074)
{
	short offx; // size=0, offset=0
	short offy; // size=0, offset=2
};

struct GsOBJTABLE2 // hashcode: 0x781A2A57 (dec: 2014980695)
{
	struct GsDOBJ2 *top; // size=16, offset=0
	int nobj; // size=0, offset=4
	int maxobj; // size=0, offset=8
};

struct _GsFCALL // hashcode: 0x4CDFA82A (dec: 1289725994)
{
	unsigned char ((**f3[2][3]))(); // size=24, offset=0
	unsigned char ((**nf3[2]))(); // size=8, offset=24
	unsigned char ((**g3[2][3]))(); // size=24, offset=32
	unsigned char ((**ng3[2]))(); // size=8, offset=56
	unsigned char ((**tf3[2][3]))(); // size=24, offset=64
	unsigned char ((**ntf3[2]))(); // size=8, offset=88
	unsigned char ((**tg3[2][3]))(); // size=24, offset=96
	unsigned char ((**ntg3[2]))(); // size=8, offset=120
	unsigned char ((**f4[2][3]))(); // size=24, offset=128
	unsigned char ((**nf4[2]))(); // size=8, offset=152
	unsigned char ((**g4[2][3]))(); // size=24, offset=160
	unsigned char ((**ng4[2]))(); // size=8, offset=184
	unsigned char ((**tf4[2][3]))(); // size=24, offset=192
	unsigned char ((**ntf4[2]))(); // size=8, offset=216
	unsigned char ((**tg4[2][3]))(); // size=24, offset=224
	unsigned char ((**ntg4[2]))(); // size=8, offset=248
	unsigned char ((**f3g[3]))(); // size=12, offset=256
	unsigned char ((**g3g[3]))(); // size=12, offset=268
	unsigned char ((**f4g[3]))(); // size=12, offset=280
	unsigned char ((**g4g[3]))(); // size=12, offset=292
};

struct TMD_P_F3 // hashcode: 0xEE22D877 (dec: -299706249)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short v1; // size=0, offset=12
	unsigned short v2; // size=0, offset=14
};

struct TMD_P_G3 // hashcode: 0x7D58CA0C (dec: 2102970892)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short n1; // size=0, offset=12
	unsigned short v1; // size=0, offset=14
	unsigned short n2; // size=0, offset=16
	unsigned short v2; // size=0, offset=18
};

struct TMD_P_F3G // hashcode: 0x5719F332 (dec: 1461318450)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short v1; // size=0, offset=20
	unsigned short v2; // size=0, offset=22
};

struct TMD_P_G3G // hashcode: 0x30C8C084 (dec: 818462852)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short n1; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short n2; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
};

struct TMD_P_NF3 // hashcode: 0xEA3F08E4 (dec: -364967708)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short v0; // size=0, offset=8
	unsigned short v1; // size=0, offset=10
	unsigned short v2; // size=0, offset=12
	unsigned short p; // size=0, offset=14
};

struct TMD_P_NG3 // hashcode: 0xF4B0D111 (dec: -189738735)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char p1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char p2; // size=0, offset=15
	unsigned short v0; // size=0, offset=16
	unsigned short v1; // size=0, offset=18
	unsigned short v2; // size=0, offset=20
	unsigned short p; // size=0, offset=22
};

struct TMD_P_F4 // hashcode: 0x36464512 (dec: 910574866)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short v1; // size=0, offset=12
	unsigned short v2; // size=0, offset=14
	unsigned short v3; // size=0, offset=16
	unsigned short p; // size=0, offset=18
};

struct TMD_P_G4 // hashcode: 0x304F5C32 (dec: 810507314)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short n0; // size=0, offset=8
	unsigned short v0; // size=0, offset=10
	unsigned short n1; // size=0, offset=12
	unsigned short v1; // size=0, offset=14
	unsigned short n2; // size=0, offset=16
	unsigned short v2; // size=0, offset=18
	unsigned short n3; // size=0, offset=20
	unsigned short v3; // size=0, offset=22
};

struct TMD_P_F4G // hashcode: 0x2F610A56 (dec: 794888790)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char dummy3; // size=0, offset=19
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short v1; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
	unsigned short v3; // size=0, offset=28
	unsigned short dummy4; // size=0, offset=30
};

struct TMD_P_G4G // hashcode: 0x2F2620C0 (dec: 791027904)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char dummy1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char dummy2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char dummy3; // size=0, offset=19
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short n1; // size=0, offset=24
	unsigned short v1; // size=0, offset=26
	unsigned short n2; // size=0, offset=28
	unsigned short v2; // size=0, offset=30
	unsigned short n3; // size=0, offset=32
	unsigned short v3; // size=0, offset=34
};

struct TMD_P_NF4 // hashcode: 0xAD1EA9AB (dec: -1390499413)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned short v0; // size=0, offset=8
	unsigned short v1; // size=0, offset=10
	unsigned short v2; // size=0, offset=12
	unsigned short v3; // size=0, offset=14
};

struct TMD_P_NG4 // hashcode: 0x8ED30329 (dec: -1898773719)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char r0; // size=0, offset=4
	unsigned char g0; // size=0, offset=5
	unsigned char b0; // size=0, offset=6
	unsigned char code; // size=0, offset=7
	unsigned char r1; // size=0, offset=8
	unsigned char g1; // size=0, offset=9
	unsigned char b1; // size=0, offset=10
	unsigned char p1; // size=0, offset=11
	unsigned char r2; // size=0, offset=12
	unsigned char g2; // size=0, offset=13
	unsigned char b2; // size=0, offset=14
	unsigned char p2; // size=0, offset=15
	unsigned char r3; // size=0, offset=16
	unsigned char g3; // size=0, offset=17
	unsigned char b3; // size=0, offset=18
	unsigned char p3; // size=0, offset=19
	unsigned short v0; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short v2; // size=0, offset=24
	unsigned short v3; // size=0, offset=26
};

struct TMD_P_TF3 // hashcode: 0x8EE1F894 (dec: -1897793388)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p; // size=0, offset=14
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short v1; // size=0, offset=20
	unsigned short v2; // size=0, offset=22
};

struct TMD_P_TG3 // hashcode: 0x6C741CE5 (dec: 1819548901)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p; // size=0, offset=14
	unsigned short n0; // size=0, offset=16
	unsigned short v0; // size=0, offset=18
	unsigned short n1; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short n2; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
};

struct TMD_P_TNF3 // hashcode: 0xE9A1565C (dec: -375302564)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char r0; // size=0, offset=16
	unsigned char g0; // size=0, offset=17
	unsigned char b0; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	unsigned short v0; // size=0, offset=20
	unsigned short v1; // size=0, offset=22
	unsigned short v2; // size=0, offset=24
	unsigned short p2; // size=0, offset=26
};

struct TMD_P_TNG3 // hashcode: 0xD170434F (dec: -781171889)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char r0; // size=0, offset=16
	unsigned char g0; // size=0, offset=17
	unsigned char b0; // size=0, offset=18
	unsigned char p1; // size=0, offset=19
	unsigned char r1; // size=0, offset=20
	unsigned char g1; // size=0, offset=21
	unsigned char b1; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	unsigned char r2; // size=0, offset=24
	unsigned char g2; // size=0, offset=25
	unsigned char b2; // size=0, offset=26
	unsigned char p3; // size=0, offset=27
	unsigned short v0; // size=0, offset=28
	unsigned short v1; // size=0, offset=30
	unsigned short v2; // size=0, offset=32
	unsigned short p4; // size=0, offset=34
};

struct TMD_P_TF4 // hashcode: 0xE693190B (dec: -426567413)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short v1; // size=0, offset=24
	unsigned short v2; // size=0, offset=26
	unsigned short v3; // size=0, offset=28
	unsigned short p2; // size=0, offset=30
};

struct TMD_P_TG4 // hashcode: 0x47B6A370 (dec: 1203151728)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned short n0; // size=0, offset=20
	unsigned short v0; // size=0, offset=22
	unsigned short n1; // size=0, offset=24
	unsigned short v1; // size=0, offset=26
	unsigned short n2; // size=0, offset=28
	unsigned short v2; // size=0, offset=30
	unsigned short n3; // size=0, offset=32
	unsigned short v3; // size=0, offset=34
};

struct TMD_P_TNF4 // hashcode: 0x1D597F8E (dec: 492404622)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned char r0; // size=0, offset=20
	unsigned char g0; // size=0, offset=21
	unsigned char b0; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	unsigned short v0; // size=0, offset=24
	unsigned short v1; // size=0, offset=26
	unsigned short v2; // size=0, offset=28
	unsigned short v3; // size=0, offset=30
};

struct TMD_P_TNG4 // hashcode: 0x7842A8C6 (dec: 2017634502)
{
	unsigned char out; // size=0, offset=0
	unsigned char in; // size=0, offset=1
	unsigned char dummy; // size=0, offset=2
	unsigned char cd; // size=0, offset=3
	unsigned char tu0; // size=0, offset=4
	unsigned char tv0; // size=0, offset=5
	unsigned short clut; // size=0, offset=6
	unsigned char tu1; // size=0, offset=8
	unsigned char tv1; // size=0, offset=9
	unsigned short tpage; // size=0, offset=10
	unsigned char tu2; // size=0, offset=12
	unsigned char tv2; // size=0, offset=13
	unsigned short p0; // size=0, offset=14
	unsigned char tu3; // size=0, offset=16
	unsigned char tv3; // size=0, offset=17
	unsigned short p1; // size=0, offset=18
	unsigned char r0; // size=0, offset=20
	unsigned char g0; // size=0, offset=21
	unsigned char b0; // size=0, offset=22
	unsigned char p2; // size=0, offset=23
	unsigned char r1; // size=0, offset=24
	unsigned char g1; // size=0, offset=25
	unsigned char b1; // size=0, offset=26
	unsigned char p3; // size=0, offset=27
	unsigned char r2; // size=0, offset=28
	unsigned char g2; // size=0, offset=29
	unsigned char b2; // size=0, offset=30
	unsigned char p4; // size=0, offset=31
	unsigned char r3; // size=0, offset=32
	unsigned char g3; // size=0, offset=33
	unsigned char b3; // size=0, offset=34
	unsigned char p5; // size=0, offset=35
	unsigned short v0; // size=0, offset=36
	unsigned short v1; // size=0, offset=38
	unsigned short v2; // size=0, offset=40
	unsigned short v3; // size=0, offset=42
};

struct TMD_STRUCT // hashcode: 0x8F113A05 (dec: -1894696443)
{
	unsigned long *vertop; // size=0, offset=0
	unsigned long vern; // size=0, offset=4
	unsigned long *nortop; // size=0, offset=8
	unsigned long norn; // size=0, offset=12
	unsigned long *primtop; // size=0, offset=16
	unsigned long primn; // size=0, offset=20
	unsigned long scale; // size=0, offset=24
};

struct VERT // hashcode: 0x1F230705 (dec: 522389253)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
	short vz; // size=0, offset=4
	unsigned char tu; // size=0, offset=6
	unsigned char tv; // size=0, offset=7
};

struct VERTC // hashcode: 0x10C6D55C (dec: 281466204)
{
	short vx; // size=0, offset=0
	short vy; // size=0, offset=2
	short vz; // size=0, offset=4
	unsigned char tu; // size=0, offset=6
	unsigned char tv; // size=0, offset=7
	struct CVECTOR col; // size=4, offset=8
};

struct GsADIV_FT4 // hashcode: 0xE8C7E54F (dec: -389552817)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_FT4 si; // size=40, offset=60
};

struct GsADIV_P_FT4 // hashcode: 0xC8B1D5E7 (dec: -927869465)
{
	struct VERT vt[4]; // size=32, offset=0
};

struct GsADIV_GT4 // hashcode: 0x0626264F (dec: 103163471)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_GT4 si; // size=52, offset=60
};

struct GsADIV_P_GT4 // hashcode: 0xD553F42B (dec: -715918293)
{
	struct VERTC vt[4]; // size=48, offset=0
};

struct GsADIV_G4 // hashcode: 0xB7CC1C1C (dec: -1211360228)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_G4 si; // size=36, offset=60
};

struct GsADIV_F4 // hashcode: 0x9DE0A820 (dec: -1646221280)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg0; // size=0, offset=36
	long flg; // size=0, offset=40
	short minx; // size=0, offset=44
	short miny; // size=0, offset=46
	short maxx; // size=0, offset=48
	short maxy; // size=0, offset=50
	short hwd0; // size=0, offset=52
	short vwd0; // size=0, offset=54
	unsigned long *tag; // size=0, offset=56
	struct POLY_F4 si; // size=24, offset=60
};

struct GsADIV_FT3 // hashcode: 0xF0165441 (dec: -266972095)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_FT3 si; // size=32, offset=56
};

struct GsADIV_P_FT3 // hashcode: 0x1120C992 (dec: 287361426)
{
	struct VERT vt[3]; // size=24, offset=0
};

struct GsADIV_GT3 // hashcode: 0x41AECAD3 (dec: 1101974227)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_GT3 si; // size=40, offset=56
};

struct GsADIV_P_GT3 // hashcode: 0xC83BF165 (dec: -935595675)
{
	struct VERTC vt[3]; // size=36, offset=0
};

struct GsADIV_G3 // hashcode: 0xCB836ADF (dec: -880579873)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_G3 si; // size=28, offset=56
};

struct GsADIV_F3 // hashcode: 0xD30B2BB1 (dec: -754242639)
{
	unsigned long limit; // size=0, offset=0
	long hwd; // size=0, offset=4
	long vwd; // size=0, offset=8
	int shift; // size=0, offset=12
	unsigned long *org; // size=0, offset=16
	unsigned long *pk; // size=0, offset=20
	long otz; // size=0, offset=24
	long adivz; // size=0, offset=28
	short adivw; // size=0, offset=32
	short adivh; // size=0, offset=34
	long flg; // size=0, offset=36
	short minx; // size=0, offset=40
	short miny; // size=0, offset=42
	short maxx; // size=0, offset=44
	short maxy; // size=0, offset=46
	short hwd0; // size=0, offset=48
	short vwd0; // size=0, offset=50
	unsigned long *tag; // size=0, offset=52
	struct POLY_F3 si; // size=20, offset=56
};

struct _GsCOORDUNIT // hashcode: 0xFF7FC0EC (dec: -8404756)
{
	unsigned long flg; // size=0, offset=0
	struct MATRIX matrix; // size=32, offset=4
	struct MATRIX workm; // size=32, offset=36
	struct SVECTOR rot; // size=8, offset=68
	struct _GsCOORDUNIT *super; // size=80, offset=76
};

struct GsVIEWUNIT // hashcode: 0xA413D0FC (dec: -1542205188)
{
	struct MATRIX view; // size=32, offset=0
	struct _GsCOORDUNIT *super; // size=80, offset=32
};

struct GsRVIEWUNIT // hashcode: 0x58576C51 (dec: 1482124369)
{
	long vpx; // size=0, offset=0
	long vpy; // size=0, offset=4
	long vpz; // size=0, offset=8
	long vrx; // size=0, offset=12
	long vry; // size=0, offset=16
	long vrz; // size=0, offset=20
	long rz; // size=0, offset=24
	struct _GsCOORDUNIT *super; // size=80, offset=28
};

struct GsUNIT // hashcode: 0x8E8BDDC5 (dec: -1903436347)
{
	struct _GsCOORDUNIT *coord; // size=80, offset=0
	unsigned long *primtop; // size=0, offset=4
};

struct GsTYPEUNIT // hashcode: 0x1FB9DC0D (dec: 532274189)
{
	unsigned long type; // size=0, offset=0
	unsigned long *ptr; // size=0, offset=4
};

struct GsARGUNIT // hashcode: 0x4887BEBD (dec: 1216855741)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
};

struct GsWORKUNIT // hashcode: 0x7950F4C2 (dec: 2035348674)
{
	struct DVECTOR vec; // size=4, offset=0
	short otz; // size=0, offset=4
	short p; // size=0, offset=6
};

struct GsARGUNIT_NORMAL // hashcode: 0xB0B5D74E (dec: -1330260146)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *primtop; // size=0, offset=20
	struct SVECTOR *vertop; // size=8, offset=24
	struct SVECTOR *nortop; // size=8, offset=28
};

struct GsARGUNIT_SHARED // hashcode: 0xBFF4D852 (dec: -1074472878)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *primtop; // size=0, offset=20
	struct SVECTOR *vertop; // size=8, offset=24
	struct GsWORKUNIT *vertop2; // size=8, offset=28
	struct SVECTOR *nortop; // size=8, offset=32
	struct SVECTOR *nortop2; // size=8, offset=36
};

struct GsARGUNIT_IMAGE // hashcode: 0x9AD779AE (dec: -1697154642)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *imagetop; // size=0, offset=20
	unsigned long *cluttop; // size=0, offset=24
};

struct GsARGUNIT_GND // hashcode: 0x892BF56E (dec: -1993607826)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *polytop; // size=0, offset=20
	unsigned long *boxtop; // size=0, offset=24
	unsigned long *pointtop; // size=0, offset=28
	struct SVECTOR *nortop; // size=8, offset=32
};

struct GsARGUNIT_GNDT // hashcode: 0x5DA4EE75 (dec: 1571090037)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *polytop; // size=0, offset=20
	unsigned long *boxtop; // size=0, offset=24
	unsigned long *pointtop; // size=0, offset=28
	struct SVECTOR *nortop; // size=8, offset=32
	unsigned long *uvtop; // size=0, offset=36
};

struct GsARGUNIT_JntMIMe // hashcode: 0x7597D501 (dec: 1972884737)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *coord_sect; // size=0, offset=20
	long *mimepr; // size=0, offset=24
	unsigned long mimenum; // size=0, offset=28
	unsigned short mimeid; // size=0, offset=32
	unsigned short reserved; // size=0, offset=34
	unsigned long *mime_diff_sect; // size=0, offset=36
};

struct GsARGUNIT_RstJntMIMe // hashcode: 0x88F9D944 (dec: -1996891836)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned long *coord_sect; // size=0, offset=20
	unsigned short mimeid; // size=0, offset=24
	unsigned short reserved; // size=0, offset=26
	unsigned long *mime_diff_sect; // size=0, offset=28
};

struct GsARGUNIT_VNMIMe // hashcode: 0xBCFD4CB3 (dec: -1124250445)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	long *mimepr; // size=0, offset=20
	unsigned long mimenum; // size=0, offset=24
	unsigned short mimeid; // size=0, offset=28
	unsigned short reserved; // size=0, offset=30
	unsigned long *mime_diff_sect; // size=0, offset=32
	struct SVECTOR *orgs_vn_sect; // size=8, offset=36
	struct SVECTOR *vert_sect; // size=8, offset=40
	struct SVECTOR *norm_sect; // size=8, offset=44
};

struct GsARGUNIT_RstVNMIMe // hashcode: 0x1022F22A (dec: 270725674)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	unsigned short mimeid; // size=0, offset=20
	unsigned short reserved; // size=0, offset=22
	unsigned long *mime_diff_sect; // size=0, offset=24
	struct SVECTOR *orgs_vn_sect; // size=8, offset=28
	struct SVECTOR *vert_sect; // size=8, offset=32
	struct SVECTOR *norm_sect; // size=8, offset=36
};

struct GsARGUNIT_ANIM // hashcode: 0x9FB5A406 (dec: -1615485946)
{
	unsigned long *primp; // size=0, offset=0
	struct GsOT *tagp; // size=20, offset=4
	int shift; // size=0, offset=8
	int offset; // size=0, offset=12
	unsigned char *out_packetp; // size=0, offset=16
	long header_size; // size=0, offset=20
	unsigned long *htop; // size=0, offset=24
	unsigned long *ctop; // size=0, offset=28
	unsigned long *ptop; // size=0, offset=32
};

struct GsSEH // hashcode: 0xD49B8017 (dec: -728006633)
{
	short idx; // size=0, offset=0
	unsigned char sid; // size=0, offset=2
	unsigned char pad; // size=0, offset=3
};

struct GsSEQ // hashcode: 0xF024421A (dec: -266059238)
{
	unsigned long rewrite_idx; // size=0, offset=0
	unsigned short size; // size=0, offset=4
	unsigned short num; // size=0, offset=6
	unsigned short ii; // size=0, offset=8
	unsigned short aframe; // size=0, offset=10
	unsigned char sid; // size=0, offset=12
	char speed; // size=0, offset=13
	unsigned short srcii; // size=0, offset=14
	short rframe; // size=0, offset=16
	unsigned short tframe; // size=0, offset=18
	unsigned short ci; // size=0, offset=20
	unsigned short ti; // size=0, offset=22
	unsigned short start; // size=0, offset=24
	unsigned char start_sid; // size=0, offset=26
	unsigned char traveling; // size=0, offset=27
};

struct InitPos // hashcode: 0x16941B53 (dec: 378805075)
{
	unsigned short x; // size=0, offset=0
	unsigned short y; // size=0, offset=2
};

struct t11TLinkedList1Z8PalEntry // hashcode: 0xCCD1042D (dec: -858717139)
{
	struct PalEntry *Next; // size=0, offset=0
	struct PalEntry *Prev; // size=0, offset=4
};

struct PalEntry // hashcode: 0x69C7DCD5 (dec: 1774705877)
{
	struct t11TLinkedList1Z8PalEntry t11TLinkedList1Z8PalEntry; // size=8, offset=0
	unsigned short PixVal; // size=0, offset=8
	unsigned short MyX; // size=0, offset=10
	unsigned short MyY; // size=0, offset=12
	unsigned short Clut; // size=0, offset=14
	unsigned short SourceClut; // size=0, offset=16
	unsigned short NumOfCols; // size=0, offset=18
	unsigned short JustUsed; // size=0, offset=20
};

struct t10Collection2Z8PalEntryi20 // hashcode: 0x0FB1B548 (dec: 263304520)
{
	int ObjsUsed; // size=0, offset=0
	struct PalEntry Objects[20]; // size=480, offset=4
	struct PalEntry *Used; // size=24, offset=484
	struct PalEntry *Unused; // size=24, offset=488
};

struct PalCollection // hashcode: 0xB7D17046 (dec: -1211011002)
{
	struct t10Collection2Z8PalEntryi20 t10Collection2Z8PalEntryi20; // size=492, offset=0
};

struct BIRDSTRUCT // hashcode: 0xA23690F9 (dec: -1573482247)
{
	struct BIRDSTRUCT *leader; // size=24, offset=0
	short WorldX; // size=0, offset=4
	short WorldY; // size=0, offset=6
	char _bx; // size=0, offset=8
	char _by; // size=0, offset=9
	char _bxoff; // size=0, offset=10
	char _byoff; // size=0, offset=11
	char dir; // size=0, offset=12
	char newdir; // size=0, offset=13
	char rnddir; // size=0, offset=14
	char flytime; // size=0, offset=15
	char flyvar; // size=0, offset=16
	char animcount; // size=0, offset=17
	char mode; // size=0, offset=18
	char height; // size=0, offset=19
	unsigned char leadflag; // size=0, offset=20
	unsigned char visible; // size=0, offset=21
};

struct Perch // hashcode: 0x8C5E04ED (dec: -1939995411)
{
	char x; // size=0, offset=0
	char y; // size=0, offset=1
};

struct PInf // hashcode: 0xEEEF2EAC (dec: -286314836)
{
	char *Tx; // size=0, offset=0
	unsigned short GameTex; // size=0, offset=4
	unsigned short TownTex; // size=0, offset=6
};

struct bird // hashcode: 0x95F6DA01 (dec: -1778984447)
{
	int townbirddir; // size=0, offset=0
	int townx; // size=0, offset=4
	int towny; // size=0, offset=8
	int motionx; // size=0, offset=12
	int motiony; // size=0, offset=16
	int offx; // size=0, offset=20
	int offy; // size=0, offset=24
	int velx; // size=0, offset=28
	int vely; // size=0, offset=32
	int newvelx; // size=0, offset=36
	int newvely; // size=0, offset=40
	char sw; // size=0, offset=44
	char fl; // size=0, offset=45
	char fl_delay; // size=0, offset=46
	char sw_delay; // size=0, offset=47
	char perch; // size=0, offset=48
	char bird_vis; // size=0, offset=49
};

struct _HSCODESTREAM // hashcode: 0x49034550 (dec: 1224951120)
{
	int unused; // size=0, offset=0
};

struct _SCODEEXECUTEDATA // hashcode: 0xA292D3A2 (dec: -1567435870)
{
	unsigned long size; // size=0, offset=0
	unsigned long flags; // size=0, offset=4
	int xiterations; // size=0, offset=8
	int yiterations; // size=0, offset=12
	int adjustdest; // size=0, offset=16
	int adjustsource; // size=0, offset=20
	void *dest; // size=0, offset=24
	void *source; // size=0, offset=28
	void *table; // size=0, offset=32
	unsigned long a; // size=0, offset=36
	unsigned long b; // size=0, offset=40
	unsigned long c; // size=0, offset=44
	int adjustdestalt; // size=0, offset=48
	int adjustsourcealt; // size=0, offset=52
	unsigned long reserved[2]; // size=8, offset=56
};

struct _HSARCHIVE // hashcode: 0xA14E6392 (dec: -1588698222)
{
	int unused; // size=0, offset=0
};

struct _HSFILE // hashcode: 0x93056A30 (dec: -1828361680)
{
	int unused; // size=0, offset=0
};

struct _HSFINDFILE // hashcode: 0x7E27930A (dec: 2116522762)
{
	int unused; // size=0, offset=0
};

struct _HSGDIOBJ // hashcode: 0xC8BFDB67 (dec: -926950553)
{
	int unused; // size=0, offset=0
};

struct _HSGDIFONT // hashcode: 0x169FB775 (dec: 379565941)
{
	struct _HSGDIOBJ _HSGDIOBJ; // size=4, offset=0
	int unused; // size=0, offset=4
};

struct _PARAMS // hashcode: 0xB36B32C5 (dec: -1284820283)
{
	unsigned long window; // size=0, offset=0
	unsigned int message; // size=0, offset=4
	long wparam; // size=0, offset=8
	unsigned long lparam; // size=0, offset=12
	unsigned int notifycode; // size=0, offset=16
	void *extra; // size=0, offset=20
	unsigned char useresult; // size=0, offset=24
	unsigned long result; // size=0, offset=28
};

struct _SNETCAPS // hashcode: 0xA64EA26F (dec: -1504796049)
{
	unsigned long size; // size=0, offset=0
	unsigned long flags; // size=0, offset=4
	unsigned long maxmessagesize; // size=0, offset=8
	unsigned long maxqueuesize; // size=0, offset=12
	unsigned long maxplayers; // size=0, offset=16
	unsigned long bytessec; // size=0, offset=20
	unsigned long latencyms; // size=0, offset=24
	unsigned long defaultturnssec; // size=0, offset=28
	unsigned long defaultturnsintransit; // size=0, offset=32
};

struct _SNETCREATEDATA // hashcode: 0x8D914B28 (dec: -1919857880)
{
	unsigned long size; // size=0, offset=0
	unsigned long providerid; // size=0, offset=4
	unsigned long maxplayers; // size=0, offset=8
	unsigned long createflags; // size=0, offset=12
};

struct _SNET_DATA_SYSCOLORTABLE // hashcode: 0x92AAFDA3 (dec: -1834287709)
{
	unsigned long syscolor; // size=0, offset=0
	unsigned long rgb; // size=0, offset=4
};

struct _SNETEVENT // hashcode: 0x0B92D315 (dec: 194171669)
{
	unsigned long eventid; // size=0, offset=0
	unsigned long playerid; // size=0, offset=4
	void *data; // size=0, offset=8
	unsigned long databytes; // size=0, offset=12
};

struct _SNETPLAYERDATA // hashcode: 0x31A08E94 (dec: 832605844)
{
	unsigned long size; // size=0, offset=0
	char *playername; // size=0, offset=4
	char *playerdescription; // size=0, offset=8
};

struct _SNETPROGRAMDATA // hashcode: 0x1D714E19 (dec: 493964825)
{
	unsigned long size; // size=0, offset=0
	char *programname; // size=0, offset=4
	char *programdescription; // size=0, offset=8
	unsigned long programid; // size=0, offset=12
	unsigned long versionid; // size=0, offset=16
	unsigned long reserved1; // size=0, offset=20
	unsigned long maxplayers; // size=0, offset=24
	void *initdata; // size=0, offset=28
	unsigned long initdatabytes; // size=0, offset=32
	void *reserved2; // size=0, offset=36
	unsigned long optcategorybits; // size=0, offset=40
};

struct _SNETUIDATA // hashcode: 0xC66D5CC3 (dec: -965911357)
{
	unsigned long size; // size=0, offset=0
	unsigned long uiflags; // size=0, offset=4
	unsigned long parentwindow; // size=0, offset=8
	unsigned char (*artcallback)(); // size=0, offset=12
	unsigned char (*authcallback)(); // size=0, offset=16
	unsigned char (*createcallback)(); // size=0, offset=20
	unsigned char (*drawdesccallback)(); // size=0, offset=24
	unsigned char (*selectedcallback)(); // size=0, offset=28
	int (*messageboxcallback)(); // size=0, offset=32
	unsigned char (*soundcallback)(); // size=0, offset=36
	unsigned char (*statuscallback)(); // size=0, offset=40
	unsigned char (*getdatacallback)(); // size=0, offset=44
	unsigned char (*categorycallback)(); // size=0, offset=48
};

struct _SNETVERSIONDATA // hashcode: 0xFE06803C (dec: -33128388)
{
	unsigned long size; // size=0, offset=0
	char *versionstring; // size=0, offset=4
	char *executablefile; // size=0, offset=8
	char *originalarchivefile; // size=0, offset=12
	char *patcharchivefile; // size=0, offset=16
};

struct _SNETADDR // hashcode: 0x488F2BEE (dec: 1217342446)
{
	unsigned char address[16]; // size=16, offset=0
};

struct _SNETSPI_DEVICELIST // hashcode: 0xF51CC79D (dec: -182663267)
{
	unsigned long deviceid; // size=0, offset=0
	struct _SNETCAPS devicecaps; // size=36, offset=4
	char devicename[128]; // size=128, offset=40
	char devicedescription[128]; // size=128, offset=168
	unsigned long reserved; // size=0, offset=296
	struct _SNETSPI_DEVICELIST *next; // size=304, offset=300
};

struct _SNETSPI_GAMELIST // hashcode: 0x52EB5F6F (dec: 1391157103)
{
	unsigned long gameid; // size=0, offset=0
	unsigned long gamemode; // size=0, offset=4
	unsigned long creationtime; // size=0, offset=8
	struct _SNETADDR owner; // size=16, offset=12
	unsigned long ownerlatency; // size=0, offset=28
	unsigned long ownerlasttime; // size=0, offset=32
	unsigned long gamecategorybits; // size=0, offset=36
	char gamename[128]; // size=128, offset=40
	char gamedescription[128]; // size=128, offset=168
	struct _SNETSPI_GAMELIST *next; // size=300, offset=296
};

struct _SNETSPI // hashcode: 0x8E304520 (dec: -1909439200)
{
	unsigned long size; // size=0, offset=0
	unsigned char (*CompareNetAddresses)(); // size=0, offset=4
	unsigned char (*Destroy)(); // size=0, offset=8
	unsigned char (*Free)(); // size=0, offset=12
	unsigned char (*FreeExternalMessage)(); // size=0, offset=16
	unsigned char (*GetGameInfo)(); // size=0, offset=20
	unsigned char (*GetPerformanceData)(); // size=0, offset=24
	unsigned char (*Initialize)(); // size=0, offset=28
	unsigned char (*InitializeDevice)(); // size=0, offset=32
	unsigned char (*LockDeviceList)(); // size=0, offset=36
	unsigned char (*LockGameList)(); // size=0, offset=40
	unsigned char (*Receive)(); // size=0, offset=44
	unsigned char (*ReceiveExternalMessage)(); // size=0, offset=48
	unsigned char (*SelectGame)(); // size=0, offset=52
	unsigned char (*Send)(); // size=0, offset=56
	unsigned char (*SendExternalMessage)(); // size=0, offset=60
	unsigned char (*StartAdvertisingGame)(); // size=0, offset=64
	unsigned char (*StopAdvertisingGame)(); // size=0, offset=68
	unsigned char (*UnlockDeviceList)(); // size=0, offset=72
	unsigned char (*UnlockGameList)(); // size=0, offset=76
};

struct _HSVIDEO // hashcode: 0x049A27DA (dec: 77211610)
{
	int unused; // size=0, offset=0
};

struct _SVIDPALETTEUSE // hashcode: 0x791AFF57 (dec: 2031812439)
{
	unsigned long size; // size=0, offset=0
	unsigned long firstentry; // size=0, offset=4
	unsigned long numentries; // size=0, offset=8
};

struct CCritSect // hashcode: 0x9AB0671E (dec: -1699715298)
{
	unsigned long m_critsect; // size=0, offset=0
};

struct CLock // hashcode: 0xD02E21B3 (dec: -802283085)
{
	unsigned long m_mutexevent; // size=0, offset=0
	unsigned long m_readerevent; // size=0, offset=4
	long m_readercount; // size=0, offset=8
};

struct _gamedata // hashcode: 0xBEC73C42 (dec: -1094239166)
{
	unsigned long dwSeed; // size=0, offset=0
	unsigned char bDiff; // size=0, offset=4
};

struct _uidefaultstats // hashcode: 0x803460B9 (dec: -2144051015)
{
	unsigned short strength; // size=0, offset=0
	unsigned short magic; // size=0, offset=2
	unsigned short dexterity; // size=0, offset=4
	unsigned short vitality; // size=0, offset=6
};

struct _uiheroinfo // hashcode: 0x90EEA0D2 (dec: -1863409454)
{
	struct _uiheroinfo *next; // size=40, offset=0
	char name[16]; // size=16, offset=4
	unsigned short level; // size=0, offset=20
	unsigned char heroclass; // size=0, offset=22
	unsigned char herorank; // size=0, offset=23
	unsigned short strength; // size=0, offset=24
	unsigned short magic; // size=0, offset=26
	unsigned short dexterity; // size=0, offset=28
	unsigned short vitality; // size=0, offset=30
	unsigned long gold; // size=0, offset=32
	unsigned char hassaved; // size=0, offset=36
	unsigned char spawned; // size=0, offset=37
};

struct _modeminfo // hashcode: 0x47BF5368 (dec: 1203721064)
{
	struct _modeminfo *next; // size=264, offset=0
	unsigned long deviceid; // size=0, offset=4
	char devicename[128]; // size=128, offset=8
	char devicedesc[128]; // size=128, offset=136
};

struct OrigPkItemStruct // hashcode: 0x22D3F84B (dec: 584317003)
{
	int iSeed; // size=0, offset=0
	unsigned short iCreateInfo; // size=0, offset=4
	unsigned short idx; // size=0, offset=6
	unsigned char bId; // size=0, offset=8
	unsigned char bDur; // size=0, offset=9
	unsigned char bMDur; // size=0, offset=10
	unsigned char bCh; // size=0, offset=11
	unsigned char bMCh; // size=0, offset=12
	unsigned short wValue; // size=0, offset=14
	unsigned long dwBuff; // size=0, offset=16
};

struct PcPkItemStruct // hashcode: 0x52A2459F (dec: 1386366367)
{
	unsigned char Shite[19]; // size=19, offset=0
};

struct PcPkPlayerStruct // hashcode: 0xFF6C0800 (dec: -9697280)
{
	struct FILETIME archiveTime; // size=8, offset=0
	unsigned char destAction; // size=0, offset=8
	unsigned char destParam1; // size=0, offset=9
	unsigned char destParam2; // size=0, offset=10
	unsigned char plrlevel; // size=0, offset=11
	unsigned char px; // size=0, offset=12
	unsigned char py; // size=0, offset=13
	unsigned char targx; // size=0, offset=14
	unsigned char targy; // size=0, offset=15
	char pName[32]; // size=32, offset=16
	unsigned char pClass; // size=0, offset=48
	unsigned char pBaseStr; // size=0, offset=49
	unsigned char pBaseMag; // size=0, offset=50
	unsigned char pBaseDex; // size=0, offset=51
	unsigned char pBaseVit; // size=0, offset=52
	unsigned char pLevel; // size=0, offset=53
	unsigned char pStatPts; // size=0, offset=54
	int pExperience; // size=32, offset=440
	int pGold; // size=32, offset=472
	int pHPBase; // size=32, offset=504
	int pMaxHPBase; // size=32, offset=536
	int pManaBase; // size=32, offset=568
	int pMaxManaBase; // size=32, offset=600
	unsigned char pSplLvl[37]; // size=37, offset=79
	int pMemSpells; // size=32, offset=928
	int pMemSpells2; // size=32, offset=960
	struct PcPkItemStruct InvBody[7]; // size=133, offset=124
	struct PcPkItemStruct InvList[40]; // size=760, offset=257
	char InvGrid[40]; // size=40, offset=1017
	unsigned char _pNumInv; // size=0, offset=1057
	struct PcPkItemStruct SpdList[8]; // size=152, offset=1058
	unsigned char Pad[24]; // size=24, offset=1210
	int pDiabloKillLevel; // size=32, offset=9872
};

struct PkItemStruct // hashcode: 0x8F681BD7 (dec: -1889002537)
{
	unsigned int dwBuff; // size=32, offset=0
	int iSeed; // size=32, offset=32
	unsigned int iCreateInfo; // size=16, offset=64
	unsigned int idx; // size=16, offset=80
	unsigned int wValue; // size=16, offset=96
	unsigned int bId; // size=8, offset=112
	unsigned int bDur; // size=8, offset=120
	unsigned int bMDur; // size=8, offset=128
	unsigned int bCh; // size=8, offset=136
	unsigned int bMCh; // size=8, offset=144
};

struct PkPlayerStruct // hashcode: 0x5D9E3046 (dec: 1570648134)
{
	struct PkItemStruct SpdList[8]; // size=160, offset=0
	struct PkItemStruct InvBody[7]; // size=140, offset=160
	struct PkItemStruct InvList[40]; // size=800, offset=300
	unsigned long pMemSpells; // size=0, offset=1104
	struct FILETIME archiveTime; // size=8, offset=1112
	long pExperience; // size=0, offset=1120
	long pGold; // size=0, offset=1124
	long pHPBase; // size=0, offset=1128
	long pMaxHPBase; // size=0, offset=1132
	long pManaBase; // size=0, offset=1136
	long pMaxManaBase; // size=0, offset=1140
	unsigned long pDiabloKillLevel; // size=0, offset=1144
	char pName[32]; // size=32, offset=1148
	char InvGrid[40]; // size=40, offset=1180
	unsigned char pSplLvl[37]; // size=37, offset=1220
	unsigned char destAction; // size=0, offset=1257
	unsigned char destParam1; // size=0, offset=1258
	unsigned char destParam2; // size=0, offset=1259
	unsigned char plrlevel; // size=0, offset=1260
	unsigned char px; // size=0, offset=1261
	unsigned char py; // size=0, offset=1262
	unsigned char targx; // size=0, offset=1263
	unsigned char targy; // size=0, offset=1264
	unsigned char pClass; // size=0, offset=1265
	unsigned char pBaseStr; // size=0, offset=1266
	unsigned char pBaseMag; // size=0, offset=1267
	unsigned char pBaseDex; // size=0, offset=1268
	unsigned char pBaseVit; // size=0, offset=1269
	unsigned char pLevel; // size=0, offset=1270
	unsigned char pStatPts; // size=0, offset=1271
	unsigned char _pNumInv; // size=0, offset=1272
};

struct OMENUITEM // hashcode: 0x8238E467 (dec: -2110200729)
{
	unsigned char y; // size=0, offset=0
	int Text; // size=0, offset=4
	enum TXT_JUST Just; // size=4, offset=8
	int len; // size=0, offset=12
	unsigned long *var; // size=0, offset=16
	int Link; // size=0, offset=20
};

struct OMENULIST // hashcode: 0xC52D3861 (dec: -986892191)
{
	unsigned short w; // size=0, offset=0
	unsigned char h; // size=0, offset=2
	unsigned char NoEntries; // size=0, offset=3
	struct OMENUITEM *Item; // size=24, offset=4
};

struct FMVDAT // hashcode: 0x9C8DFD3E (dec: -1668416194)
{
	char *Name; // size=0, offset=0
	unsigned short Width; // size=0, offset=4
	unsigned short Height; // size=0, offset=6
};

struct kindexS // hashcode: 0x56322B49 (dec: 1446128457)
{
	unsigned short kan; // size=0, offset=0
	unsigned short offset; // size=0, offset=2
};

struct block // hashcode: 0x636CA81F (dec: 1668065311)
{
	int data[128]; // size=512, offset=0
	unsigned char blockrep; // size=0, offset=512
	int blocksize; // size=0, offset=516
	int blockoffset; // size=0, offset=520
	unsigned char *Dest; // size=0, offset=524
	int outsize; // size=0, offset=528
};

struct FeMenuTable // hashcode: 0xAD3F8B41 (dec: -1388344511)
{
	int X; // size=0, offset=0
	int Y; // size=0, offset=4
	enum TXT_JUST Just; // size=4, offset=8
	unsigned short Str; // size=0, offset=12
	struct FeTable *MenuPtr; // size=28, offset=16
	struct CFont *Font; // size=536, offset=20
};

struct Creds // hashcode: 0xD67767E6 (dec: -696817690)
{
	char Title; // size=0, offset=0
	char SubTitle; // size=0, offset=1
	char *Text; // size=0, offset=4
};

struct sjis // hashcode: 0x71B4B37F (dec: 1907667839)
{
	char ascii; // size=0, offset=0
	unsigned char num; // size=0, offset=1
	unsigned short sjis; // size=0, offset=2
};

struct _mdecanim // hashcode: 0x9611F28B (dec: -1777208693)
{
	char *filename; // size=0, offset=0
	int speed; // size=0, offset=4
	int start; // size=0, offset=8
	int end; // size=0, offset=12
	int streaming; // size=0, offset=16
};

struct asec // hashcode: 0xA753E199 (dec: -1487674983)
{
	unsigned long chkid; // size=0, offset=0
	unsigned long chksize; // size=0, offset=4
	int size; // size=0, offset=8
};

struct CSDATA // hashcode: 0xB6064471 (dec: -1241103247)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
	int w; // size=0, offset=8
	int Text1; // size=0, offset=12
	int Text2; // size=0, offset=16
	int Text3; // size=0, offset=20
	char String[15]; // size=15, offset=24
	char col; // size=0, offset=39
};

struct MissileData // hashcode: 0x31652599 (dec: 828712345)
{
	unsigned char mName; // size=0, offset=0
	void (*mAddProc)(); // size=0, offset=4
	void (*mProc)(); // size=0, offset=8
	unsigned char mDraw; // size=0, offset=12
	unsigned char mType; // size=0, offset=13
	unsigned char mResist; // size=0, offset=14
	unsigned char mFileNum; // size=0, offset=15
	int mlSFX; // size=0, offset=16
	int miSFX; // size=0, offset=20
};

struct MisFileData // hashcode: 0x4F95C7BB (dec: 1335216059)
{
	unsigned char mAnimName; // size=0, offset=0
	unsigned char mAnimFAmt; // size=0, offset=1
	unsigned char mFlags; // size=0, offset=2
	unsigned char mAnimDelay; // size=0, offset=3
	unsigned char mAnimLen; // size=0, offset=4
};

struct ThemeStruct // hashcode: 0x1517F42D (dec: 353891373)
{
	char ttype; // size=0, offset=0
	int ttval; // size=0, offset=4
};

struct _FILEHEADER // hashcode: 0xB0110D63 (dec: -1341059741)
{
	unsigned long signature; // size=0, offset=0
	unsigned long headersize; // size=0, offset=4
	unsigned long filesize; // size=0, offset=8
	unsigned short version; // size=0, offset=12
	unsigned short sectorsizeid; // size=0, offset=14
	unsigned long hashoffset; // size=0, offset=16
	unsigned long blockoffset; // size=0, offset=20
	unsigned long hashcount; // size=0, offset=24
	unsigned long blockcount; // size=0, offset=28
};

struct _HASHENTRY // hashcode: 0xBCF8AA96 (dec: -1124554090)
{
	unsigned long hashcheck[2]; // size=8, offset=0
	unsigned long lcid; // size=0, offset=8
	unsigned long block; // size=0, offset=12
};

struct _BLOCKENTRY // hashcode: 0x478A7960 (dec: 1200257376)
{
	unsigned long offset; // size=0, offset=0
	unsigned long sizealloc; // size=0, offset=4
	unsigned long sizefile; // size=0, offset=8
	unsigned long flags; // size=0, offset=12
};

struct _SHAREDDATA // hashcode: 0x83593C35 (dec: -2091303883)
{
	long status; // size=0, offset=0
	unsigned long processid; // size=0, offset=4
};

struct CompLevelMemImage // hashcode: 0xD9C58C32 (dec: -641364942)
{
	unsigned long Version; // size=0, offset=0
	unsigned long TotalSize; // size=0, offset=4
	unsigned long DataOffset[21]; // size=84, offset=8
	unsigned long Size[21]; // size=84, offset=92
};

struct CompLevelMaps // hashcode: 0xF4F169E2 (dec: -185505310)
{
	long hndMaps[21]; // size=84, offset=0
	int Sizes[21]; // size=84, offset=84
	int CachedMapNum; // size=0, offset=168
	long hndCachedMap; // size=0, offset=172
	struct DLevel *CurrentMap; // size=3868, offset=176
	void * CurrentMapDirty; // size=0, offset=180
};

struct TMegaPkt // hashcode: 0x11D7B139 (dec: 299348281)
{
	struct TMegaPkt *pNext; // size=32008, offset=0
	unsigned long dwSpaceLeft; // size=0, offset=4
	unsigned char data[32000]; // size=32000, offset=8
};

struct TBuffer // hashcode: 0x726ED213 (dec: 1919865363)
{
	unsigned long dwNextWriteOffset; // size=0, offset=0
	unsigned char bData[4096]; // size=4096, offset=4
};

struct tagPATHNODE // hashcode: 0x3BD81A6A (dec: 1004018282)
{
	char f; // size=0, offset=0
	char h; // size=0, offset=1
	char g; // size=0, offset=2
	int x; // size=0, offset=4
	int y; // size=0, offset=8
	struct tagPATHNODE *Parent; // size=52, offset=12
	struct tagPATHNODE (*Child[8]); // size=32, offset=16
	struct tagPATHNODE *NextNode; // size=52, offset=48
};

struct bbssbb // hashcode: 0xE2AF7EFF (dec: -491815169)
{
	int x; // size=0, offset=0
	int y; // size=0, offset=4
};

struct MESSAGE_STR // hashcode: 0xA8538487 (dec: -1470921593)
{
	int Msg; // size=0, offset=0
	char *Text; // size=0, offset=4
};

struct MONTH_DAYS // hashcode: 0x1538B7D1 (dec: 356038609)
{
	char *Month; // size=0, offset=0
	int Days; // size=0, offset=4
};

struct InvXY // hashcode: 0xA6865F9E (dec: -1501143138)
{
	int X; // size=0, offset=0
	int Y; // size=0, offset=4
};

struct MEM_HDR // hashcode: 0x31D1402E (dec: 835797038)
{
	struct MEM_HDR *Prev; // size=32, offset=0
	struct MEM_HDR *Next; // size=32, offset=4
	void *Mem; // size=0, offset=8
	unsigned long Size; // size=0, offset=12
	unsigned short TimeStamp; // size=0, offset=16
	unsigned short Type; // size=0, offset=18
	unsigned short Owners; // size=0, offset=20
	unsigned short Handle; // size=0, offset=22
	unsigned char Name[8]; // size=8, offset=24
};

struct MEM_REG // hashcode: 0xB77727B9 (dec: -1216927815)
{
	void *Mem; // size=0, offset=0
	int Size; // size=0, offset=4
};

struct FILE // hashcode: 0xD3865A01 (dec: -746169855)
{
	int _cnt; // size=0, offset=0
	char *_ptr; // size=0, offset=4
	char *_base; // size=0, offset=8
	int _bufsiz; // size=0, offset=12
	int _flag; // size=0, offset=16
	int _file; // size=0, offset=20
	char *_name_to_remove; // size=0, offset=24
};
/* End structs */

/* Begin unions */
/* End unions */

/* Begin typedefs */

typedef unsigned char u_char;

typedef unsigned short u_short;

typedef unsigned int u_int;

typedef unsigned long u_long;

typedef unsigned short ushort;

typedef struct _physadr _physadr;

typedef struct _physadr *physadr;

typedef struct label_t label_t;

typedef struct _quad _quad;

typedef struct _quad quad;

typedef long daddr_t;

typedef char *caddr_t;

typedef long *qaddr_t;

typedef unsigned long ino_t;

typedef long swblk_t;

typedef unsigned int size_t;

typedef long time_t;

typedef short dev_t;

typedef long off_t;

typedef unsigned short uid_t;

typedef unsigned short gid_t;

typedef char s8;

typedef short s16;

typedef long s32;

typedef long s64;

typedef unsigned char u8;

typedef unsigned short u16;

typedef unsigned long u32;

typedef unsigned long u64;

typedef unsigned int uint;

typedef unsigned char uchar;

typedef unsigned long ulong;

typedef unsigned char UBYTE;

typedef unsigned short UWORD;

typedef unsigned int UINT;

typedef unsigned char UCHAR;

typedef unsigned short USHORT;

typedef unsigned long ULONG;

typedef unsigned char BOOL;

typedef char S8;

typedef short S16;

typedef long S32;

typedef unsigned char U8;

typedef unsigned short U16;

typedef unsigned long U32;

typedef char int8;

typedef unsigned char uint8;

typedef unsigned char byte;

typedef short int16;

typedef unsigned short uint16;

typedef unsigned short word;

typedef long int32;

typedef unsigned long uint32;

typedef unsigned long dword;

typedef long S64;

typedef unsigned long U64;

typedef long int64;

typedef unsigned long uint64;

typedef unsigned long qword;

typedef struct MonstList MonstList;

typedef struct MonstLevel MonstLevel;

typedef void *va_list;

typedef struct ToT ToT;

typedef struct TCBH TCBH;

typedef struct TCB TCB;

typedef struct EvCB EvCB;

typedef struct EXEC EXEC;

typedef struct XF_HDR XF_HDR;

typedef struct DIRENTRY DIRENTRY;

typedef struct MATRIX MATRIX;

typedef struct VECTOR VECTOR;

typedef struct SVECTOR SVECTOR;

typedef struct CVECTOR CVECTOR;

typedef struct DVECTOR DVECTOR;

typedef struct EVECTOR EVECTOR;

typedef struct RVECTOR RVECTOR;

typedef struct CRVECTOR3 CRVECTOR3;

typedef struct DIVPOLYGON3 DIVPOLYGON3;

typedef struct CRVECTOR4 CRVECTOR4;

typedef struct DIVPOLYGON4 DIVPOLYGON4;

typedef struct SPOL SPOL;

typedef struct POL4 POL4;

typedef struct POL3 POL3;

typedef struct TMESH TMESH;

typedef struct QMESH QMESH;

typedef struct RECT RECT;

typedef struct RECT32 RECT32;

typedef struct DR_ENV DR_ENV;

typedef struct DRAWENV DRAWENV;

typedef struct DISPENV DISPENV;

typedef struct P_TAG P_TAG;

typedef struct P_CODE P_CODE;

typedef struct POLY_F3 POLY_F3;

typedef struct POLY_F4 POLY_F4;

typedef struct POLY_FT3 POLY_FT3;

typedef struct POLY_FT4 POLY_FT4;

typedef struct POLY_G3 POLY_G3;

typedef struct POLY_G4 POLY_G4;

typedef struct POLY_GT3 POLY_GT3;

typedef struct POLY_GT4 POLY_GT4;

typedef struct LINE_F2 LINE_F2;

typedef struct LINE_G2 LINE_G2;

typedef struct LINE_F3 LINE_F3;

typedef struct LINE_G3 LINE_G3;

typedef struct LINE_F4 LINE_F4;

typedef struct LINE_G4 LINE_G4;

typedef struct SPRT SPRT;

typedef struct SPRT_16 SPRT_16;

typedef struct SPRT_16 SPRT_8;

typedef struct TILE TILE;

typedef struct TILE_16 TILE_16;

typedef struct TILE_16 TILE_8;

typedef struct TILE_16 TILE_1;

typedef struct DR_MODE DR_MODE;

typedef struct DR_MODE DR_TWIN;

typedef struct DR_MODE DR_AREA;

typedef struct DR_MODE DR_OFFSET;

typedef struct DR_MOVE DR_MOVE;

typedef struct DR_LOAD DR_LOAD;

typedef struct DR_TPAGE DR_TPAGE;

typedef struct DR_MODE DR_STP;

typedef struct TMD_PRIM TMD_PRIM;

typedef struct TIM_IMAGE TIM_IMAGE;

typedef char CHAR;

typedef int CLSID;

typedef int SIZEL;

typedef int POINTL;

typedef unsigned long *FARPROC;

typedef unsigned long FOURCC;

typedef unsigned char *LPDRAWITEMSTRUCT;

typedef unsigned long *LPSECURITY_ATTRIBUTES;

typedef void *DLGPROC;

typedef unsigned long COLORREF;

typedef unsigned short *LPINT;

typedef unsigned long HCURSOR;

typedef unsigned long TIMERPROC;

typedef unsigned long HFONT;

typedef unsigned long CRITICAL_SECTION;

typedef unsigned long *LPCRITICAL_SECTION;

typedef long *LPTOP_LEVEL_EXCEPTION_FILTER;

typedef unsigned long REGSAM;

typedef unsigned long ATOM;

typedef unsigned long HMENU;

typedef unsigned long *PUINT;

typedef void VOID;

typedef unsigned long __int64;

typedef unsigned long DWORD;

typedef unsigned long *LPDWORD;

typedef unsigned short WORD;

typedef short SHORT;

typedef unsigned char BYTE;

typedef char *HKEY;

typedef char **PHKEY;

typedef char TCHAR;

typedef void *LPVOID;

typedef void *LPCVOID;

typedef void *LPOVERLAPPED;

typedef char *LPSTR;

typedef char *LPCSTR;

typedef char *LPTSTR;

typedef char *LPCTSTR;

typedef unsigned char *LPBYTE;

typedef long WPARAM;

typedef unsigned long LPARAM;

typedef unsigned long HWND;

typedef unsigned long HINSTANCE;

typedef unsigned long LRESULT;

typedef unsigned long HRESULT;

typedef unsigned long HANDLE;

typedef unsigned long HPALETTE;

typedef unsigned long HDC;

typedef long LONG;

typedef long *LPLONG;

typedef long *PLONG;

typedef unsigned long LCID;

typedef unsigned long HMODULE;

typedef unsigned long *LPSIZE;

typedef struct RECT HRGN;

typedef struct RECT LPCDLGTEMPLATE;

typedef struct RECT *LPCRECT;

typedef unsigned long (*WNDPROC)();

typedef unsigned long HICON;

typedef unsigned long HBRUSH;

typedef void *HTRANS;

typedef struct POINT POINT;

typedef struct MSG MSG;

typedef struct MSG *LPMSG;

typedef struct FILETIME FILETIME;

typedef struct FILETIME *PFILETIME;

typedef struct FILETIME *LPFILETIME;

typedef struct _WIN32_FIND_DATA _WIN32_FIND_DATA;

typedef struct _WIN32_FIND_DATA WIN32_FIND_DATA;

typedef struct _WIN32_FIND_DATA *LPWIN32_FIND_DATA;

typedef struct PALETTEENTRY PALETTEENTRY;

typedef struct PALETTEENTRY *LPPALETTEENTRY;

typedef struct PAINTSTRUCT PAINTSTRUCT;

typedef struct PAINTSTRUCT *LPPAINTSTRUCT;

typedef struct LARGE_INTEGER LARGE_INTEGER;

typedef struct GUID GUID;

typedef struct WAVEFORMATEX WAVEFORMATEX;

typedef struct MMCKINFO MMCKINFO;

typedef struct WAVEFORMAT WAVEFORMAT;

typedef struct PCMWAVEFORMAT PCMWAVEFORMAT;

typedef struct VS_FIXEDFILEINFO VS_FIXEDFILEINFO;

typedef struct WNDCLASSEX WNDCLASSEX;

typedef struct SHITEMID SHITEMID;

typedef struct _ITEMIDLIST _ITEMIDLIST;

typedef struct _ITEMIDLIST ITEMIDLIST;

typedef struct _ITEMIDLIST *LPITEMIDLIST;

typedef struct _ITEMIDLIST *LPCITEMIDLIST;

typedef struct _HSTRANS _HSTRANS;

typedef struct _HSTRANS *HSTRANS;

typedef struct SIZE SIZE;

typedef struct TBMP TBMP;

typedef struct TBMP *TPBMP;

typedef struct UIRECT UIRECT;

typedef struct UIRECT *LPUIRECT;

typedef struct MSFX MSFX;

typedef struct CKINFO CKINFO;

typedef struct TSnd TSnd;

typedef struct TSFX TSFX;

typedef struct AnimStruct AnimStruct;

typedef struct MonsterData MonsterData;

typedef struct CMonster CMonster;

typedef struct MonsterStruct MonsterStruct;

typedef struct UniqMonstStruct UniqMonstStruct;

typedef struct STONEPAL STONEPAL;

typedef struct DEF_ARGS DEF_ARGS;

typedef int jmp_buf[12];

typedef long MHANDLE;

typedef int MTYPE;

typedef void (*GAL_FILTER)();

typedef enum GAL_ERROR_CODE GAL_ERROR_CODE;

typedef enum GAL_VERB_LEV GAL_VERB_LEV;

typedef struct MEM_INIT_INFO MEM_INIT_INFO;

typedef struct GAL_STRUCT GAL_STRUCT;

typedef struct TASK TASK;

typedef void (*TSK_CBACK)();

typedef void (*DOTSK_CBACK)();

typedef enum LANG_TYPE LANG_TYPE;

typedef enum LANG_DB_NO LANG_DB_NO;

typedef enum B_PER_PIX B_PER_PIX;

typedef struct FRAME_HDR FRAME_HDR;

typedef struct SysObj SysObj;

typedef void * (*STR_CB_PTR)();

typedef struct FileIO FileIO;

typedef struct CPart CPart;

typedef struct CBlock CBlock;

typedef struct CBlockHdr CBlockHdr;

typedef struct PAL PAL;

typedef struct PAL_INVRAM PAL_INVRAM;

typedef struct DECOMP_BUFFER DECOMP_BUFFER;

typedef struct ALL_DECOMP_BUFFERS ALL_DECOMP_BUFFERS;

typedef struct SPR_HDR SPR_HDR;

typedef struct TP_LOAD_HDR TP_LOAD_HDR;

typedef struct CTextFileInfo CTextFileInfo;

typedef struct CCreatureAction CCreatureAction;

typedef struct CCreatureHdr CCreatureHdr;

typedef struct TextDat TextDat;

typedef struct CScreen CScreen;

typedef struct OBJ_TYPE_INFO OBJ_TYPE_INFO;

typedef struct OBJ_LIST OBJ_LIST;

typedef struct OBJ_STRUCT OBJ_STRUCT;

typedef struct CPad CPad;

typedef enum TXT_JUST TXT_JUST;

typedef struct CFont CFont;

typedef struct Dialog Dialog;

typedef struct SCREEN_ENV SCREEN_ENV;

typedef struct DB DB;

typedef struct ShadowStruct ShadowStruct;

typedef struct ScrollStruct ScrollStruct;

typedef struct THEME_LOC THEME_LOC;

typedef struct MINIXY MINIXY;

typedef struct MICROS MICROS;

typedef struct map_info map_info;

typedef struct tab_entry tab_entry;

typedef enum _item_indexes _item_indexes;

typedef struct PLStruct PLStruct;

typedef struct UItemStruct UItemStruct;

typedef struct ItemDataStruct ItemDataStruct;

typedef struct ItemGetRecordStruct ItemGetRecordStruct;

typedef struct ItemStruct ItemStruct;

typedef struct PlayerStruct PlayerStruct;

typedef struct controller_pos controller_pos;

typedef struct pad_assigns pad_assigns;

typedef struct KEY_ASSIGNS KEY_ASSIGNS;

typedef struct KEY_ASSIGNS key_assigns;

typedef struct LittleGt4 LittleGt4;

typedef struct CBlocks CBlocks;

typedef enum PACTION PACTION;

typedef struct CPlayer CPlayer;

typedef struct Spell_Target Spell_Target;

typedef struct GamePad GamePad;

typedef struct found_objects found_objects;

typedef void (*CdlCB)();

typedef struct CdlLOC CdlLOC;

typedef struct CdlFILTER CdlFILTER;

typedef struct CdlATV CdlATV;

typedef struct CdlFILE CdlFILE;

typedef struct StHEADER StHEADER;

typedef struct PCIO PCIO;

typedef struct CdIO CdIO;

typedef struct DList DList;

typedef char *MEMBLOCK;

typedef struct ARGB ARGB;

typedef struct shapetbl shapetbl;

typedef struct shapetbl SHAPE;

typedef struct windowtbl windowtbl;

typedef struct windowtbl WINDOW;

typedef struct coorddef coorddef;

typedef struct coorddef LIBCOORD;

typedef struct scoorddef scoorddef;

typedef struct scoorddef SCOORD;

typedef struct matrixtdef matrixtdef;

typedef struct matrixtdef MATRIX3DT;

typedef void (*VOIDFN)();

typedef struct TSPRT TSPRT;

typedef int INTFN();

typedef struct memclassstruct memclassstruct;

typedef struct memclassstruct MEMORYCLASS;

typedef struct FONTFILE FONTFILE;

typedef struct coordsdef coordsdef;

typedef struct coordsdef COORDS;

typedef struct linedef linedef;

typedef struct linedef LINE;

typedef struct linesdef linesdef;

typedef struct linesdef LINES;

typedef struct dirangledef dirangledef;

typedef struct dirangledef DIRANGLES;

typedef struct arcangledef arcangledef;

typedef struct arcangledef ARCANGLES;

typedef struct SHAPETABLEENTRY SHAPETABLEENTRY;

typedef struct SHAPEFILE SHAPEFILE;

typedef struct radialsymdef radialsymdef;

typedef struct radialsymdef RADIALSYM;

typedef struct graphicsmodeinfostruct graphicsmodeinfostruct;

typedef struct graphicsmodeinfostruct GRAPHICSMODEINFO;

typedef void MVI;

typedef int EACHOOKCALLBACKFUNC();

typedef int arg_t;

typedef struct chunkhdrstruct chunkhdrstruct;

typedef struct chunkhdrstruct CHUNKHDR;

typedef struct chunkhdrchkstruct chunkhdrchkstruct;

typedef struct chunkhdrchkstruct CHUNKHDRCHK;

typedef void THREADPROC();

typedef int SYSTEMTASK();

typedef struct UNIQUEID UNIQUEID;

typedef struct threadstruct threadstruct;

typedef struct threadstruct THREAD;

typedef struct cdstreamstruct cdstreamstruct;

typedef struct cdstreamstruct CDSTREAM;

typedef struct STREAM STREAM;

typedef struct STRHDR STRHDR;

typedef struct SFXHDR SFXHDR;

typedef enum OVER_TYPE OVER_TYPE;

typedef unsigned short DECDCTTAB[34816];

typedef struct DECDCTENV DECDCTENV;

typedef struct ENCSPUENV ENCSPUENV;

typedef struct SpuVolume SpuVolume;

typedef struct SpuVoiceAttr SpuVoiceAttr;

typedef struct SpuReverbAttr SpuReverbAttr;

typedef struct SpuDecodedData SpuDecodedData;

typedef struct SpuDecodedData SpuDecodeData;

typedef struct SpuExtAttr SpuExtAttr;

typedef struct SpuCommonAttr SpuCommonAttr;

typedef void (*SpuIRQCallbackProc)();

typedef void (*SpuTransferCallbackProc)();

typedef struct SpuEnv SpuEnv;

typedef struct SpuStVoiceAttr SpuStVoiceAttr;

typedef struct SpuStEnv SpuStEnv;

typedef void (*SpuStCallbackProc)();

typedef struct VabHdr VabHdr;

typedef struct ProgAtr ProgAtr;

typedef struct VagAtr VagAtr;

typedef struct SndVolume SndVolume;

typedef struct SndVolume2 SndVolume2;

typedef struct SndRegisterAttr SndRegisterAttr;

typedef struct SndVoiceStats SndVoiceStats;

typedef void (*SsMarkCallbackProc)();

typedef struct _SsFCALL _SsFCALL;

typedef void (*MissPrintPtr)();

typedef struct MissileStruct MissileStruct;

typedef struct SPELLFX_DAT SPELLFX_DAT;

typedef struct Particle Particle;

typedef struct strheader strheader;

typedef int strdata[504];

typedef struct strsec strsec;

typedef struct mdc_header mdc_header;

typedef enum ping_status ping_status;

typedef struct file_header file_header;

typedef enum write_ret write_ret;

typedef enum read_ret read_ret;

typedef enum card_events card_events;

typedef void (*FeFuncPtr)();

typedef struct FeTable FeTable;

typedef struct FeStruct FeStruct;

typedef struct FE_PLR FE_PLR;

typedef struct FE_CREATE FE_CREATE;

typedef struct LOAD_IMAGE_ARGS LOAD_IMAGE_ARGS;

typedef struct PRIM_BUFFER PRIM_BUFFER;

typedef enum TPAGE_TYPES TPAGE_TYPES;

typedef struct TP_LINK TP_LINK;

typedef struct TPAGE_DEF TPAGE_DEF;

typedef struct MEM_INFO MEM_INFO;

typedef enum FILE_SYSTEM FILE_SYSTEM;

typedef enum DEV_KIT DEV_KIT;

typedef struct LNK_OPTS LNK_OPTS;

typedef struct DatIO DatIO;

typedef struct PanelXY PanelXY;

typedef struct GPanel GPanel;

typedef struct DPatsStruct DPatsStruct;

typedef struct NODE NODE;

typedef struct NODE HALLNODE;

typedef struct ROOMNODE ROOMNODE;

typedef struct bank_entry bank_entry;

typedef struct QuestStruct QuestStruct;

typedef struct QuestData QuestData;

typedef struct SNDPLAYOPTS SNDPLAYOPTS;

typedef struct SNDLIMITS SNDLIMITS;

typedef struct SNDUSAGE SNDUSAGE;

typedef struct DR_LOAD2 DR_LOAD2;

typedef struct MEMSTRUCT MEMSTRUCT;

typedef struct TextDataStruct TextDataStruct;

typedef struct TriggerStruct TriggerStruct;

typedef struct OBJ_LOAD_INFO OBJ_LOAD_INFO;

typedef struct ObjDataStruct ObjDataStruct;

typedef struct ObjectStruct ObjectStruct;

typedef struct PortalStruct PortalStruct;

typedef enum _setlevels _setlevels;

typedef struct TCmd TCmd;

typedef struct TCmdLoc TCmdLoc;

typedef struct TCmdLocParam1 TCmdLocParam1;

typedef struct TCmdLocParam2 TCmdLocParam2;

typedef struct TCmdLocParam3 TCmdLocParam3;

typedef struct TCmdParam1 TCmdParam1;

typedef struct TCmdParam2 TCmdParam2;

typedef struct TCmdParam3 TCmdParam3;

typedef struct TCmdGolem TCmdGolem;

typedef struct TCmdQuest TCmdQuest;

typedef struct TCmdGItem TCmdGItem;

typedef struct TCmdPItem TCmdPItem;

typedef struct TCmdChItem TCmdChItem;

typedef struct TCmdDelItem TCmdDelItem;

typedef struct TCmdDamage TCmdDamage;

typedef struct TCmdPlrInfoHdr TCmdPlrInfoHdr;

typedef struct TCmdString TCmdString;

typedef struct TFakeCmdPlr TFakeCmdPlr;

typedef struct TFakeDropPlr TFakeDropPlr;

typedef struct TSyncHeader TSyncHeader;

typedef struct TSyncMonster TSyncMonster;

typedef struct TPktHdr TPktHdr;

typedef struct TPkt TPkt;

typedef struct DMonsterStr DMonsterStr;

typedef struct DObjectStr DObjectStr;

typedef struct DLevel DLevel;

typedef struct LocalLevel LocalLevel;

typedef struct DPortal DPortal;

typedef struct MultiQuests MultiQuests;

typedef struct DJunk DJunk;

typedef struct STextStruct STextStruct;

typedef struct CPauseMessages CPauseMessages;

typedef struct CTempPauseMessage CTempPauseMessage;

typedef struct FontItem FontItem;

typedef struct FontTab FontTab;

typedef struct TNQ TNQ;

typedef struct TownerStruct TownerStruct;

typedef struct QuestTalkData QuestTalkData;

typedef struct POLY_FT4 (**OBJ_PFUNC)();

typedef struct LightListStruct LightListStruct;

typedef struct LightListStruct2 LightListStruct2;

typedef struct DeadStruct DeadStruct;

typedef struct TownToCreature TownToCreature;

typedef struct RGBPOLY RGBPOLY;

typedef struct Overlay Overlay;

typedef void (*TMenuFcn)();

typedef struct TMenuItem TMenuItem;

typedef void (*TMenuUpdateFcn)();

typedef struct SpellData SpellData;

typedef unsigned char PACKET;

typedef struct GsCOORD2PARAM GsCOORD2PARAM;

typedef struct _GsCOORDINATE2 _GsCOORDINATE2;

typedef struct _GsCOORDINATE2 GsCOORDINATE2;

typedef struct GsVIEW2 GsVIEW2;

typedef struct GsRVIEW2 GsRVIEW2;

typedef struct GsF_LIGHT GsF_LIGHT;

typedef struct GsOT_TAG GsOT_TAG;

typedef struct GsOT GsOT;

typedef struct GsDOBJ2 GsDOBJ2;

typedef struct GsDOBJ3 GsDOBJ3;

typedef struct GsDOBJ2 GsDOBJ4;

typedef struct GsDOBJ5 GsDOBJ5;

typedef struct GsSPRITE GsSPRITE;

typedef struct GsSPARRAY GsSPARRAY;

typedef struct GsCELL GsCELL;

typedef struct GsMAP GsMAP;

typedef struct GsBG GsBG;

typedef struct GsLINE GsLINE;

typedef struct GsGLINE GsGLINE;

typedef struct GsBOXF GsBOXF;

typedef struct GsFOGPARAM GsFOGPARAM;

typedef struct GsIMAGE GsIMAGE;

typedef struct _GsPOSITION _GsPOSITION;

typedef struct GsOBJTABLE2 GsOBJTABLE2;

typedef struct _GsFCALL _GsFCALL;

typedef struct TMD_P_F3 TMD_P_F3;

typedef struct TMD_P_G3 TMD_P_G3;

typedef struct TMD_P_F3G TMD_P_F3G;

typedef struct TMD_P_G3G TMD_P_G3G;

typedef struct TMD_P_NF3 TMD_P_NF3;

typedef struct TMD_P_NG3 TMD_P_NG3;

typedef struct TMD_P_F4 TMD_P_F4;

typedef struct TMD_P_G4 TMD_P_G4;

typedef struct TMD_P_F4G TMD_P_F4G;

typedef struct TMD_P_G4G TMD_P_G4G;

typedef struct TMD_P_NF4 TMD_P_NF4;

typedef struct TMD_P_NG4 TMD_P_NG4;

typedef struct TMD_P_TF3 TMD_P_TF3;

typedef struct TMD_P_TG3 TMD_P_TG3;

typedef struct TMD_P_TNF3 TMD_P_TNF3;

typedef struct TMD_P_TNG3 TMD_P_TNG3;

typedef struct TMD_P_TF4 TMD_P_TF4;

typedef struct TMD_P_TG4 TMD_P_TG4;

typedef struct TMD_P_TNF4 TMD_P_TNF4;

typedef struct TMD_P_TNG4 TMD_P_TNG4;

typedef struct TMD_STRUCT TMD_STRUCT;

typedef struct VERT VERT;

typedef struct VERTC VERTC;

typedef struct GsADIV_FT4 GsADIV_FT4;

typedef struct GsADIV_P_FT4 GsADIV_P_FT4;

typedef struct GsADIV_GT4 GsADIV_GT4;

typedef struct GsADIV_P_GT4 GsADIV_P_GT4;

typedef struct GsADIV_G4 GsADIV_G4;

typedef struct GsADIV_P_GT4 GsADIV_P_G4;

typedef struct GsADIV_F4 GsADIV_F4;

typedef struct GsADIV_P_FT4 GsADIV_P_F4;

typedef struct GsADIV_FT3 GsADIV_FT3;

typedef struct GsADIV_P_FT3 GsADIV_P_FT3;

typedef struct GsADIV_GT3 GsADIV_GT3;

typedef struct GsADIV_P_GT3 GsADIV_P_GT3;

typedef struct GsADIV_G3 GsADIV_G3;

typedef struct GsADIV_P_GT3 GsADIV_P_G3;

typedef struct GsADIV_F3 GsADIV_F3;

typedef struct GsADIV_P_FT3 GsADIV_P_F3;

typedef struct _GsCOORDUNIT _GsCOORDUNIT;

typedef struct _GsCOORDUNIT GsCOORDUNIT;

typedef struct GsVIEWUNIT GsVIEWUNIT;

typedef struct GsRVIEWUNIT GsRVIEWUNIT;

typedef struct GsUNIT GsUNIT;

typedef struct GsTYPEUNIT GsTYPEUNIT;

typedef struct GsARGUNIT GsARGUNIT;

typedef struct GsWORKUNIT GsWORKUNIT;

typedef struct GsARGUNIT_NORMAL GsARGUNIT_NORMAL;

typedef struct GsARGUNIT_SHARED GsARGUNIT_SHARED;

typedef struct GsARGUNIT_IMAGE GsARGUNIT_IMAGE;

typedef struct GsARGUNIT_GND GsARGUNIT_GND;

typedef struct GsARGUNIT_GNDT GsARGUNIT_GNDT;

typedef struct GsARGUNIT_JntMIMe GsARGUNIT_JntMIMe;

typedef struct GsARGUNIT_RstJntMIMe GsARGUNIT_RstJntMIMe;

typedef struct GsARGUNIT_VNMIMe GsARGUNIT_VNMIMe;

typedef struct GsARGUNIT_RstVNMIMe GsARGUNIT_RstVNMIMe;

typedef struct GsARGUNIT_ANIM GsARGUNIT_ANIM;

typedef struct GsSEH GsSEH;

typedef struct GsSEQ GsSEQ;

typedef struct InitPos InitPos;

typedef struct t11TLinkedList1Z8PalEntry t11TLinkedList1Z8PalEntry;

typedef struct PalEntry PalEntry;

typedef struct t10Collection2Z8PalEntryi20 t10Collection2Z8PalEntryi20;

typedef struct PalCollection PalCollection;

typedef struct BIRDSTRUCT BIRDSTRUCT;

typedef struct BIRDSTRUCT Bird;

typedef struct Perch Perch;

typedef struct PInf PInf;

typedef struct bird bird;

typedef struct _HSCODESTREAM _HSCODESTREAM;

typedef struct _HSCODESTREAM *HSCODESTREAM;

typedef struct _SCODEEXECUTEDATA _SCODEEXECUTEDATA;

typedef struct _SCODEEXECUTEDATA SCODEEXECUTEDATA;

typedef struct _SCODEEXECUTEDATA *SCODEEXECUTEDATAPTR;

typedef void (*SEVTHANDLER)();

typedef struct _HSARCHIVE _HSARCHIVE;

typedef struct _HSARCHIVE *HSARCHIVE;

typedef struct _HSFILE _HSFILE;

typedef struct _HSFILE *HSFILE;

typedef struct _HSFINDFILE _HSFINDFILE;

typedef struct _HSFINDFILE *HSFINDFILE;

typedef struct _HSGDIOBJ _HSGDIOBJ;

typedef struct _HSGDIOBJ *HSGDIOBJ;

typedef struct _HSGDIFONT _HSGDIFONT;

typedef struct _HSGDIFONT *HSGDIFONT;

typedef struct _PARAMS _PARAMS;

typedef struct _PARAMS PARAMS;

typedef struct _PARAMS *PARAMSPTR;

typedef struct _PARAMS *LPPARAMS;

typedef unsigned char (*SMSGIDLEPROC)();

typedef void (*SMSGHANDLER)();

typedef struct _SNETCAPS _SNETCAPS;

typedef struct _SNETCAPS SNETCAPS;

typedef struct _SNETCAPS *SNETCAPSPTR;

typedef struct _SNETCREATEDATA _SNETCREATEDATA;

typedef struct _SNETCREATEDATA SNETCREATEDATA;

typedef struct _SNETCREATEDATA *SNETCREATEDATAPTR;

typedef struct _SNET_DATA_SYSCOLORTABLE _SNET_DATA_SYSCOLORTABLE;

typedef struct _SNET_DATA_SYSCOLORTABLE SNET_DATA_SYSCOLORTABLE;

typedef struct _SNET_DATA_SYSCOLORTABLE *SNET_DATA_SYSCOLORTABLEPTR;

typedef struct _SNETEVENT _SNETEVENT;

typedef struct _SNETEVENT SNETEVENT;

typedef struct _SNETEVENT *SNETEVENTPTR;

typedef unsigned char (*SNETABORTPROC)();

typedef unsigned char (*SNETCATEGORYPROC)();

typedef unsigned char (*SNETCHECKAUTHPROC)();

typedef unsigned char (*SNETCREATEPROC)();

typedef unsigned char (*SNETDRAWDESCPROC)();

typedef unsigned char (*SNETENUMDEVICESPROC)();

typedef unsigned char (*SNETENUMGAMESPROC)();

typedef unsigned char (*SNETENUMPROVIDERSPROC)();

typedef void (*SNETEVENTPROC)();

typedef unsigned char (*SNETGETARTPROC)();

typedef unsigned char (*SNETGETDATAPROC)();

typedef int (*SNETMESSAGEBOXPROC)();

typedef unsigned char (*SNETPLAYSOUNDPROC)();

typedef unsigned char (*SNETSELECTEDPROC)();

typedef unsigned char (*SNETSTATUSPROC)();

typedef struct _SNETPLAYERDATA _SNETPLAYERDATA;

typedef struct _SNETPLAYERDATA SNETPLAYERDATA;

typedef struct _SNETPLAYERDATA *SNETPLAYERDATAPTR;

typedef struct _SNETPROGRAMDATA _SNETPROGRAMDATA;

typedef struct _SNETPROGRAMDATA SNETPROGRAMDATA;

typedef struct _SNETPROGRAMDATA *SNETPROGRAMDATAPTR;

typedef struct _SNETUIDATA _SNETUIDATA;

typedef struct _SNETUIDATA SNETUIDATA;

typedef struct _SNETUIDATA *SNETUIDATAPTR;

typedef struct _SNETVERSIONDATA _SNETVERSIONDATA;

typedef struct _SNETVERSIONDATA SNETVERSIONDATA;

typedef struct _SNETVERSIONDATA *SNETVERSIONDATAPTR;

typedef struct _SNETADDR _SNETADDR;

typedef struct _SNETADDR SNETADDR;

typedef struct _SNETADDR *SNETADDRPTR;

typedef struct _SNETSPI_DEVICELIST _SNETSPI_DEVICELIST;

typedef struct _SNETSPI_DEVICELIST SNETSPI_DEVICELIST;

typedef struct _SNETSPI_DEVICELIST *SNETSPI_DEVICELISTPTR;

typedef struct _SNETSPI_GAMELIST _SNETSPI_GAMELIST;

typedef struct _SNETSPI_GAMELIST SNETSPI_GAMELIST;

typedef struct _SNETSPI_GAMELIST *SNETSPI_GAMELISTPTR;

typedef struct _SNETSPI _SNETSPI;

typedef struct _SNETSPI SNETSPI;

typedef struct _SNETSPI *SNETSPIPTR;

typedef unsigned char (*SNETSPIBIND)();

typedef unsigned char (*SNETSPIQUERY)();

typedef struct _HSVIDEO _HSVIDEO;

typedef struct _HSVIDEO *HSVIDEO;

typedef struct _SVIDPALETTEUSE _SVIDPALETTEUSE;

typedef struct _SVIDPALETTEUSE SVIDPALETTEUSE;

typedef struct _SVIDPALETTEUSE *SVIDPALETTEUSEPTR;

typedef struct CCritSect CCritSect;

typedef struct CLock CLock;

typedef enum _ui_classes _ui_classes;

typedef enum _copyprot_results _copyprot_results;

typedef void (*PLAYSND)();

typedef enum _mainmenu_selections _mainmenu_selections;

typedef enum _difficulty _difficulty;

typedef struct _gamedata TGAMEDATA;

typedef struct _gamedata _gamedata;

typedef struct _uiheroinfo TUIHEROINFO;

typedef struct _uiheroinfo *TPUIHEROINFO;

typedef struct _uidefaultstats _uidefaultstats;

typedef struct _uidefaultstats TUIDEFSTATS;

typedef struct _uidefaultstats *TPUIDEFSTATS;

typedef struct _uiheroinfo _uiheroinfo;

typedef unsigned char (*ENUMHEROPROC)();

typedef unsigned char (*ENUMHEROS)();

typedef unsigned char (*CREATEHERO)();

typedef unsigned char (*DELETEHERO)();

typedef unsigned char (*GETDEFHERO)();

typedef enum _selhero_selections _selhero_selections;

typedef int (*PROGRESSFCN)();

typedef enum _dialmodes _dialmodes;

typedef struct _modeminfo TMODEM;

typedef struct _modeminfo *TPMODEM;

typedef struct _modeminfo _modeminfo;

typedef struct OrigPkItemStruct OrigPkItemStruct;

typedef struct PcPkItemStruct PcPkItemStruct;

typedef struct PcPkPlayerStruct PcPkPlayerStruct;

typedef struct PkItemStruct PkItemStruct;

typedef struct PkPlayerStruct PkPlayerStruct;

typedef struct OMENUITEM OMENUITEM;

typedef struct OMENULIST OMENULIST;

typedef struct FMVDAT FMVDAT;

typedef struct kindexS kindexS;

typedef struct block block;

typedef struct FeMenuTable FeMenuTable;

typedef struct Creds Creds;

typedef enum hw_event hw_event;

typedef struct sjis sjis;

typedef struct _mdecanim _mdecanim;

typedef struct _mdecanim mdecanim;

typedef struct asec asec;

typedef unsigned long REG_OFF;

typedef struct CSDATA CSDATA;

typedef void (*MIADDPRC)();

typedef void (*MIPROC)();

typedef struct MissileData MissileData;

typedef struct MisFileData MisFileData;

typedef struct ThemeStruct ThemeStruct;

typedef struct _FILEHEADER _FILEHEADER;

typedef struct _FILEHEADER FILEHEADER;

typedef struct _FILEHEADER *FILEHEADERPTR;

typedef struct _HASHENTRY _HASHENTRY;

typedef struct _HASHENTRY HASHENTRY;

typedef struct _HASHENTRY *HASHENTRYPTR;

typedef struct _BLOCKENTRY _BLOCKENTRY;

typedef struct _BLOCKENTRY BLOCKENTRY;

typedef struct _BLOCKENTRY *BLOCKENTRYPTR;

typedef unsigned char (*TGetNameFcn)();

typedef struct _SHAREDDATA _SHAREDDATA;

typedef struct _SHAREDDATA SHAREDDATA;

typedef struct _SHAREDDATA *SHAREDDATAPTR;

typedef void (*TCrypt)();

typedef struct CompLevelMemImage CompLevelMemImage;

typedef struct CompLevelMaps CompLevelMaps;

typedef struct TMegaPkt TMegaPkt;

typedef struct TBuffer TBuffer;

typedef struct tagPATHNODE tagPATHNODE;

typedef struct tagPATHNODE PATHNODE;

typedef unsigned char (*CHECKFUNC1)();

typedef struct bbssbb bbssbb;

typedef struct MESSAGE_STR MESSAGE_STR;

typedef struct MONTH_DAYS MONTH_DAYS;

typedef unsigned char (*CHECKFUNC)();

typedef struct InvXY InvXY;

typedef struct MEM_HDR MEM_HDR;

typedef struct MEM_REG MEM_REG;

typedef struct MEM_HDR (**FIND_ROUTINE)();

typedef struct FILE FILE;

/* Begin typedefs which were autogenerated by TDR */

typedef unsigned char (*TDRFuncPtr_FindPath__FPFiii_UciiiiiPc0PosOk)();

typedef unsigned char (*TDRFuncPtr_LineClearF__FPFii_Uciiii0Clear)();

typedef unsigned char (*TDRFuncPtr_LineClearF1__FPFiii_Uciiiii0Clear)();

typedef unsigned char (*TDRFuncPtr_SortMemHdrList1CompFunc)();

typedef unsigned long (*TDRFuncPtr_GRL_SetWindowProc__FPFUlUilUl_Ul)();

typedef unsigned long (*TDRFuncPtr_GRL_SetWindowProc__FPFUlUilUl_Ul0NewProc)();

typedef void (*TDRFuncPtr_DBG_SetErrorFunc0EFunc)();

typedef void (*TDRFuncPtr_DBG_SetMessageHandler0Func)();

typedef void (*TDRFuncPtr_DBG_SetPollRoutine0Func)();

typedef void (*TDRFuncPtr_GAL_IterateEmptyMem1Func)();

typedef void (*TDRFuncPtr_GAL_IterateUsedMem1Func)();

typedef void (*TDRFuncPtr_GAL_SetAllocFilter)();

typedef void (*TDRFuncPtr_GAL_SetAllocFilter0NewFilter)();

typedef void (*TDRFuncPtr_GetActionButton__7GamePadPFi_v1func)();

typedef void (*TDRFuncPtr_GSYS_SetStackAndJump1Func)();

typedef void (*TDRFuncPtr_init_mem_card__FPFii_v0handler)();

typedef void (*TDRFuncPtr_SetComboDownButton__7GamePadiPFi_v2func)();

typedef void (*TDRFuncPtr_SetDownButton__7GamePadiPFi_v2func)();

typedef void (*TDRFuncPtr_SetUpAction__7GamePadPFi_vT11func)();

typedef void (*TDRFuncPtr_SetUpAction__7GamePadPFi_vT12upfunc)();

typedef void (*TDRFuncPtr_TSK_AddTask1Main)();

typedef void (*TDRFuncPtr_TSK_IterateTasks2CallBack)();

typedef void (*TDRFuncPtr_TSK_JumpAndResetStack0RunFunc)();

typedef void (*TDRFuncPtr_TSK_RepointProc1Func)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksEpilogue)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksEpilogue0Func)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksPrologue)();

typedef void (*TDRFuncPtr_TSK_SetDoTasksPrologue0Func)();

typedef void (*TDRFuncPtr_TSK_SetStackFloodCallback)();

typedef void (*TDRFuncPtr_TSK_SetStackFloodCallback0Func)();

typedef void (*TDRFuncPtr_TSK_SetTaskEpilogue)();

typedef void (*TDRFuncPtr_TSK_SetTaskEpilogue0Epi)();

typedef void (*TDRFuncPtr_TSK_SetTaskPrologue)();

typedef void (*TDRFuncPtr_TSK_SetTaskPrologue0Pro)();

typedef void (*TDRFuncPtr_VID_DoThisNextSync__FPFv_v0Func)();

typedef void * (*TDRFuncPtr_LoAsyncStreamFile__4CdIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_LoStreamFile__4CdIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_LoStreamFile__4PCIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_LoStreamFile__5DatIOPCciPFPUciib_bii3Func)();

typedef void * (*TDRFuncPtr_StreamFile__6FileIOPCciPFPUciib_bii3Func)();

/* End typedefs which were autogenerated by TDR */

/* End typedefs */

/* Begin external declarations */

extern int NumOfMonsterListLevels; // offset 0x8012A6F4
extern struct MonstLevel AllLevels[16]; // offset 0x800A76AC
static unsigned char NumsLEV1M1A[4]; // offset 0x8012A3F0
static unsigned char NumsLEV1M1B[4]; // offset 0x8012A3F4
static unsigned char NumsLEV1M1C[5]; // offset 0x8012A3F8
static unsigned char NumsLEV2M2A[4]; // offset 0x8012A400
static unsigned char NumsLEV2M2B[4]; // offset 0x8012A404
static unsigned char NumsLEV2M2C[3]; // offset 0x8012A408
static unsigned char NumsLEV2M2D[4]; // offset 0x8012A40C
static unsigned char NumsLEV2M2QA[4]; // offset 0x8012A410
static unsigned char NumsLEV2M2QB[4]; // offset 0x8012A414
static unsigned char NumsLEV3M3A[4]; // offset 0x8012A418
static unsigned char NumsLEV3M3QA[3]; // offset 0x8012A41C
static unsigned char NumsLEV3M3B[4]; // offset 0x8012A420
static unsigned char NumsLEV3M3C[4]; // offset 0x8012A424
static unsigned char NumsLEV4M4A[4]; // offset 0x8012A428
static unsigned char NumsLEV4M4QA[4]; // offset 0x8012A42C
static unsigned char NumsLEV4M4B[4]; // offset 0x8012A430
static unsigned char NumsLEV4M4QB[5]; // offset 0x8012A434
static unsigned char NumsLEV4M4C[4]; // offset 0x8012A43C
static unsigned char NumsLEV4M4QC[5]; // offset 0x8012A440
static unsigned char NumsLEV4M4D[4]; // offset 0x8012A448
static unsigned char NumsLEV5M5A[4]; // offset 0x8012A44C
static unsigned char NumsLEV5M5B[4]; // offset 0x8012A450
static unsigned char NumsLEV5M5C[4]; // offset 0x8012A454
static unsigned char NumsLEV5M5D[4]; // offset 0x8012A458
static unsigned char NumsLEV5M5E[4]; // offset 0x8012A45C
static unsigned char NumsLEV5M5F[3]; // offset 0x8012A460
static unsigned char NumsLEV5M5QA[4]; // offset 0x8012A464
static unsigned char NumsLEV6M6A[5]; // offset 0x8012A468
static unsigned char NumsLEV6M6B[3]; // offset 0x8012A470
static unsigned char NumsLEV6M6C[4]; // offset 0x8012A474
static unsigned char NumsLEV6M6D[3]; // offset 0x8012A478
static unsigned char NumsLEV6M6E[3]; // offset 0x8012A47C
static unsigned char NumsLEV7M7A[4]; // offset 0x8012A480
static unsigned char NumsLEV7M7B[4]; // offset 0x8012A484
static unsigned char NumsLEV7M7C[3]; // offset 0x8012A488
static unsigned char NumsLEV7M7D[2]; // offset 0x8012A48C
static unsigned char NumsLEV7M7E[2]; // offset 0x8012A490
static unsigned char NumsLEV8M8QA[2]; // offset 0x8012A494
static unsigned char NumsLEV8M8A[3]; // offset 0x8012A498
static unsigned char NumsLEV8M8B[4]; // offset 0x8012A49C
static unsigned char NumsLEV8M8C[3]; // offset 0x8012A4A0
static unsigned char NumsLEV8M8D[2]; // offset 0x8012A4A4
static unsigned char NumsLEV8M8E[2]; // offset 0x8012A4A8
static unsigned char NumsLEV9M9A[4]; // offset 0x8012A4AC
static unsigned char NumsLEV9M9B[3]; // offset 0x8012A4B0
static unsigned char NumsLEV9M9C[2]; // offset 0x8012A4B4
static unsigned char NumsLEV9M9D[2]; // offset 0x8012A4B8
static unsigned char NumsLEV10M10A[3]; // offset 0x8012A4BC
static unsigned char NumsLEV10M10B[2]; // offset 0x8012A4C0
static unsigned char NumsLEV10M10C[2]; // offset 0x8012A4C4
static unsigned char NumsLEV10M10D[2]; // offset 0x8012A4C8
static unsigned char NumsLEV10M10QA[3]; // offset 0x8012A4CC
static unsigned char NumsLEV11M11A[3]; // offset 0x8012A4D0
static unsigned char NumsLEV11M11B[3]; // offset 0x8012A4D4
static unsigned char NumsLEV11M11C[3]; // offset 0x8012A4D8
static unsigned char NumsLEV11M11D[3]; // offset 0x8012A4DC
static unsigned char NumsLEV11M11E[2]; // offset 0x8012A4E0
static unsigned char NumsLEV12M12A[3]; // offset 0x8012A4E4
static unsigned char NumsLEV12M12B[3]; // offset 0x8012A4E8
static unsigned char NumsLEV12M12C[3]; // offset 0x8012A4EC
static unsigned char NumsLEV12M12D[3]; // offset 0x8012A4F0
static unsigned char NumsLEV13M13A[3]; // offset 0x8012A4F4
static unsigned char NumsLEV13M13B[2]; // offset 0x8012A4F8
static unsigned char NumsLEV13M13QB[3]; // offset 0x8012A4FC
static unsigned char NumsLEV13M13C[3]; // offset 0x8012A500
static unsigned char NumsLEV13M13D[2]; // offset 0x8012A504
static unsigned char NumsLEV14M14A[3]; // offset 0x8012A508
static unsigned char NumsLEV14M14B[3]; // offset 0x8012A50C
static unsigned char NumsLEV14M14QB[3]; // offset 0x8012A510
static unsigned char NumsLEV14M14C[3]; // offset 0x8012A514
static unsigned char NumsLEV14M14D[3]; // offset 0x8012A518
static unsigned char NumsLEV14M14E[2]; // offset 0x8012A51C
static unsigned char NumsLEV15M15A[3]; // offset 0x8012A520
static unsigned char NumsLEV15M15B[3]; // offset 0x8012A524
static unsigned char NumsLEV15M15C[2]; // offset 0x8012A528
static unsigned char NumsLEV16M16D[3]; // offset 0x8012A52C
static struct MonstList ChoiceListLEV1[3]; // offset 0x800A71EC
static struct MonstList ChoiceListLEV2[6]; // offset 0x800A721C
static struct MonstList ChoiceListLEV3[4]; // offset 0x800A727C
static struct MonstList ChoiceListLEV4[7]; // offset 0x800A72BC
static struct MonstList ChoiceListLEV5[7]; // offset 0x800A732C
static struct MonstList ChoiceListLEV6[5]; // offset 0x800A739C
static struct MonstList ChoiceListLEV7[5]; // offset 0x800A73EC
static struct MonstList ChoiceListLEV8[6]; // offset 0x800A743C
static struct MonstList ChoiceListLEV9[4]; // offset 0x800A749C
static struct MonstList ChoiceListLEV10[5]; // offset 0x800A74DC
static struct MonstList ChoiceListLEV11[5]; // offset 0x800A752C
static struct MonstList ChoiceListLEV12[4]; // offset 0x800A757C
static struct MonstList ChoiceListLEV13[5]; // offset 0x800A75BC
static struct MonstList ChoiceListLEV14[6]; // offset 0x800A760C
static struct MonstList ChoiceListLEV15[3]; // offset 0x800A766C
static struct MonstList ChoiceListLEV16[1]; // offset 0x800A769C
static struct TASK *GameTaskPtr; // offset 0x8012BF90
extern struct LOAD_IMAGE_ARGS AllArgs[30]; // offset 0x800A772C
extern int ArgsSoFar; // offset 0x8012A704
extern unsigned long *ThisOt; // offset 0x8012A714
extern struct POLY_FT4 *ThisPrimAddr; // offset 0x8012A718
static long hndPrimBuffers; // offset 0x8012BF94
static struct PRIM_BUFFER *PrimBuffers; // offset 0x8012BF98
static unsigned char BufferDepth; // offset 0x8012BF9C
static unsigned char WorkRamId; // offset 0x8012BF9D
static unsigned char ScrNum; // offset 0x8012BF9E
static struct SCREEN_ENV *Screens; // offset 0x8012BFA0
static struct PRIM_BUFFER *PbToClear; // offset 0x8012BFA4
static unsigned char BufferNum; // offset 0x8012BFA8
extern struct POLY_FT4 *AddrToAvoid; // offset 0x8012A71C
static unsigned char LastBuffer; // offset 0x8012BFA9
static struct DISPENV *DispEnvToPut; // offset 0x8012BFAC
static int ThisOtSize; // offset 0x8012BFB0
static struct RECT ScrRect; // offset 0x8012A720
static int VidWait; // offset 0x8012BFB4
static struct SCREEN_ENV screen[2]; // offset 0x8012C400
static unsigned long VidTick; // offset 0x8012BFBC
static int VXOff; // offset 0x8012BFC0
static int VYOff; // offset 0x8012BFC4
extern struct LNK_OPTS *Gaz; // offset 0x8012A734
extern int LastFmem; // offset 0x8012A738
extern unsigned int GSYS_MemStart; // offset 0x8012A728
extern unsigned int GSYS_MemEnd; // offset 0x8012A72C
static struct MEM_INIT_INFO PsxMem; // offset 0x800A7A74
static struct MEM_INIT_INFO PsxFastMem; // offset 0x800A7A9C
extern int LowestFmem; // offset 0x8012A730
extern int FileSYS; // offset 0x8012A748
static struct FileIO *FileSystem; // offset 0x8012BFC8
static struct FileIO *OverlayFileSystem; // offset 0x8012BFCC
extern short DavesPad; // offset 0x8012A762
extern short DavesPadDeb; // offset 0x8012A764
static struct POLY_FT4 MyFT4; // offset 0x8012C4E0
extern struct TextDat (*AllDats[285]); // offset 0x800A8368
extern int TpW; // offset 0x8012A7B4
extern int TpH; // offset 0x8012A7B8
extern int TpXDest; // offset 0x8012A7BC
extern int TpYDest; // offset 0x8012A7C0
extern struct RECT R; // offset 0x8012A7C4
extern struct POLY_GT4 MyGT4; // offset 0x800A87DC
extern struct POLY_GT3 MyGT3; // offset 0x800A8810
extern struct TextDat DatPool[20]; // offset 0x800A7AF8
static void * ChunkGot; // offset 0x8012A7D8
extern char STREAM_DIR[16]; // offset 0x800A8838
extern char STREAM_BIN[16]; // offset 0x800A8848
extern unsigned char EAC_DirectoryCache[300]; // offset 0x800A8858
extern unsigned long BL_NoLumpFiles; // offset 0x8012A7EC
extern unsigned long BL_NoStreamFiles; // offset 0x8012A7F0
extern struct STRHDR *LFileTab; // offset 0x8012A7F4
extern struct STRHDR *SFileTab; // offset 0x8012A7F8
extern unsigned char FileLoaded; // offset 0x8012A7FC
extern int NoTAllocs; // offset 0x8012A82C
extern struct MEMSTRUCT MemBlock[50]; // offset 0x800A8984
static void * CanPause; // offset 0x8012BFD8
static void * Paused; // offset 0x8012BFDC
static struct Dialog PBack; // offset 0x8012C508
extern unsigned char RawPadData0[34]; // offset 0x800A8BEC
extern unsigned char RawPadData1[34]; // offset 0x800A8C10
extern unsigned char demo_buffer[900]; // offset 0x800A8C34
extern int demo_pad_time; // offset 0x8012A858
extern int demo_pad_count; // offset 0x8012A85C
extern struct CPad Pad0; // offset 0x800A8B14
extern struct CPad Pad1; // offset 0x800A8B80
extern unsigned long demo_finish; // offset 0x8012A860
extern int cac_pad; // offset 0x8012A864
extern struct POLY_FT4 *CharFt4; // offset 0x8012A880
extern int CharFrm; // offset 0x8012A884
extern unsigned char WHITER; // offset 0x8012A871
extern unsigned char WHITEG; // offset 0x8012A872
extern unsigned char WHITEB; // offset 0x8012A873
extern unsigned char BLUER; // offset 0x8012A874
extern unsigned char BLUEG; // offset 0x8012A875
extern unsigned char BLUEB; // offset 0x8012A876
extern unsigned char REDR; // offset 0x8012A877
extern unsigned char REDG; // offset 0x8012A878
extern unsigned char REDB; // offset 0x8012A879
extern unsigned char GOLDR; // offset 0x8012A87A
extern unsigned char GOLDG; // offset 0x8012A87B
extern unsigned char GOLDB; // offset 0x8012A87C
extern struct CFont MediumFont; // offset 0x800A8FB8
extern struct CFont LargeFont; // offset 0x800A91D0
extern struct FontItem LFontTab[90]; // offset 0x800A93E8
extern struct FontTab LFont; // offset 0x800A949C
extern struct FontItem MFontTab[155]; // offset 0x800A94AC
extern struct FontTab MFont; // offset 0x800A95E4
extern unsigned char DialogRed; // offset 0x8012A899
extern unsigned char DialogGreen; // offset 0x8012A89A
extern unsigned char DialogBlue; // offset 0x8012A89B
extern unsigned char DialogTRed; // offset 0x8012A89C
extern unsigned char DialogTGreen; // offset 0x8012A89D
extern unsigned char DialogTBlue; // offset 0x8012A89E
extern struct TextDat *DialogTData; // offset 0x8012A8A0
extern int DialogBackGfx; // offset 0x8012A8A4
extern int DialogBackW; // offset 0x8012A8A8
extern int DialogBackH; // offset 0x8012A8AC
extern int DialogBorderGfx; // offset 0x8012A8B0
extern int DialogBorderTLW; // offset 0x8012A8B4
extern int DialogBorderTLH; // offset 0x8012A8B8
extern int DialogBorderTRW; // offset 0x8012A8BC
extern int DialogBorderTRH; // offset 0x8012A8C0
extern int DialogBorderBLW; // offset 0x8012A8C4
extern int DialogBorderBLH; // offset 0x8012A8C8
extern int DialogBorderBRW; // offset 0x8012A8CC
extern int DialogBorderBRH; // offset 0x8012A8D0
extern int DialogBorderTW; // offset 0x8012A8D4
extern int DialogBorderTH; // offset 0x8012A8D8
extern int DialogBorderBW; // offset 0x8012A8DC
extern int DialogBorderBH; // offset 0x8012A8E0
extern int DialogBorderLW; // offset 0x8012A8E4
extern int DialogBorderLH; // offset 0x8012A8E8
extern int DialogBorderRW; // offset 0x8012A8EC
extern int DialogBorderRH; // offset 0x8012A8F0
extern int DialogBevelGfx; // offset 0x8012A8F4
extern int DialogBevelCW; // offset 0x8012A8F8
extern int DialogBevelCH; // offset 0x8012A8FC
extern int DialogBevelLRW; // offset 0x8012A900
extern int DialogBevelLRH; // offset 0x8012A904
extern int DialogBevelUDW; // offset 0x8012A908
extern int DialogBevelUDH; // offset 0x8012A90C
extern int MY_DialogOTpos; // offset 0x8012A910
static unsigned char DialogGBack; // offset 0x8012BFE0
static char GShadeX; // offset 0x8012BFE1
static char GShadeY; // offset 0x8012BFE2
static unsigned char RandBTab[8]; // offset 0x8012BFE8
extern int Cxy[28]; // offset 0x800A9634
extern unsigned char BORDERR; // offset 0x8012A893
extern unsigned char BORDERG; // offset 0x8012A894
extern unsigned char BORDERB; // offset 0x8012A895
extern unsigned char BACKR; // offset 0x8012A896
extern unsigned char BACKG; // offset 0x8012A897
extern unsigned char BACKB; // offset 0x8012A898
static char GShadeTab[64]; // offset 0x800A95F4
static char GShadePX; // offset 0x8012A891
static char GShadePY; // offset 0x8012A892
extern unsigned char PlayDemoFlag; // offset 0x8012A91D
static struct RGBPOLY rgbb; // offset 0x8012C518
static struct RGBPOLY rgbt; // offset 0x8012C548
static int blockr; // offset 0x8012BFF0
static int blockg; // offset 0x8012BFF4
static int blockb; // offset 0x8012BFF8
static int InfraFlag; // offset 0x8012BFFC
static unsigned char blank_bit; // offset 0x8012C000
extern unsigned char P1ObjSelCount; // offset 0x8012A931
extern unsigned char P2ObjSelCount; // offset 0x8012A932
extern unsigned char P12ObjSelCount; // offset 0x8012A933
extern unsigned char P1ItemSelCount; // offset 0x8012A934
extern unsigned char P2ItemSelCount; // offset 0x8012A935
extern unsigned char P12ItemSelCount; // offset 0x8012A936
extern unsigned char P1MonstSelCount; // offset 0x8012A937
extern unsigned char P2MonstSelCount; // offset 0x8012A938
extern unsigned char P12MonstSelCount; // offset 0x8012A939
static unsigned short P1ObjSelCol; // offset 0x8012A93A
static unsigned short P2ObjSelCol; // offset 0x8012A93C
static unsigned short P12ObjSelCol; // offset 0x8012A93E
static unsigned short P1ItemSelCol; // offset 0x8012A940
static unsigned short P2ItemSelCol; // offset 0x8012A942
static unsigned short P12ItemSelCol; // offset 0x8012A944
static unsigned short P1MonstSelCol; // offset 0x8012A946
static unsigned short P2MonstSelCol; // offset 0x8012A948
static unsigned short P12MonstSelCol; // offset 0x8012A94A
extern struct CBlocks *CurrentBlocks; // offset 0x8012A94C
static short SinTab[32]; // offset 0x801202C0
extern struct TownToCreature TownConv[10]; // offset 0x800A96A4
extern enum OVER_TYPE CurrentOverlay; // offset 0x8012A968
static unsigned long HaltTab[3]; // offset 0x80120360
static struct Overlay FrontEndOver; // offset 0x8012C578
static struct Overlay PregameOver; // offset 0x8012C588
static struct Overlay GameOver; // offset 0x8012C598
static struct Overlay FmvOver; // offset 0x8012C5A8
static int OWorldX; // offset 0x8012C004
static int OWorldY; // offset 0x8012C008
static int WWorldX; // offset 0x8012C00C
static int WWorldY; // offset 0x8012C010
static short TxyAdd[16]; // offset 0x801203DC
extern int GXAdj2; // offset 0x8012A98C
static int TimePerFrame; // offset 0x8012C014
static int CpuStart; // offset 0x8012C018
static int CpuTime; // offset 0x8012C01C
static int DrawTime; // offset 0x8012C020
static int DrawStart; // offset 0x8012C024
static int LastCpuTime; // offset 0x8012C028
static int LastDrawTime; // offset 0x8012C02C
static int DrawArea; // offset 0x8012C030
extern void * ProfOn; // offset 0x8012A994
extern unsigned char LevPals[17]; // offset 0x800A96B8
static unsigned short Level2Bgdata[25]; // offset 0x80120544
extern struct PanelXY DefP1PanelXY; // offset 0x800A96CC
extern struct PanelXY DefP1PanelXY2; // offset 0x800A9720
extern struct PanelXY DefP2PanelXY; // offset 0x800A9774
extern struct PanelXY DefP2PanelXY2; // offset 0x800A97C8
extern unsigned int SpeedBarGfxTable[50]; // offset 0x800A981C
extern int hof; // offset 0x8012A9BC
extern int mof; // offset 0x8012A9C0
extern struct SFXHDR SFXTab[2]; // offset 0x800A98E4
extern unsigned long STR_Buffer[18432]; // offset 0x800A99E4
extern unsigned long Time; // offset 0x8012A9F0
extern void * CDWAIT; // offset 0x8012A9F4
extern struct SpuVoiceAttr voice_attr; // offset 0x800BB9E4
extern struct SFXHDR STRSave; // offset 0x800BBA24
extern char NoActiveStreams; // offset 0x8012A9CD
static void * STRInit; // offset 0x8012A9D0
static unsigned char CDAngle; // offset 0x8012A9D4
extern char SFXNotPlayed; // offset 0x8012AA18
extern char SFXNotInBank; // offset 0x8012AA19
static char spu_management[264]; // offset 0x8012C5B8
static struct SpuReverbAttr rev_attr; // offset 0x8012C6C8
static unsigned short NoSfx; // offset 0x8012C038
extern struct bank_entry *BankOffsets; // offset 0x8012AA04
static long OffsetHandle; // offset 0x8012AA08
static int BankBase; // offset 0x8012AA0C
static unsigned char SPU_Done; // offset 0x8012AA10
static unsigned short SFXRemapTab[56]; // offset 0x801208E8
static int NoSNDRemaps; // offset 0x8012AA14
extern struct PalCollection ThePals; // offset 0x800BBAA4
static struct InitPos InitialPositions[20]; // offset 0x8012098C
extern int demo_level; // offset 0x8012AA60
static int buff[8]; // offset 0x8012C6E0
extern int old_val; // offset 0x8012AA64
extern struct TASK *DemoTask; // offset 0x8012AA68
extern struct TASK *DemoGameTask; // offset 0x8012AA6C
extern struct TASK *tonys; // offset 0x8012AA70
extern int demo_load; // offset 0x8012AA44
extern int demo_record_load; // offset 0x8012AA48
extern int level_record; // offset 0x8012AA4C
extern char demo_fade_finished; // offset 0x8012AA50
extern unsigned char demo_which; // offset 0x8012AA51
extern unsigned long demolevel[5]; // offset 0x800BBC90
extern int moo_moo; // offset 0x8012AA40
extern unsigned char demo_flash; // offset 0x8012AA52
extern int tonys_Task; // offset 0x8012AA54
extern void * DoShowPanel; // offset 0x8012ABCC
extern void * DoDrawBg; // offset 0x8012ABD0
static void * GlueFinished; // offset 0x8012C03C
static void * DoHomingScroll; // offset 0x8012C040
static struct TextDat *TownerGfx; // offset 0x8012C044
static int CurrentMonsterList; // offset 0x8012C048
extern char started_grtask; // offset 0x8012AA7D
extern struct PInf PlayerInfo[81]; // offset 0x800BBCA4
static char ArmourChar[4]; // offset 0x8012ABD4
static char WepChar[10]; // offset 0x80120A80
static char CharChar[4]; // offset 0x8012ABD8
static char ctrl_select_line; // offset 0x8012C04C
static char ctrl_select_side; // offset 0x8012C04D
static char ckeyheld; // offset 0x8012C04E
static struct RECT CtrlRect; // offset 0x8012C054
extern unsigned char ctrlflag; // offset 0x8012ABEC
extern struct KEY_ASSIGNS txt_actions[19]; // offset 0x800BBFD4
extern struct pad_assigns pad_txt[14]; // offset 0x800BBF2C
static int toppos; // offset 0x8012ABE8
static struct Dialog CtrlBack; // offset 0x8012C700
static int controller_defaults[19][2]; // offset 0x800BC104
extern int gr_scrxoff; // offset 0x8012AC5C
extern int gr_scryoff; // offset 0x8012AC60
extern unsigned short water_clut; // offset 0x8012AC68
extern char visible_level; // offset 0x8012AC6C
extern char last_type; // offset 0x8012AC59
extern char daylight; // offset 0x8012AC6E
extern char cow_in_sight; // offset 0x8012AC6A
extern char inn_in_sight; // offset 0x8012AC6B
extern unsigned int water_count; // offset 0x8012AC64
extern unsigned char lastrnd; // offset 0x8012AC6D
static int call_clock; // offset 0x8012AC70
extern int TitleAnimCount; // offset 0x8012AC80
static int flametick; // offset 0x8012AC84
extern struct SPELLFX_DAT SpellFXDat[2]; // offset 0x800BC1BC
static struct Particle PartArray[16]; // offset 0x8012C710
static int partOtPos; // offset 0x8012C05C
extern int SetParticle; // offset 0x8012ACA0
static int p1partexecnum; // offset 0x8012ACA4
static int p2partexecnum; // offset 0x8012ACA8
static int JumpArray[8]; // offset 0x800BC19C
static int partjumpflag; // offset 0x8012ACAC
static int partglowflag; // offset 0x8012ACB0
static int partcolour; // offset 0x8012ACB4
extern struct Spell_Target SplTarget[2]; // offset 0x800BC24C
extern unsigned char select_flag; // offset 0x8012ACD5
static struct RECT SelectRect; // offset 0x8012C060
static char item_select; // offset 0x8012C068
extern char QSpell[2]; // offset 0x8012ACD8
extern char _spltotype[2]; // offset 0x8012ACDC
extern void * force_attack[2]; // offset 0x8012ACE0
extern struct CPlayer *gplayer; // offset 0x8012ACC8
static struct Dialog SelectBack; // offset 0x8012C950
extern char mana_order[4]; // offset 0x8012ACCC
extern char health_order[4]; // offset 0x8012ACD0
extern unsigned char birdcheck; // offset 0x8012ACD4
static struct TextDat (*DecRequestors[10]); // offset 0x8012C960
static unsigned short progress; // offset 0x8012C06C
static unsigned short Level2CutScreen[21]; // offset 0x80120C04
static char *CutString; // offset 0x8012AD00
static struct CScreen Scr; // offset 0x8012C988
static struct TASK *CutScreenTSK; // offset 0x8012AD04
static void * GameLoading; // offset 0x8012AD08
static struct Dialog LBack; // offset 0x8012CA08
extern unsigned int card_ev0; // offset 0x8012AD18
extern unsigned int card_ev1; // offset 0x8012AD1C
extern unsigned int card_ev2; // offset 0x8012AD20
extern unsigned int card_ev3; // offset 0x8012AD24
extern unsigned int card_ev10; // offset 0x8012AD28
extern unsigned int card_ev11; // offset 0x8012AD2C
extern unsigned int card_ev12; // offset 0x8012AD30
extern unsigned int card_ev13; // offset 0x8012AD34
extern int card_dirty[2]; // offset 0x8012AD38
extern struct TASK *MemcardTask; // offset 0x8012AD40
static int card_event; // offset 0x8012C070
extern void * MemCardActive; // offset 0x8012AD0C
static int never_hooked_events; // offset 0x8012AD10
extern unsigned long MasterVol; // offset 0x8012AD90
extern unsigned long MusicVol; // offset 0x8012AD94
extern unsigned long SoundVol; // offset 0x8012AD98
extern unsigned long VideoVol; // offset 0x8012AD9C
extern unsigned long SpeechVol; // offset 0x8012ADA0
static struct TextDat *Slider; // offset 0x8012C074
static int sw; // offset 0x8012C078
static int sx; // offset 0x8012C07C
static int sy; // offset 0x8012C080
static unsigned char Adjust; // offset 0x8012C084
static unsigned char qspin; // offset 0x8012C085
static unsigned char lqspin; // offset 0x8012C086
static enum LANG_TYPE OrigLang; // offset 0x8012C088
static enum LANG_TYPE OldLang; // offset 0x8012C08C
static enum LANG_TYPE NewLang; // offset 0x8012C090
extern int ReturnMenu; // offset 0x8012ADA4
static struct RECT ORect; // offset 0x8012C094
static char (*McState[2]); // offset 0x8012C09C
extern int they_pressed; // offset 0x8012ADA8
extern void * optionsflag; // offset 0x8012AD6C
extern int cmenu; // offset 0x8012AD60
extern int options_pad; // offset 0x8012AD74
extern void * allspellsflag; // offset 0x8012AD68
extern short Circle[64]; // offset 0x800BCC1C
extern void * goldcheat; // offset 0x8012AD50
static int Spacing; // offset 0x8012AD54
static int cs; // offset 0x8012AD58
static int lastcs; // offset 0x8012AD5C
static void * MemcardOverlay; // offset 0x8012AD64
extern int saveflag; // offset 0x8012AD70
static char *PrevTxt; // offset 0x8012AD80
static char *SelTxt; // offset 0x8012AD84
extern struct OMENUITEM MainMenu[7]; // offset 0x800BC294
extern struct OMENUITEM GameMenu[10]; // offset 0x800BC33C
extern struct OMENUITEM SoundMenu[6]; // offset 0x800BC42C
extern struct OMENUITEM CentreMenu[7]; // offset 0x800BC4BC
extern struct OMENUITEM LangMenu[7]; // offset 0x800BC564
extern struct OMENUITEM MemcardMenu[7]; // offset 0x800BC60C
extern struct OMENUITEM MemcardLoadGameMenu[4]; // offset 0x800BC6B4
extern struct OMENUITEM MemcardSaveGameMenu[4]; // offset 0x800BC714
extern struct OMENUITEM MemcardSaveOptionsMenu[4]; // offset 0x800BC774
extern struct OMENUITEM MemcardLoadOptionsMenu[4]; // offset 0x800BC7D4
extern struct OMENUITEM MemcardCharacterMenu[4]; // offset 0x800BC834
extern struct OMENUITEM MemcardSelectCard1[7]; // offset 0x800BC894
extern struct OMENUITEM MemcardSelectCard2[7]; // offset 0x800BC93C
extern struct OMENUITEM MemcardFormatMenu[4]; // offset 0x800BC9E4
extern struct OMENUITEM CheatMenu[9]; // offset 0x800BCA44
extern struct OMENUITEM InfoMenu[2]; // offset 0x800BCB1C
extern struct OMENUITEM MonstViewMenu[3]; // offset 0x800BCB4C
extern struct OMENULIST MenuList[17]; // offset 0x800BCB94
static void * debounce; // offset 0x8012AD88
extern unsigned char Qfromoptions; // offset 0x8012AD8C
extern struct BIRDSTRUCT BirdList[16]; // offset 0x800BCC9C
extern char hop_height; // offset 0x8012ADB5
static struct Perch perches[4]; // offset 0x8012ADB8
extern struct FMVDAT FmvTab[6]; // offset 0x800BCE1C
static int CurMons; // offset 0x8012ADCC
static int Frame; // offset 0x8012ADD0
static int Action; // offset 0x8012ADD4
static int Dir; // offset 0x8012ADD8
extern int indsize; // offset 0x8012AE3C
static unsigned char *kanjbuff; // offset 0x8012AE1C
static struct kindexS *kindex; // offset 0x8012AE20
static long hndKanjBuff; // offset 0x8012AE24
static long hndKanjIndex; // offset 0x8012AE28
extern int FeBackX; // offset 0x8012AE7C
extern int FeBackY; // offset 0x8012AE80
extern int FeBackW; // offset 0x8012AE84
extern int FeBackH; // offset 0x8012AE88
extern unsigned char FeFlag; // offset 0x8012AE8C
extern struct FeStruct FeBuffer[80]; // offset 0x800BD9AC
extern int FePlayerNo; // offset 0x8012AE90
static struct FE_CREATE *CStruct; // offset 0x8012C0A4
extern int FeBufferCount; // offset 0x8012AE94
extern int FeNoOfPlayers; // offset 0x8012AE98
extern int FeChrClass[2]; // offset 0x8012AE9C
extern char FePlayerName[2][11]; // offset 0x800BE12C
extern struct FeTable *FeCurMenu; // offset 0x8012AEA4
extern unsigned char FePlayerNameFlag[2]; // offset 0x8012AEA8
extern unsigned long FeCount; // offset 0x8012AEAC
extern int fileselect; // offset 0x8012AEB0
extern int BookMenu; // offset 0x8012AEB4
extern int FeAttractMode; // offset 0x8012AEB8
extern int FMVPress; // offset 0x8012AEBC
extern struct TextDat *FeTData; // offset 0x8012AE4C
extern void * LoadedChar[2]; // offset 0x8012AE54
extern struct TextDat *FlameTData; // offset 0x8012AE50
extern unsigned char FeIsAVirgin; // offset 0x8012AE5C
extern int FeMenuDelay; // offset 0x8012AE60
extern struct FeTable DummyMenu; // offset 0x800BCE4C
extern struct FeTable FeMainMenu; // offset 0x800BCE68
extern struct FeTable FeNewGameMenu; // offset 0x800BCE84
extern struct FeTable FeNewP1ClassMenu; // offset 0x800BCEA0
extern struct FeTable FeNewP1NameMenu; // offset 0x800BCEBC
extern struct FeTable FeNewP2ClassMenu; // offset 0x800BCED8
extern struct FeTable FeNewP2NameMenu; // offset 0x800BCEF4
extern struct FeTable FeDifficultyMenu; // offset 0x800BCF10
extern struct FeTable FeBackgroundMenu; // offset 0x800BCF2C
extern struct FeTable FeBook1Menu; // offset 0x800BCF48
extern struct FeTable FeBook2Menu; // offset 0x800BCF64
extern struct FeTable FeLoadCharMenu; // offset 0x800BCF80
extern struct FeTable FeLoadChar1Menu; // offset 0x800BCF9C
extern struct FeTable FeLoadChar2Menu; // offset 0x800BCFB8
static int fadeval; // offset 0x8012AE64
extern struct FeMenuTable FeMainMenuTable[5]; // offset 0x800BCFD4
extern struct FeMenuTable FeNewGameMenuTable[3]; // offset 0x800BD04C
extern struct FeMenuTable FePlayerClassMenuTable[5]; // offset 0x800BD094
extern struct FeMenuTable FeNameEngMenuTable[71]; // offset 0x800BD10C
extern struct FeMenuTable FeMemcardMenuTable[3]; // offset 0x800BD7B4
extern struct FeMenuTable FeDifficultyMenuTable[4]; // offset 0x800BD7FC
extern struct FeMenuTable FeBackgroundMenuTable[4]; // offset 0x800BD85C
extern struct FeMenuTable FeBook1MenuTable[5]; // offset 0x800BD8BC
extern struct FeMenuTable FeBook2MenuTable[5]; // offset 0x800BD934
extern unsigned long AttractTitleDelay; // offset 0x8012AE70
extern unsigned long AttractMainDelay; // offset 0x8012AE74
extern int FMVEndPad; // offset 0x8012AE78
extern int InCredits; // offset 0x8012AEF0
extern int CreditTitleNo; // offset 0x8012AEF4
extern int CreditSubTitleNo; // offset 0x8012AEF8
extern int card_status[2]; // offset 0x8012AF0C
extern int card_usable[2]; // offset 0x8012AF14
extern int card_files[2]; // offset 0x8012AF1C
extern int card_changed[2]; // offset 0x8012AF24
extern int AlertTxt; // offset 0x8012AF64
extern int current_card; // offset 0x8012AF68
extern int LoadType; // offset 0x8012AF6C
extern int McMenuPos; // offset 0x8012AF70
extern struct FeTable *McCurMenu; // offset 0x8012AF74
extern void * fileinfoflag; // offset 0x8012AF60
extern char *DiabloGameFile; // offset 0x8012AF38
extern char (*McState[2]); // offset 0x8012AF58
extern int mdec_audio_buffer[2]; // offset 0x8012B048
extern int mdec_audio_sec; // offset 0x8012B050
extern int mdec_audio_offs; // offset 0x8012B054
extern int mdec_audio_playing; // offset 0x8012B058
extern int mdec_audio_rate_shift; // offset 0x8012B05C
extern char (*vlcbuf[2]); // offset 0x8012B060
extern int slice_size; // offset 0x8012B068
extern struct RECT slice; // offset 0x8012B06C
extern int slice_inc; // offset 0x8012B074
extern int area_pw; // offset 0x8012B078
extern int area_ph; // offset 0x8012B07C
extern char tmdc_pol_dirty[2]; // offset 0x8012B080
extern int num_pol[2]; // offset 0x8012B084
extern int mdec_cx; // offset 0x8012B08C
extern int mdec_cy; // offset 0x8012B090
extern int mdec_w; // offset 0x8012B094
extern int mdec_h; // offset 0x8012B098
extern int mdec_pw[2]; // offset 0x8012B09C
extern int mdec_ph[2]; // offset 0x8012B0A4
extern int move_x; // offset 0x8012B0AC
extern int move_y; // offset 0x8012B0B0
extern int move_scale; // offset 0x8012B0B4
extern int stream_frames; // offset 0x8012B0B8
extern int last_stream_frame; // offset 0x8012B0BC
extern int mdec_framecount; // offset 0x8012B0C0
extern int mdec_speed; // offset 0x8012B0C4
extern int mdec_stream_starting; // offset 0x8012B0C8
extern int mdec_last_frame; // offset 0x8012B0CC
extern int mdec_sectors_per_frame; // offset 0x8012B0D0
extern unsigned short *vlctab; // offset 0x8012B0D4
extern unsigned char *mdc_buftop; // offset 0x8012B0D8
extern unsigned char *mdc_bufstart; // offset 0x8012B0DC
extern int mdc_bufleft; // offset 0x8012B0E0
extern int mdc_buftotal; // offset 0x8012B0E4
extern int ordertab_length; // offset 0x8012B0E8
extern int time_in_frames; // offset 0x8012B0EC
extern int stream_chunksize; // offset 0x8012B0F0
extern int stream_bufsize; // offset 0x8012B0F4
extern int stream_subsec; // offset 0x8012B0F8
extern int stream_secnum; // offset 0x8012B0FC
extern int stream_last_sector; // offset 0x8012B100
extern int stream_startsec; // offset 0x8012B104
extern int stream_opened; // offset 0x8012B108
extern int stream_last_chunk; // offset 0x8012B10C
extern int stream_got_chunks; // offset 0x8012B110
extern int last_sector; // offset 0x8012B114
extern int cdstream_resetsec; // offset 0x8012B118
extern int last_handler_event; // offset 0x8012B11C
extern void * user_start; // offset 0x8012AFEC
extern unsigned char *vlc_tab; // offset 0x8012AF84
extern unsigned char *vlc_buf; // offset 0x8012AF88
extern unsigned char *img_buf; // offset 0x8012AF8C
extern int vbuf; // offset 0x8012AF90
extern int last_fn; // offset 0x8012AF94
extern int last_mdc; // offset 0x8012AF98
extern int slnum; // offset 0x8012AF9C
extern int slices_to_do; // offset 0x8012AFA0
extern int mbuf; // offset 0x8012AFA4
extern int mfn; // offset 0x8012AFA8
extern int last_move_mbuf; // offset 0x8012AFAC
extern int move_request; // offset 0x8012AFB0
extern int mdec_scale; // offset 0x8012AFB4
extern int do_brightness; // offset 0x8012AFB8
extern int frame_decoded; // offset 0x8012AFBC
extern int mdec_streaming; // offset 0x8012AFC0
extern int mdec_stream_size; // offset 0x8012AFC4
extern int first_stream_frame; // offset 0x8012AFC8
extern int stream_frames_played; // offset 0x8012AFCC
extern int num_mdcs; // offset 0x8012AFD0
extern int mdec_head; // offset 0x8012AFD4
extern int mdec_tail; // offset 0x8012AFD8
extern int mdec_waiting_tail; // offset 0x8012AFDC
extern int mdecs_queued; // offset 0x8012AFE0
extern int mdecs_waiting; // offset 0x8012AFE4
extern int sfx_volume; // offset 0x8012AFE8
extern int stream_chunks_in; // offset 0x8012AFF0
extern int stream_chunks_total; // offset 0x8012AFF4
extern int stream_in; // offset 0x8012AFF8
extern int stream_out; // offset 0x8012AFFC
extern int stream_stalled; // offset 0x8012B000
extern int stream_ending; // offset 0x8012B004
extern int stream_open; // offset 0x8012B008
extern int stream_handler_installed; // offset 0x8012B00C
extern int stream_chunks_borrowed; // offset 0x8012B010
extern int _get_count; // offset 0x8012B014
extern int _discard_count; // offset 0x8012B018
extern struct TASK *CDTask; // offset 0x8012B01C
static struct cdstreamstruct *CDStream; // offset 0x8012B020
extern int cdready_calls; // offset 0x8012B024
extern int cdready_errors; // offset 0x8012B028
extern int cdready_out_of_sync; // offset 0x8012B02C
extern int cdstream_resetting; // offset 0x8012B030
extern int sector_dma; // offset 0x8012B034
extern int sector_dma_in; // offset 0x8012B038
extern unsigned long *chkaddr; // offset 0x8012B03C
extern struct chunkhdrstruct *chunk; // offset 0x8012B040
extern int first_handler_event; // offset 0x8012B044
extern unsigned char *pStatusPanel; // offset 0x8012B1BC
extern unsigned char *pGBoxBuff; // offset 0x8012B1C0
extern unsigned char dropGoldFlag; // offset 0x8012B1C4
extern unsigned char _pinfoflag[2]; // offset 0x8012B1C8
extern char _infostr[2][256]; // offset 0x800BE724
extern char _infoclr[2]; // offset 0x8012B1CC
extern char tempstr[256]; // offset 0x800BE924
extern unsigned char drawhpflag; // offset 0x8012B1CE
extern unsigned char drawmanaflag; // offset 0x8012B1CF
extern unsigned char chrflag; // offset 0x8012B1D0
extern unsigned char drawbtnflag; // offset 0x8012B1D1
extern unsigned char panbtndown; // offset 0x8012B1D2
extern unsigned char panelflag; // offset 0x8012B1D3
extern unsigned char chrbtndown; // offset 0x8012B1D4
extern unsigned char lvlbtndown; // offset 0x8012B1D5
extern unsigned char sbookflag; // offset 0x8012B1D6
extern unsigned char talkflag; // offset 0x8012B1D7
extern int dropGoldValue; // offset 0x8012B1D8
extern int initialDropGoldValue; // offset 0x8012B1DC
extern int initialDropGoldIndex; // offset 0x8012B1E0
extern unsigned char *pPanelButtons; // offset 0x8012B1E4
extern unsigned char *pPanelText; // offset 0x8012B1E8
extern unsigned char *pManaBuff; // offset 0x8012B1EC
extern unsigned char *pLifeBuff; // offset 0x8012B1F0
extern unsigned char *pChrPanel; // offset 0x8012B1F4
extern unsigned char *pChrButtons; // offset 0x8012B1F8
extern unsigned char *pSpellCels; // offset 0x8012B1FC
static char _panelstr[2][8][64]; // offset 0x8012CA58
static int _pstrjust[2][8]; // offset 0x8012CE58
static int _pnumlines[2]; // offset 0x8012C0B4
extern struct RECT *InfoBoxRect; // offset 0x8012B200
extern struct RECT CSRect; // offset 0x8012B204
static int _pSpell[2]; // offset 0x8012C0C4
static int _pSplType[2]; // offset 0x8012C0CC
static unsigned char panbtn[8]; // offset 0x8012C0D4
extern int numpanbtns; // offset 0x8012B20C
extern unsigned char *pDurIcons; // offset 0x8012B210
extern unsigned char drawdurflag; // offset 0x8012B214
static unsigned char chrbtn[4]; // offset 0x8012C0DC
extern unsigned char chrbtnactive; // offset 0x8012B215
extern unsigned char *pSpellBkCel; // offset 0x8012B218
extern unsigned char *pSBkBtnCel; // offset 0x8012B21C
extern unsigned char *pSBkIconCels; // offset 0x8012B220
extern int sbooktab; // offset 0x8012B224
extern int cur_spel; // offset 0x8012B228
static long talkofs; // offset 0x8012C0E0
static char sgszTalkMsg[80]; // offset 0x8012CEA8
static unsigned char sgbTalkSavePos; // offset 0x8012C0E4
static unsigned char sgbNextTalkSave; // offset 0x8012C0E5
static unsigned char sgbPlrTalkTbl[2]; // offset 0x8012C0E6
static unsigned char *pTalkPanel; // offset 0x8012C0E8
static unsigned char *pMultiBtns; // offset 0x8012C0EC
static unsigned char *pTalkBtns; // offset 0x8012C0F0
static unsigned char talkbtndown[3]; // offset 0x8012C0F4
extern unsigned char fontkern[68]; // offset 0x80120F6C
extern char SpellITbl[37]; // offset 0x800BE158
extern unsigned char DrawLevelUpFlag; // offset 0x8012B129
extern struct TASK (*_spselflag[2]); // offset 0x8012B150
extern unsigned char spspelstate; // offset 0x8012B14C
extern void * initchr; // offset 0x8012B18C
static int SPLICONNO; // offset 0x8012B12C
static int SPLICONY; // offset 0x8012B130
static int SPLICONRIGHT; // offset 0x8012C0BC
static int scx; // offset 0x8012B134
static int scy; // offset 0x8012B138
static int scx1; // offset 0x8012B13C
static int scy1; // offset 0x8012B140
static int scx2; // offset 0x8012B144
static int scy2; // offset 0x8012B148
extern char SpellCol; // offset 0x8012B158
extern unsigned char SpellColors[18]; // offset 0x800BE144
extern int PanBtnPos[8][5]; // offset 0x800BE180
extern char (*PanBtnHotKey[8]); // offset 0x800BE220
extern unsigned long PanBtnStr[8]; // offset 0x800BE240
extern int SpellPages[5][5]; // offset 0x800BE260
static int lus; // offset 0x8012B17C
static int CsNo; // offset 0x8012B180
static char plusanim; // offset 0x8012B184
static struct Dialog CSBack; // offset 0x8012CE98
static int CS_XOFF; // offset 0x8012B188
extern struct CSDATA CS_Tab[28]; // offset 0x800BE2C4
extern int NoCSEntries; // offset 0x8012B190
static int SPALOFF; // offset 0x8012B194
static int paloffset1; // offset 0x8012B198
static int paloffset2; // offset 0x8012B19C
static int paloffset3; // offset 0x8012B1A0
static int paloffset4; // offset 0x8012B1A4
static int pinc1; // offset 0x8012B1A8
static int pinc2; // offset 0x8012B1AC
static int pinc3; // offset 0x8012B1B0
static int pinc4; // offset 0x8012B1B4
extern int _pcurs[2]; // offset 0x8012B23C
extern int cursW; // offset 0x8012B244
extern int cursH; // offset 0x8012B248
extern int icursW; // offset 0x8012B24C
extern int icursH; // offset 0x8012B250
extern int icursW28; // offset 0x8012B254
extern int icursH28; // offset 0x8012B258
extern int cursmx; // offset 0x8012B25C
extern int cursmy; // offset 0x8012B260
extern int _pcursmonst[2]; // offset 0x8012B264
extern char _pcursobj[2]; // offset 0x8012B26C
extern char _pcursitem[2]; // offset 0x8012B270
extern char _pcursinvitem[2]; // offset 0x8012B274
extern char _pcursplr[2]; // offset 0x8012B278
extern int sel_data; // offset 0x8012B238
extern struct DeadStruct dead[31]; // offset 0x800BEA24
extern int spurtndx; // offset 0x8012B27C
extern int stonendx; // offset 0x8012B280
extern unsigned char *pSquareCel; // offset 0x8012B284
extern unsigned long ghInst; // offset 0x8012B2C4
extern unsigned char svgamode; // offset 0x8012B2C8
extern int MouseX; // offset 0x8012B2CC
extern int MouseY; // offset 0x8012B2D0
extern long gv1; // offset 0x8012B2D4
extern long gv2; // offset 0x8012B2D8
extern long gv3; // offset 0x8012B2DC
extern long gv4; // offset 0x8012B2E0
extern long gv5; // offset 0x8012B2E4
extern unsigned char gbProcessPlayers; // offset 0x8012B2E8
extern int DebugMonsters[10]; // offset 0x800BEB98
extern unsigned long glSeedTbl[17]; // offset 0x800BEBC0
extern int gnLevelTypeTbl[17]; // offset 0x800BEC04
extern unsigned char gbDoEnding; // offset 0x8012B2E9
extern unsigned char gbRunGame; // offset 0x8012B2EA
extern unsigned char gbRunGameResult; // offset 0x8012B2EB
extern unsigned char gbGameLoopStartup; // offset 0x8012B2EC
static int glEndSeed[17]; // offset 0x8012CEF8
static int glMid1Seed[17]; // offset 0x8012CF48
static int glMid2Seed[17]; // offset 0x8012CF98
static int glMid3Seed[17]; // offset 0x8012CFE8
static long *sg_previousFilter; // offset 0x8012C0F8
extern int CreateEnv[12]; // offset 0x800BEC48
extern int Passedlvldir; // offset 0x8012B2F0
extern unsigned char *TempStack; // offset 0x8012B2F4
extern unsigned long ghMainWnd; // offset 0x8012B294
extern unsigned char fullscreen; // offset 0x8012B298
extern int force_redraw; // offset 0x8012B29C
extern unsigned char PauseMode; // offset 0x8012B2B0
extern unsigned char FriendlyMode; // offset 0x8012B2B1
extern unsigned char visiondebug; // offset 0x8012B2A1
extern unsigned char light4flag; // offset 0x8012B2A3
extern unsigned char leveldebug; // offset 0x8012B2A4
extern unsigned char monstdebug; // offset 0x8012B2A5
extern int debugmonsttypes; // offset 0x8012B2AC
static unsigned char cineflag; // offset 0x8012B2A0
extern unsigned char scrollflag; // offset 0x8012B2A2
extern unsigned char trigdebug; // offset 0x8012B2A6
extern int setseed; // offset 0x8012B2A8
static int sgnTimeoutCurs; // offset 0x8012B2B4
extern unsigned char sgbMouseDown; // offset 0x8012B2B8
extern struct TownerStruct towner[16]; // offset 0x800BF314
extern int numtowners; // offset 0x8012B30C
extern unsigned char storeflag; // offset 0x8012B310
extern unsigned char boyloadflag; // offset 0x8012B311
extern unsigned char bannerflag; // offset 0x8012B312
extern unsigned char *pCowCels; // offset 0x8012B314
static unsigned long sgdwCowClicks; // offset 0x8012C0FC
static int sgnCowMsg; // offset 0x8012C100
extern int Qtalklist[11][16]; // offset 0x800BF054
extern unsigned long CowPlaying; // offset 0x8012B304
extern char AnimOrder[6][148]; // offset 0x800BEC78
extern int TownCowX[3]; // offset 0x800BEFF0
extern int TownCowY[3]; // offset 0x800BEFFC
extern int TownCowDir[3]; // offset 0x800BF008
extern int cowoffx[8]; // offset 0x800BF014
extern int cowoffy[8]; // offset 0x800BF034
extern int sfxdelay; // offset 0x8012B32C
extern int sfxdnum; // offset 0x8012B330
extern struct SFXHDR *sghStream; // offset 0x8012B324
extern struct TSFX sgSFX[980]; // offset 0x800C0114
extern struct TSFX *sgpStreamSFX; // offset 0x8012B328
extern long orgseed; // offset 0x8012B334
static long sglGameSeed; // offset 0x8012C104
extern int SeedCount; // offset 0x8012B338
static struct CCritSect sgMemCrit; // offset 0x8012C108
static int sgnWidth; // offset 0x8012C10C
extern char msgflag; // offset 0x8012B346
extern char msgdelay; // offset 0x8012B347
extern char msgtable[80]; // offset 0x800C1114
extern int MsgStrings[44]; // offset 0x800C1064
extern char msgcnt; // offset 0x8012B345
static unsigned long sgdwProgress; // offset 0x8012C110
static unsigned long sgdwXY; // offset 0x8012C114
extern unsigned char AllItemsUseable[157]; // offset 0x800C1164
extern struct ItemDataStruct AllItemsList[157]; // offset 0x80121364
extern struct PLStruct PL_Prefix[84]; // offset 0x80122704
extern struct PLStruct PL_Suffix[96]; // offset 0x80123424
extern struct UItemStruct UniqueItemList[91]; // offset 0x80124324
extern struct ItemStruct item[128]; // offset 0x800C1378
extern char itemactive[127]; // offset 0x800C5F78
extern char itemavail[127]; // offset 0x800C5FF8
extern unsigned char UniqueItemFlag[128]; // offset 0x800C6078
extern unsigned char uitemflag; // offset 0x8012B380
static int tem; // offset 0x8012C118
static struct ItemStruct curruitem; // offset 0x8012D030
static unsigned char itemhold[3][3]; // offset 0x8012D0D0
extern int ScrollType; // offset 0x8012B384
extern char ItemStr[64]; // offset 0x800C60F8
extern char SufStr[64]; // offset 0x800C6138
extern long numitems; // offset 0x8012B360
extern int gnNumGetRecords; // offset 0x8012B364
extern int ItemInvSnds[35]; // offset 0x800C12D4
extern unsigned char ItemCAnimTbl[169]; // offset 0x800C1204
static short Item2Frm[35]; // offset 0x80126168
extern unsigned char ItemAnimLs[35]; // offset 0x800C12B0
extern int *ItemAnimSnds; // offset 0x8012B368
extern int idoppely; // offset 0x8012B36C
extern int ScrollFlag; // offset 0x8012B370
extern int premiumlvladd[6]; // offset 0x800C1360
extern struct LightListStruct2 LightList[40]; // offset 0x800C6F24
extern unsigned char lightactive[40]; // offset 0x800C7064
extern int numlights; // offset 0x8012B398
extern char lightmax; // offset 0x8012B39C
extern struct LightListStruct VisionList[32]; // offset 0x800C708C
extern int numvision; // offset 0x8012B3A0
extern unsigned char dovision; // offset 0x8012B3A4
extern int visionid; // offset 0x8012B3A8
static int disp_mask; // offset 0x8012C11C
static int weird; // offset 0x8012C120
static int disp_tab_r; // offset 0x8012C124
static int dispy_r; // offset 0x8012C128
static int disp_tab_g; // offset 0x8012C12C
static int dispy_g; // offset 0x8012C130
static int disp_tab_b; // offset 0x8012C134
static int dispy_b; // offset 0x8012C138
static int radius; // offset 0x8012C13C
static int bright; // offset 0x8012C140
static unsigned char mult_tab[128]; // offset 0x8012D0E0
extern int lightflag; // offset 0x8012B388
extern unsigned char vCrawlTable[23][30]; // offset 0x800C6C38
extern unsigned char RadiusAdj[23]; // offset 0x800C6EEC
extern char CrawlTable[2749]; // offset 0x800C6178
extern int restore_r; // offset 0x8012B38C
extern int restore_g; // offset 0x8012B390
extern int restore_b; // offset 0x8012B394
extern char radius_tab[16]; // offset 0x800C6F04
extern char bright_tab[16]; // offset 0x800C6F14
extern unsigned char qtextflag; // offset 0x8012B3C9
extern int qtextSpd; // offset 0x8012B3CC
static unsigned char *pMedTextCels; // offset 0x8012C144
static unsigned char *pTextBoxCels; // offset 0x8012C148
static char *qtextptr; // offset 0x8012C14C
static int qtexty; // offset 0x8012C150
static unsigned long qtextDelay; // offset 0x8012C154
static unsigned long sgLastScroll; // offset 0x8012C158
static unsigned long scrolltexty; // offset 0x8012C15C
static long sglMusicVolumeSave; // offset 0x8012C160
static void * qtbodge; // offset 0x8012B3B8
extern struct Dialog QBack; // offset 0x800C724C
extern struct MissileData missiledata[68]; // offset 0x800C725C
extern struct MisFileData misfiledata[47]; // offset 0x800C79CC
extern struct DLevel sgLevels[21]; // offset 0x800C7AB8
extern struct LocalLevel sgLocals[21]; // offset 0x800DB804
static struct DJunk sgJunk; // offset 0x8012D160
static unsigned char sgbRecvCmd; // offset 0x8012C165
static unsigned long sgdwRecvOffset; // offset 0x8012C168
static unsigned char sgbDeltaChunks; // offset 0x8012C16C
static unsigned char sgbDeltaChanged; // offset 0x8012C16D
static unsigned long sgdwOwnerWait; // offset 0x8012C170
static struct TMegaPkt *sgpMegaPkt; // offset 0x8012C174
static struct TMegaPkt *sgpCurrPkt; // offset 0x8012C178
static int sgnCurrMegaPlayer; // offset 0x8012C17C
extern unsigned char deltaload; // offset 0x8012B3E5
extern unsigned char gbBufferMsgs; // offset 0x8012B3E6
extern unsigned long dwRecCount; // offset 0x8012B3E8
extern void * LevelOut; // offset 0x8012B3EC
extern unsigned char gbMaxPlayers; // offset 0x8012B402
extern unsigned char gbActivePlayers; // offset 0x8012B403
extern unsigned char gbGameDestroyed; // offset 0x8012B404
extern unsigned char gbDeltaSender; // offset 0x8012B405
extern unsigned char gbSelectProvider; // offset 0x8012B406
extern unsigned char gbSomebodyWonGameKludge; // offset 0x8012B407
static unsigned char sgbSentThisCycle; // offset 0x8012C180
static unsigned long sgdwGameLoops; // offset 0x8012C184
static unsigned short sgwPackPlrOffsetTbl[2]; // offset 0x8012C188
static unsigned char sgbPlayerLeftGameTbl[2]; // offset 0x8012C18C
static unsigned long sgdwPlayerLeftReasonTbl[2]; // offset 0x8012C190
static unsigned char sgbSendDeltaTbl[2]; // offset 0x8012C198
static struct _gamedata sgGameInitInfo; // offset 0x8012C1A0
static unsigned char sgbTimeout; // offset 0x8012C1A8
static long sglTimeoutStart; // offset 0x8012C1AC
extern char gszVersionNumber[5]; // offset 0x8012B3FC
static unsigned char sgbNetInited; // offset 0x8012B401
extern int ObjTypeConv[113]; // offset 0x800DC86C
extern struct ObjDataStruct AllObjects[99]; // offset 0x800DCA30
extern struct OBJ_LOAD_INFO ObjMasterLoadList[56]; // offset 0x80126830
extern struct ObjectStruct object[127]; // offset 0x800DD210
extern long numobjects; // offset 0x8012B428
extern char objectactive[127]; // offset 0x800DE7E4
extern char objectavail[127]; // offset 0x800DE864
extern unsigned char InitObjFlag; // offset 0x8012B42C
extern int trapid; // offset 0x8012B430
extern char ObjFileList[40]; // offset 0x800DE8E4
extern int trapdir; // offset 0x8012B434
extern int leverid; // offset 0x8012B438
extern int numobjfiles; // offset 0x8012B420
extern int bxadd[8]; // offset 0x800DD128
extern int byadd[8]; // offset 0x800DD148
extern char shrineavail[26]; // offset 0x800DD1D0
extern int shrinestrs[26]; // offset 0x800DD168
extern int StoryBookName[9]; // offset 0x800DD1EC
extern int myscale; // offset 0x8012B424
extern unsigned char gbValidSaveFile; // offset 0x8012B44C
extern void * DoLoadedChar; // offset 0x8012B448
extern struct PlayerStruct plr[2]; // offset 0x800DEB04
extern int myplr; // offset 0x8012B46C
extern int deathdelay; // offset 0x8012B470
extern unsigned char deathflag; // offset 0x8012B474
extern char light_rad; // offset 0x8012B475
extern char light_level[5]; // offset 0x8012B464
extern int MaxStats[3][4]; // offset 0x800DE9FC
static int PlrStructSize; // offset 0x8012B45C
static int ItemStructSize; // offset 0x8012B460
extern int plrxoff[9]; // offset 0x800DE90C
extern int plryoff[9]; // offset 0x800DE930
extern int plrxoff2[9]; // offset 0x800DE954
extern int plryoff2[9]; // offset 0x800DE978
extern char PlrGFXAnimLens[3][11]; // offset 0x800DE99C
extern int StrengthTbl[3]; // offset 0x800DE9C0
extern int MagicTbl[3]; // offset 0x800DE9CC
extern int DexterityTbl[3]; // offset 0x800DE9D8
extern int VitalityTbl[3]; // offset 0x800DE9E4
extern int ToBlkTbl[3]; // offset 0x800DE9F0
extern long ExpLvlsTbl[51]; // offset 0x800DEA2C
extern struct QuestStruct quests[16]; // offset 0x800E338C
extern unsigned char *pQLogCel; // offset 0x8012B4B4
extern int ReturnLvlX; // offset 0x8012B4B8
extern int ReturnLvlY; // offset 0x8012B4BC
extern int ReturnLvl; // offset 0x8012B4C0
extern int ReturnLvlT; // offset 0x8012B4C4
extern unsigned char rporttest; // offset 0x8012B4C8
extern int qline; // offset 0x8012B4CC
extern int numqlines; // offset 0x8012B4D0
extern int qtopline; // offset 0x8012B4D4
static int qlist[16]; // offset 0x8012D178
static struct RECT QSRect; // offset 0x8012C1B0
extern unsigned char questlog; // offset 0x8012B481
extern struct QuestData questlist[16]; // offset 0x800E3254
extern int ALLQUESTS; // offset 0x8012B484
extern int QuestGroup1[3]; // offset 0x800E3368
extern int QuestGroup2[3]; // offset 0x800E3374
extern int QuestGroup3[3]; // offset 0x800E3380
extern int QuestGroup4[2]; // offset 0x8012B498
extern void * WaterDone; // offset 0x8012B4B0
static char questxoff[7]; // offset 0x8012B488
static char questyoff[7]; // offset 0x8012B490
extern int questtrigstr[5]; // offset 0x800E3354
static int QS_PX; // offset 0x8012B4A0
static int QS_PY; // offset 0x8012B4A4
static int QS_PW; // offset 0x8012B4A8
static int QS_PH; // offset 0x8012B4AC
static struct Dialog QSBack; // offset 0x8012D1B8
extern struct SpellData spelldata[37]; // offset 0x800E34CC
extern char stextflag; // offset 0x8012B50F
extern struct ItemStruct smithitem[20]; // offset 0x800E3D74
extern struct ItemStruct premiumitem[6]; // offset 0x800E4954
extern int numpremium; // offset 0x8012B510
extern int premiumlevel; // offset 0x8012B514
extern struct ItemStruct witchitem[20]; // offset 0x800E4CE4
extern struct ItemStruct boyitem; // offset 0x800E58C4
extern int boylevel; // offset 0x8012B518
extern struct ItemStruct golditem; // offset 0x800E595C
extern struct ItemStruct healitem[20]; // offset 0x800E59F4
extern char stextsize; // offset 0x8012B51C
extern unsigned char stextscrl; // offset 0x8012B51D
static int stextsel; // offset 0x8012C1B8
static int stextlhold; // offset 0x8012C1BC
static int stextshold; // offset 0x8012C1C0
static int stextvhold; // offset 0x8012C1C4
static int stextsval; // offset 0x8012C1C8
static int stextsmax; // offset 0x8012C1CC
static int stextup; // offset 0x8012C1D0
static int stextdown; // offset 0x8012C1D4
static char stextscrlubtn; // offset 0x8012C1D8
static char stextscrldbtn; // offset 0x8012C1D9
static char SItemListFlag; // offset 0x8012C1DA
static struct STextStruct stext[24]; // offset 0x8012D1C8
extern struct ItemStruct storehold[48]; // offset 0x800E65D4
extern char storehidx[48]; // offset 0x800E8254
static int storenumh; // offset 0x8012C1DC
static int gossipstart; // offset 0x8012C1E0
static int gossipend; // offset 0x8012C1E4
static struct RECT StoreBackRect; // offset 0x8012C1E8
static int talker; // offset 0x8012C1F0
extern unsigned char *pSTextBoxCels; // offset 0x8012B4FC
extern unsigned char *pSTextSlidCels; // offset 0x8012B500
extern int *SStringY; // offset 0x8012B504
extern struct Dialog SBack; // offset 0x800E3C50
extern int SStringYNorm[20]; // offset 0x800E3C60
extern int SStringYBuy0[20]; // offset 0x800E3CB0
extern int SStringYBuy1[20]; // offset 0x800E3D00
extern int talkname[9]; // offset 0x800E3D50
extern unsigned char InStoreFlag; // offset 0x8012B50E
extern struct TextDataStruct alltext[269]; // offset 0x80127A84
extern unsigned long gdwAllTextEntries; // offset 0x8012B52C
static unsigned char *P3Tiles; // offset 0x8012C1F4
extern int tile; // offset 0x8012B53C
extern unsigned char _trigflag[2]; // offset 0x8012B54C
extern struct TriggerStruct trigs[5]; // offset 0x800E84BC
extern int numtrigs; // offset 0x8012B550
extern unsigned char townwarps[3]; // offset 0x8012B554
extern int TWarpFrom; // offset 0x8012B558
extern int TownDownList[11]; // offset 0x800E8284
extern int TownWarp1List[13]; // offset 0x800E82B0
extern int L1UpList[12]; // offset 0x800E82E4
extern int L1DownList[10]; // offset 0x800E8314
extern int L2UpList[3]; // offset 0x800E833C
extern int L2DownList[5]; // offset 0x800E8348
extern int L2TWarpUpList[3]; // offset 0x800E835C
extern int L3UpList[15]; // offset 0x800E8368
extern int L3DownList[9]; // offset 0x800E83A4
extern int L3TWarpUpList[14]; // offset 0x800E83C8
extern int L4UpList[4]; // offset 0x800E8400
extern int L4DownList[6]; // offset 0x800E8410
extern int L4TWarpUpList[4]; // offset 0x800E8428
extern int L4PentaList[33]; // offset 0x800E8438
static char cursoff[10]; // offset 0x80128814
extern unsigned char gbMusicOn; // offset 0x8012B572
extern unsigned char gbSoundOn; // offset 0x8012B573
extern unsigned char gbSndInited; // offset 0x8012B571
extern long sglMasterVolume; // offset 0x8012B578
extern long sglMusicVolume; // offset 0x8012B57C
extern long sglSoundVolume; // offset 0x8012B580
extern long sglSpeechVolume; // offset 0x8012B584
extern int sgnMusicTrack; // offset 0x8012B588
extern unsigned char gbDupSounds; // offset 0x8012B574
extern struct SFXHDR *sghMusic; // offset 0x8012B58C
static unsigned short sgszMusicTracks[6]; // offset 0x801288C0
extern int _pcurr_inv[2]; // offset 0x8012B5B0
extern struct found_objects _pfind_list[2][10]; // offset 0x800E850C
extern char _pfind_index[2]; // offset 0x8012B5B8
extern char _pfindx[2]; // offset 0x8012B5BC
extern char _pfindy[2]; // offset 0x8012B5C0
extern unsigned char automapmoved; // offset 0x8012B5C2
extern unsigned char flyflag; // offset 0x8012B5A4
extern char speed_type; // offset 0x8012B5A5
extern char sel_speed; // offset 0x8012B5A6
static struct MESSAGE_STR AllMsgs[12]; // offset 0x80128A5C
extern int NumOfStrings; // offset 0x8012B5FC
extern enum LANG_TYPE LanguageType; // offset 0x8012B5D0
extern long hndText; // offset 0x8012B5D4
extern char **TextPtr; // offset 0x8012B5D8
extern enum LANG_DB_NO LangDbNo; // offset 0x8012B5DC
extern struct TextDat *MissDat; // offset 0x8012B60C
extern int CharFade; // offset 0x8012B610
extern int rotateness; // offset 0x8012B614
extern int spiralling_shape; // offset 0x8012B618
extern int down; // offset 0x8012B61C
extern char MlTab[16]; // offset 0x800E855C
extern char QlTab[16]; // offset 0x800E856C
extern int MyXoff1; // offset 0x8012B638
extern int MyYoff1; // offset 0x8012B63C
extern int MyXoff2; // offset 0x8012B640
extern int MyYoff2; // offset 0x8012B644
extern void * iscflag; // offset 0x8012B654
static unsigned char sgbFadedIn; // offset 0x8012B661
static unsigned char screenbright; // offset 0x8012B662
static int faderate; // offset 0x8012B664
static void * fading; // offset 0x8012B668
static unsigned char FadeCoords[8]; // offset 0x8012B674
extern int st; // offset 0x8012B66C
extern int mode; // offset 0x8012B670
extern struct PortalStruct portal[2]; // offset 0x800E8704
extern char portalindex; // offset 0x8012B6A6
static char WarpDropX[2]; // offset 0x8012B6A0
static char WarpDropY[2]; // offset 0x8012B6A4
extern char MyVerString[120]; // offset 0x800E871C
extern int Year; // offset 0x8012B818
extern int Day; // offset 0x8012B81C
static unsigned char *tbuff; // offset 0x8012C1FC
extern unsigned char IconBuffer[768]; // offset 0x800E8794
static unsigned char HR1; // offset 0x8012C200
static unsigned char HR2; // offset 0x8012C201
static unsigned char HR3; // offset 0x8012C202
static unsigned char VR1; // offset 0x8012C203
static unsigned char VR2; // offset 0x8012C204
static unsigned char VR3; // offset 0x8012C205
extern struct NODE *pHallList; // offset 0x8012B88C
extern int nRoomCnt; // offset 0x8012B890
extern int nSx1; // offset 0x8012B894
extern int nSy1; // offset 0x8012B898
extern int nSx2; // offset 0x8012B89C
extern int nSy2; // offset 0x8012B8A0
extern int Area_Min; // offset 0x8012B844
extern int Room_Max; // offset 0x8012B848
extern int Room_Min; // offset 0x8012B84C
extern unsigned char BIG3[6]; // offset 0x8012B850
extern unsigned char BIG4[6]; // offset 0x8012B858
extern unsigned char BIG6[6]; // offset 0x8012B860
extern unsigned char BIG7[6]; // offset 0x8012B868
extern unsigned char RUINS1[4]; // offset 0x8012B870
extern unsigned char RUINS2[4]; // offset 0x8012B874
extern unsigned char RUINS3[4]; // offset 0x8012B878
extern unsigned char RUINS4[4]; // offset 0x8012B87C
extern unsigned char RUINS5[4]; // offset 0x8012B880
extern unsigned char RUINS6[4]; // offset 0x8012B884
extern unsigned char RUINS7[4]; // offset 0x8012B888
static int abyssx; // offset 0x8012C208
static unsigned char lavapool; // offset 0x8012C20C
extern int lockoutcnt; // offset 0x8012B92C
static unsigned char L3TITE12[6]; // offset 0x8012B8B0
static unsigned char L3TITE13[6]; // offset 0x8012B8B8
static unsigned char L3CREV1[6]; // offset 0x8012B8C0
static unsigned char L3CREV2[6]; // offset 0x8012B8C8
static unsigned char L3CREV3[6]; // offset 0x8012B8D0
static unsigned char L3CREV4[6]; // offset 0x8012B8D8
static unsigned char L3CREV5[6]; // offset 0x8012B8E0
static unsigned char L3CREV6[6]; // offset 0x8012B8E8
static unsigned char L3CREV7[6]; // offset 0x8012B8F0
static unsigned char L3CREV8[6]; // offset 0x8012B8F8
static unsigned char L3CREV9[6]; // offset 0x8012B900
static unsigned char L3CREV10[6]; // offset 0x8012B908
static unsigned char L3CREV11[6]; // offset 0x8012B910
static unsigned char L3XTRA1[4]; // offset 0x8012B918
static unsigned char L3XTRA2[4]; // offset 0x8012B91C
static unsigned char L3XTRA3[4]; // offset 0x8012B920
static unsigned char L3XTRA4[4]; // offset 0x8012B924
static unsigned char L3XTRA5[4]; // offset 0x8012B928
extern int diabquad1x; // offset 0x8012B930
extern int diabquad2x; // offset 0x8012B934
extern int diabquad3x; // offset 0x8012B938
extern int diabquad4x; // offset 0x8012B93C
extern int diabquad1y; // offset 0x8012B940
extern int diabquad2y; // offset 0x8012B944
extern int diabquad3y; // offset 0x8012B948
extern int diabquad4y; // offset 0x8012B94C
extern int SP4x1; // offset 0x8012B950
extern int SP4y1; // offset 0x8012B954
extern int SP4x2; // offset 0x8012B958
extern int SP4y2; // offset 0x8012B95C
extern int l4holdx; // offset 0x8012B960
extern int l4holdy; // offset 0x8012B964
static unsigned char *lpSetPiece1; // offset 0x8012C210
static unsigned char *lpSetPiece2; // offset 0x8012C214
static unsigned char *lpSetPiece3; // offset 0x8012C218
static unsigned char *lpSetPiece4; // offset 0x8012C21C
static unsigned char SkelKingTrans1[8]; // offset 0x8012B974
static unsigned char SkelKingTrans2[8]; // offset 0x8012B97C
static unsigned char SkelKingTrans3[20]; // offset 0x800E8A94
static unsigned char SkelKingTrans4[28]; // offset 0x800E8AA8
static unsigned char SkelChamTrans1[20]; // offset 0x800E8AC4
static unsigned char SkelChamTrans2[8]; // offset 0x8012B984
static unsigned char SkelChamTrans3[36]; // offset 0x800E8AD8
static void * DoUiForChooseMonster; // offset 0x8012BA78
static char (*MgToText[34]); // offset 0x800E8AFC
extern int StoryText[3][3]; // offset 0x800E8B84
extern unsigned short dungeon[48][48]; // offset 0x800E8BA8
extern unsigned char pdungeon[40][40]; // offset 0x800E9DA8
extern unsigned char dflags[40][40]; // offset 0x800EA3E8
extern int setpc_x; // offset 0x8012BA9C
extern int setpc_y; // offset 0x8012BAA0
extern int setpc_w; // offset 0x8012BAA4
extern int setpc_h; // offset 0x8012BAA8
extern unsigned char setloadflag; // offset 0x8012BAAC
extern unsigned char *pMegaTiles; // offset 0x8012BAB0
extern unsigned char nBlockTable[2049]; // offset 0x800EAA28
extern unsigned char nSolidTable[2049]; // offset 0x800EB22C
extern unsigned char nTransTable[2049]; // offset 0x800EBA30
extern unsigned char nMissileTable[2049]; // offset 0x800EC234
extern unsigned char nTrapTable[2049]; // offset 0x800ECA38
extern int dminx; // offset 0x8012BAB4
extern int dminy; // offset 0x8012BAB8
extern int dmaxx; // offset 0x8012BABC
extern int dmaxy; // offset 0x8012BAC0
extern int gnDifficulty; // offset 0x8012BAC4
extern unsigned char currlevel; // offset 0x8012BAC8
extern unsigned char leveltype; // offset 0x8012BAC9
extern unsigned char setlevel; // offset 0x8012BACA
extern unsigned char setlvlnum; // offset 0x8012BACB
extern unsigned char setlvltype; // offset 0x8012BACC
extern int ViewX; // offset 0x8012BAD0
extern int ViewY; // offset 0x8012BAD4
extern int ViewDX; // offset 0x8012BAD8
extern int ViewDY; // offset 0x8012BADC
extern int ViewBX; // offset 0x8012BAE0
extern int ViewBY; // offset 0x8012BAE4
extern struct ScrollStruct ScrollInfo; // offset 0x800ED23C
extern int LvlViewX; // offset 0x8012BAE8
extern int LvlViewY; // offset 0x8012BAEC
extern int btmbx; // offset 0x8012BAF0
extern int btmby; // offset 0x8012BAF4
extern int btmdx; // offset 0x8012BAF8
extern int btmdy; // offset 0x8012BAFC
extern int MicroTileLen; // offset 0x8012BB00
extern char TransVal; // offset 0x8012BB04
extern void * TransList[8]; // offset 0x800ED250
extern int themeCount; // offset 0x8012BB08
extern struct map_info dung_map[108][108]; // offset 0x800ED270
extern unsigned char dung_map_r[54][54]; // offset 0x8010F530
extern unsigned char dung_map_g[54][54]; // offset 0x80110094
extern unsigned char dung_map_b[54][54]; // offset 0x80110BF8
extern struct MINIXY MinisetXY[17]; // offset 0x8011175C
extern unsigned char *pSetPiece; // offset 0x8012BA94
extern int DungSize; // offset 0x8012BA98
extern struct ThemeStruct theme[50]; // offset 0x80111928
extern int numthemes; // offset 0x8012BB48
extern int zharlib; // offset 0x8012BB4C
extern unsigned char armorFlag; // offset 0x8012BB50
extern unsigned char bCrossFlag; // offset 0x8012BB51
extern unsigned char weaponFlag; // offset 0x8012BB52
extern int themex; // offset 0x8012BB54
extern int themey; // offset 0x8012BB58
extern int themeVar1; // offset 0x8012BB5C
extern unsigned char bFountainFlag; // offset 0x8012BB60
extern unsigned char cauldronFlag; // offset 0x8012BB61
extern unsigned char mFountainFlag; // offset 0x8012BB62
extern unsigned char pFountainFlag; // offset 0x8012BB63
extern unsigned char tFountainFlag; // offset 0x8012BB64
extern unsigned char treasureFlag; // offset 0x8012BB65
extern unsigned char ThemeGoodIn[4]; // offset 0x8012BB68
extern int ThemeGood[4]; // offset 0x80111808
extern int trm5x[25]; // offset 0x80111818
extern int trm5y[25]; // offset 0x8011187C
extern int trm3x[9]; // offset 0x801118E0
extern int trm3y[9]; // offset 0x80111904
extern int nummissiles; // offset 0x8012BC20
extern int missileactive[125]; // offset 0x80111B40
extern int missileavail[125]; // offset 0x80111D34
extern unsigned char MissilePreFlag; // offset 0x8012BC24
extern struct MissileStruct missile[125]; // offset 0x80111F28
extern unsigned char ManashieldFlag; // offset 0x8012BC25
extern unsigned char ManashieldFlag2; // offset 0x8012BC26
extern int XDirAdd[8]; // offset 0x80111AB8
extern int YDirAdd[8]; // offset 0x80111AD8
extern unsigned char fadetor; // offset 0x8012BC0D
extern unsigned char fadetog; // offset 0x8012BC0E
extern unsigned char fadetob; // offset 0x8012BC0F
extern unsigned char ValueTable[16]; // offset 0x80111AF8
extern unsigned char StringTable[6][9]; // offset 0x80111B08
extern struct MonsterStruct monster[200]; // offset 0x801147D8
extern long nummonsters; // offset 0x8012BC84
extern short monstactive[200]; // offset 0x80119F58
extern short monstkills[200]; // offset 0x8011A0E8
extern struct CMonster Monsters[16]; // offset 0x8011A278
extern long monstimgtot; // offset 0x8012BC88
extern char totalmonsters; // offset 0x8012BC8C
extern int uniquetrans; // offset 0x8012BC90
static unsigned char sgbSaveSoundOn; // offset 0x8012C220
extern char offset_x[8]; // offset 0x8012BC58
extern char offset_y[8]; // offset 0x8012BC60
extern char left[8]; // offset 0x8012BC40
extern char right[8]; // offset 0x8012BC48
extern char opposite[8]; // offset 0x8012BC50
extern int nummtypes; // offset 0x8012BC34
extern char animletter[7]; // offset 0x8012BC38
extern int MWVel[24][3]; // offset 0x80114638
extern char rnd5[4]; // offset 0x8012BC68
extern char rnd10[4]; // offset 0x8012BC6C
extern char rnd20[4]; // offset 0x8012BC70
extern char rnd60[4]; // offset 0x8012BC74
extern struct MonsterData monsterdata[112]; // offset 0x8011A750
extern char MonstConvTbl[128]; // offset 0x8011C190
extern char MonstAvailTbl[112]; // offset 0x8011C210
extern struct UniqMonstStruct UniqMonst[98]; // offset 0x8011C280
extern int TransPals[134]; // offset 0x8011A538
extern struct STONEPAL StonePals[32]; // offset 0x8011A438
extern unsigned char invflag; // offset 0x8012BCC0
extern unsigned char drawsbarflag; // offset 0x8012BCC1
extern int InvBackY; // offset 0x8012BCC4
extern int InvCursPos; // offset 0x8012BCC8
extern unsigned char InvSlotTable[73]; // offset 0x8011D228
extern int InvBackAY; // offset 0x8012BCCC
extern int InvSel; // offset 0x8012BCD0
extern int ItemW; // offset 0x8012BCD4
extern int ItemH; // offset 0x8012BCD8
extern int ItemNo; // offset 0x8012BCDC
extern struct RECT BRect; // offset 0x8012BCE0
extern struct TextDat *InvPanelTData; // offset 0x8012BCB0
extern struct TextDat *InvGfxTData; // offset 0x8012BCB4
extern int InvPageNo; // offset 0x8012BCAC
extern int AP2x2Tbl[10]; // offset 0x8011CBB0
extern struct InvXY InvRect[73]; // offset 0x8011CBD8
extern int InvGfxTable[168]; // offset 0x8011CE20
extern unsigned char InvItemWidth[180]; // offset 0x8011D0C0
extern unsigned char InvItemHeight[180]; // offset 0x8011D174
static void * InvOn; // offset 0x8012BCB8
static unsigned long sgdwLastTime; // offset 0x8012BCBC
extern unsigned char automapflag; // offset 0x8012BD0A
extern unsigned char automapview[5][40]; // offset 0x8011D274
extern unsigned short automaptype[512]; // offset 0x8011D33C
extern unsigned char AMLWallFlag; // offset 0x8012BD0B
extern unsigned char AMRWallFlag; // offset 0x8012BD0C
extern unsigned char AMLLWallFlag; // offset 0x8012BD0D
extern unsigned char AMLRWallFlag; // offset 0x8012BD0E
extern unsigned char AMDirtFlag; // offset 0x8012BD0F
extern unsigned char AMColumnFlag; // offset 0x8012BD10
extern unsigned char AMStairFlag; // offset 0x8012BD11
extern unsigned char AMLDoorFlag; // offset 0x8012BD12
extern unsigned char AMLGrateFlag; // offset 0x8012BD13
extern unsigned char AMLArchFlag; // offset 0x8012BD14
extern unsigned char AMRDoorFlag; // offset 0x8012BD15
extern unsigned char AMRGrateFlag; // offset 0x8012BD16
extern unsigned char AMRArchFlag; // offset 0x8012BD17
extern int AutoMapX; // offset 0x8012BD18
extern int AutoMapY; // offset 0x8012BD1C
extern int AutoMapXOfs; // offset 0x8012BD20
extern int AutoMapYOfs; // offset 0x8012BD24
extern int AMPlayerX; // offset 0x8012BD28
extern int AMPlayerY; // offset 0x8012BD2C
extern int AutoMapScale; // offset 0x8012BCF4
extern unsigned char AutoMapPlayerR; // offset 0x8012BCF8
extern unsigned char AutoMapPlayerG; // offset 0x8012BCF9
extern unsigned char AutoMapPlayerB; // offset 0x8012BCFA
extern unsigned char AutoMapWallR; // offset 0x8012BCFB
extern unsigned char AutoMapWallG; // offset 0x8012BCFC
extern unsigned char AutoMapWallB; // offset 0x8012BCFD
extern unsigned char AutoMapDoorR; // offset 0x8012BCFE
extern unsigned char AutoMapDoorG; // offset 0x8012BCFF
extern unsigned char AutoMapDoorB; // offset 0x8012BD00
extern unsigned char AutoMapColumnR; // offset 0x8012BD01
extern unsigned char AutoMapColumnG; // offset 0x8012BD02
extern unsigned char AutoMapColumnB; // offset 0x8012BD03
extern unsigned char AutoMapArchR; // offset 0x8012BD04
extern unsigned char AutoMapArchG; // offset 0x8012BD05
extern unsigned char AutoMapArchB; // offset 0x8012BD06
extern unsigned char AutoMapStairR; // offset 0x8012BD07
extern unsigned char AutoMapStairG; // offset 0x8012BD08
extern unsigned char AutoMapStairB; // offset 0x8012BD09
extern unsigned long GazTick; // offset 0x8012C37C
extern unsigned long RndTabs[6]; // offset 0x80132CB8
extern unsigned long DefaultRnd[6]; // offset 0x800A64C0
static struct TASK *ActiveTasks; // offset 0x8012C2A8
static struct TASK *CurrentTask; // offset 0x8012C2AC
static struct TASK *T; // offset 0x8012C2B0
static unsigned long MemTypeForTasker; // offset 0x8012C2B4
static int SchEnv[12]; // offset 0x801304E8
static unsigned long ExecId; // offset 0x8012C2B8
static unsigned long ExecMask; // offset 0x8012C2BC
static int TasksActive; // offset 0x8012C2C0
static unsigned long EpiProId; // offset 0x8012C2CC
static unsigned long EpiProMask; // offset 0x8012C2D0
static unsigned char ExtraStackProtection; // offset 0x8012C2E0
static int ExtraStackSizeLongs; // offset 0x8012C2E4
extern void *LastPtr; // offset 0x8012C390
extern struct MEM_INFO WorkMemInfo; // offset 0x800A64F8
static struct MEM_INIT_INFO *MemInitBlocks; // offset 0x8012C2E8
static struct MEM_HDR MemHdrBlocks[140]; // offset 0x80130518
static struct MEM_HDR *FreeBlocks; // offset 0x8012C2EC
static enum GAL_ERROR_CODE LastError; // offset 0x8012C2F0
static int TimeStamp; // offset 0x8012C2F4
static unsigned char FullErrorChecking; // offset 0x8012C2F8
static unsigned long LastAttemptedAlloc; // offset 0x8012C2FC
static unsigned long LastDeallocedBlock; // offset 0x8012C300
static enum GAL_VERB_LEV VerbLev; // offset 0x8012C304
static int NumOfFreeHdrs; // offset 0x8012C308
static unsigned long LastTypeAlloced; // offset 0x8012C30C
extern char (*GalErrors[10]); // offset 0x800A6500
extern struct MEM_INIT_INFO PhantomMem; // offset 0x800A6528
static char buf[4992]; // offset 0x80131698
static char NULL_REP[7]; // offset 0x800A6550

/* End external declarations */

#endif
